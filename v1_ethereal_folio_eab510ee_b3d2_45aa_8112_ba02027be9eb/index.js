var Oe=(e,t,r)=>(n,o)=>{let s=-1;return i(0);async function i(a){if(a<=s)throw new Error("next() called multiple times");s=a;let c,u=!1,l;if(e[a]?(l=e[a][0][0],n.req.routeIndex=a):l=a===e.length&&o||void 0,l)try{c=await l(n,()=>i(a+1))}catch(d){if(d instanceof Error&&t)n.error=d,c=await t(d,n),u=!0;else throw d}else n.finalized===!1&&r&&(c=await r(n));return c&&(n.finalized===!1||u)&&(n.res=c),n}},Re=class extends Error{res;status;constructor(e=500,t){super(t?.message,{cause:t?.cause}),this.res=t?.res,this.status=e}getResponse(){return this.res?new Response(this.res.body,{status:this.status,headers:this.res.headers}):new Response(this.message,{status:this.status})}},Pt=Symbol(),At=async(e,t=Object.create(null))=>{const{all:r=!1,dot:n=!1}=t,s=(e instanceof Qe?e.raw.headers:e.headers).get("Content-Type");return s?.startsWith("multipart/form-data")||s?.startsWith("application/x-www-form-urlencoded")?jt(e,{all:r,dot:n}):{}};async function jt(e,t){const r=await e.formData();return r?xt(r,t):{}}function xt(e,t){const r=Object.create(null);return e.forEach((n,o)=>{t.all||o.endsWith("[]")?St(r,o,n):r[o]=n}),t.dot&&Object.entries(r).forEach(([n,o])=>{n.includes(".")&&(Ct(r,n,o),delete r[n])}),r}var St=(e,t,r)=>{e[t]!==void 0?Array.isArray(e[t])?e[t].push(r):e[t]=[e[t],r]:t.endsWith("[]")?e[t]=[r]:e[t]=r},Ct=(e,t,r)=>{let n=e;const o=t.split(".");o.forEach((s,i)=>{i===o.length-1?n[s]=r:((!n[s]||typeof n[s]!="object"||Array.isArray(n[s])||n[s]instanceof File)&&(n[s]=Object.create(null)),n=n[s])})},Je=e=>{const t=e.split("/");return t[0]===""&&t.shift(),t},It=e=>{const{groups:t,path:r}=Tt(e),n=Je(r);return Dt(n,t)},Tt=e=>{const t=[];return e=e.replace(/\{[^}]+\}/g,(r,n)=>{const o=`@${n}`;return t.push([o,r]),o}),{groups:t,path:e}},Dt=(e,t)=>{for(let r=t.length-1;r>=0;r--){const[n]=t[r];for(let o=e.length-1;o>=0;o--)if(e[o].includes(n)){e[o]=e[o].replace(n,t[r][1]);break}}return e},Y={},Nt=(e,t)=>{if(e==="*")return"*";const r=e.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);if(r){const n=`${e}#${t}`;return Y[n]||(r[2]?Y[n]=t&&t[0]!==":"&&t[0]!=="*"?[n,r[1],new RegExp(`^${r[2]}(?=/${t})`)]:[e,r[1],new RegExp(`^${r[2]}$`)]:Y[n]=[e,r[1],!0]),Y[n]}return null},ce=(e,t)=>{try{return t(e)}catch{return e.replace(/(?:%[0-9A-Fa-f]{2})+/g,r=>{try{return t(r)}catch{return r}})}},Ut=e=>ce(e,decodeURI),Ge=e=>{const t=e.url,r=t.indexOf("/",t.indexOf(":")+4);let n=r;for(;n<t.length;n++){const o=t.charCodeAt(n);if(o===37){const s=t.indexOf("?",n),i=t.slice(r,s===-1?void 0:s);return Ut(i.includes("%25")?i.replace(/%25/g,"%2525"):i)}else if(o===63)break}return t.slice(r,n)},Ft=e=>{const t=Ge(e);return t.length>1&&t.at(-1)==="/"?t.slice(0,-1):t},L=(e,t,...r)=>(r.length&&(t=L(t,...r)),`${e?.[0]==="/"?"":"/"}${e}${t==="/"?"":`${e?.at(-1)==="/"?"":"/"}${t?.[0]==="/"?t.slice(1):t}`}`),Xe=e=>{if(e.charCodeAt(e.length-1)!==63||!e.includes(":"))return null;const t=e.split("/"),r=[];let n="";return t.forEach(o=>{if(o!==""&&!/\:/.test(o))n+="/"+o;else if(/\:/.test(o))if(/\?/.test(o)){r.length===0&&n===""?r.push("/"):r.push(n);const s=o.replace("?","");n+="/"+s,r.push(n)}else n+="/"+o}),r.filter((o,s,i)=>i.indexOf(o)===s)},fe=e=>/[%+]/.test(e)?(e.indexOf("+")!==-1&&(e=e.replace(/\+/g," ")),e.indexOf("%")!==-1?ce(e,we):e):e,Ye=(e,t,r)=>{let n;if(!r&&t&&!/[%+]/.test(t)){let i=e.indexOf(`?${t}`,8);for(i===-1&&(i=e.indexOf(`&${t}`,8));i!==-1;){const a=e.charCodeAt(i+t.length+1);if(a===61){const c=i+t.length+2,u=e.indexOf("&",c);return fe(e.slice(c,u===-1?void 0:u))}else if(a==38||isNaN(a))return"";i=e.indexOf(`&${t}`,i+1)}if(n=/[%+]/.test(e),!n)return}const o={};n??=/[%+]/.test(e);let s=e.indexOf("?",8);for(;s!==-1;){const i=e.indexOf("&",s+1);let a=e.indexOf("=",s);a>i&&i!==-1&&(a=-1);let c=e.slice(s+1,a===-1?i===-1?void 0:i:a);if(n&&(c=fe(c)),s=i,c==="")continue;let u;a===-1?u="":(u=e.slice(a+1,i===-1?void 0:i),n&&(u=fe(u))),r?(o[c]&&Array.isArray(o[c])||(o[c]=[]),o[c].push(u)):o[c]??=u}return t?o[t]:o},Lt=Ye,Ht=(e,t)=>Ye(e,t,!0),we=decodeURIComponent,Pe=e=>ce(e,we),Qe=class{raw;#t;#e;routeIndex=0;path;bodyCache={};constructor(e,t="/",r=[[]]){this.raw=e,this.path=t,this.#e=r,this.#t={}}param(e){return e?this.#r(e):this.#s()}#r(e){const t=this.#e[0][this.routeIndex][1][e],r=this.#o(t);return r&&/\%/.test(r)?Pe(r):r}#s(){const e={},t=Object.keys(this.#e[0][this.routeIndex][1]);for(const r of t){const n=this.#o(this.#e[0][this.routeIndex][1][r]);n!==void 0&&(e[r]=/\%/.test(n)?Pe(n):n)}return e}#o(e){return this.#e[1]?this.#e[1][e]:e}query(e){return Lt(this.url,e)}queries(e){return Ht(this.url,e)}header(e){if(e)return this.raw.headers.get(e)??void 0;const t={};return this.raw.headers.forEach((r,n)=>{t[n]=r}),t}async parseBody(e){return this.bodyCache.parsedBody??=await At(this,e)}#n=e=>{const{bodyCache:t,raw:r}=this,n=t[e];if(n)return n;const o=Object.keys(t)[0];return o?t[o].then(s=>(o==="json"&&(s=JSON.stringify(s)),new Response(s)[e]())):t[e]=r[e]()};json(){return this.#n("text").then(e=>JSON.parse(e))}text(){return this.#n("text")}arrayBuffer(){return this.#n("arrayBuffer")}blob(){return this.#n("blob")}formData(){return this.#n("formData")}addValidatedData(e,t){this.#t[e]=t}valid(e){return this.#t[e]}get url(){return this.raw.url}get method(){return this.raw.method}get[Pt](){return this.#e}get matchedRoutes(){return this.#e[0].map(([[,e]])=>e)}get routePath(){return this.#e[0].map(([[,e]])=>e)[this.routeIndex].path}},Mt={Stringify:1},et=async(e,t,r,n,o)=>{typeof e=="object"&&!(e instanceof String)&&(e instanceof Promise||(e=e.toString()),e instanceof Promise&&(e=await e));const s=e.callbacks;return s?.length?(o?o[0]+=e:o=[e],Promise.all(s.map(a=>a({phase:t,buffer:o,context:n}))).then(a=>Promise.all(a.filter(Boolean).map(c=>et(c,t,!1,n,o))).then(()=>o[0]))):Promise.resolve(e)},qt="text/plain; charset=UTF-8",pe=(e,t)=>({"Content-Type":e,...t}),Wt=class{#t;#e;env={};#r;finalized=!1;error;#s;#o;#n;#l;#c;#u;#a;#h;#d;constructor(e,t){this.#t=e,t&&(this.#o=t.executionCtx,this.env=t.env,this.#u=t.notFoundHandler,this.#d=t.path,this.#h=t.matchResult)}get req(){return this.#e??=new Qe(this.#t,this.#d,this.#h),this.#e}get event(){if(this.#o&&"respondWith"in this.#o)return this.#o;throw Error("This context has no FetchEvent")}get executionCtx(){if(this.#o)return this.#o;throw Error("This context has no ExecutionContext")}get res(){return this.#n||=new Response(null,{headers:this.#a??=new Headers})}set res(e){if(this.#n&&e){e=new Response(e.body,e);for(const[t,r]of this.#n.headers.entries())if(t!=="content-type")if(t==="set-cookie"){const n=this.#n.headers.getSetCookie();e.headers.delete("set-cookie");for(const o of n)e.headers.append("set-cookie",o)}else e.headers.set(t,r)}this.#n=e,this.finalized=!0}render=(...e)=>(this.#c??=t=>this.html(t),this.#c(...e));setLayout=e=>this.#l=e;getLayout=()=>this.#l;setRenderer=e=>{this.#c=e};header=(e,t,r)=>{this.finalized&&(this.#n=new Response(this.#n.body,this.#n));const n=this.#n?this.#n.headers:this.#a??=new Headers;t===void 0?n.delete(e):r?.append?n.append(e,t):n.set(e,t)};status=e=>{this.#s=e};set=(e,t)=>{this.#r??=new Map,this.#r.set(e,t)};get=e=>this.#r?this.#r.get(e):void 0;get var(){return this.#r?Object.fromEntries(this.#r):{}}#i(e,t,r){const n=this.#n?new Headers(this.#n.headers):this.#a??new Headers;if(typeof t=="object"&&"headers"in t){const s=t.headers instanceof Headers?t.headers:new Headers(t.headers);for(const[i,a]of s)i.toLowerCase()==="set-cookie"?n.append(i,a):n.set(i,a)}if(r)for(const[s,i]of Object.entries(r))if(typeof i=="string")n.set(s,i);else{n.delete(s);for(const a of i)n.append(s,a)}const o=typeof t=="number"?t:t?.status??this.#s;return new Response(e,{status:o,headers:n})}newResponse=(...e)=>this.#i(...e);body=(e,t,r)=>this.#i(e,t,r);text=(e,t,r)=>!this.#a&&!this.#s&&!t&&!r&&!this.finalized?new Response(e):this.#i(e,t,pe(qt,r));json=(e,t,r)=>this.#i(JSON.stringify(e),t,pe("application/json",r));html=(e,t,r)=>{const n=o=>this.#i(o,t,pe("text/html; charset=UTF-8",r));return typeof e=="object"?et(e,Mt.Stringify,!1,{}).then(n):n(e)};redirect=(e,t)=>{const r=String(e);return this.header("Location",/[^\x00-\xFF]/.test(r)?encodeURI(r):r),this.newResponse(null,t??302)};notFound=()=>(this.#u??=()=>new Response,this.#u(this))},b="ALL",Bt="all",Vt=["get","post","put","delete","options","patch"],tt="Can not add a route since the matcher is already built.",rt=class extends Error{},Kt="__COMPOSED_HANDLER",Jt=e=>e.text("404 Not Found",404),Ae=(e,t)=>{if("getResponse"in e){const r=e.getResponse();return t.newResponse(r.body,r)}return console.error(e),t.text("Internal Server Error",500)},nt=class{get;post;put;delete;options;patch;all;on;use;router;getPath;_basePath="/";#t="/";routes=[];constructor(t={}){[...Vt,Bt].forEach(s=>{this[s]=(i,...a)=>(typeof i=="string"?this.#t=i:this.#s(s,this.#t,i),a.forEach(c=>{this.#s(s,this.#t,c)}),this)}),this.on=(s,i,...a)=>{for(const c of[i].flat()){this.#t=c;for(const u of[s].flat())a.map(l=>{this.#s(u.toUpperCase(),this.#t,l)})}return this},this.use=(s,...i)=>(typeof s=="string"?this.#t=s:(this.#t="*",i.unshift(s)),i.forEach(a=>{this.#s(b,this.#t,a)}),this);const{strict:n,...o}=t;Object.assign(this,o),this.getPath=n??!0?t.getPath??Ge:Ft}#e(){const t=new nt({router:this.router,getPath:this.getPath});return t.errorHandler=this.errorHandler,t.#r=this.#r,t.routes=this.routes,t}#r=Jt;errorHandler=Ae;route(t,r){const n=this.basePath(t);return r.routes.map(o=>{let s;r.errorHandler===Ae?s=o.handler:(s=async(i,a)=>(await Oe([],r.errorHandler)(i,()=>o.handler(i,a))).res,s[Kt]=o.handler),n.#s(o.method,o.path,s)}),this}basePath(t){const r=this.#e();return r._basePath=L(this._basePath,t),r}onError=t=>(this.errorHandler=t,this);notFound=t=>(this.#r=t,this);mount(t,r,n){let o,s;n&&(typeof n=="function"?s=n:(s=n.optionHandler,n.replaceRequest===!1?o=c=>c:o=n.replaceRequest));const i=s?c=>{const u=s(c);return Array.isArray(u)?u:[u]}:c=>{let u;try{u=c.executionCtx}catch{}return[c.env,u]};o||=(()=>{const c=L(this._basePath,t),u=c==="/"?0:c.length;return l=>{const d=new URL(l.url);return d.pathname=d.pathname.slice(u)||"/",new Request(d,l)}})();const a=async(c,u)=>{const l=await r(o(c.req.raw),...i(c));if(l)return l;await u()};return this.#s(b,L(t,"*"),a),this}#s(t,r,n){t=t.toUpperCase(),r=L(this._basePath,r);const o={basePath:this._basePath,path:r,method:t,handler:n};this.router.add(t,r,[n,o]),this.routes.push(o)}#o(t,r){if(t instanceof Error)return this.errorHandler(t,r);throw t}#n(t,r,n,o){if(o==="HEAD")return(async()=>new Response(null,await this.#n(t,r,n,"GET")))();const s=this.getPath(t,{env:n}),i=this.router.match(o,s),a=new Wt(t,{path:s,matchResult:i,env:n,executionCtx:r,notFoundHandler:this.#r});if(i[0].length===1){let u;try{u=i[0][0][0][0](a,async()=>{a.res=await this.#r(a)})}catch(l){return this.#o(l,a)}return u instanceof Promise?u.then(l=>l||(a.finalized?a.res:this.#r(a))).catch(l=>this.#o(l,a)):u??this.#r(a)}const c=Oe(i[0],this.errorHandler,this.#r);return(async()=>{try{const u=await c(a);if(!u.finalized)throw new Error("Context is not finalized. Did you forget to return a Response object or `await next()`?");return u.res}catch(u){return this.#o(u,a)}})()}fetch=(t,...r)=>this.#n(t,r[1],r[0],t.method);request=(t,r,n,o)=>t instanceof Request?this.fetch(r?new Request(t,r):t,n,o):(t=t.toString(),this.fetch(new Request(/^https?:\/\//.test(t)?t:`http://localhost${L("/",t)}`,r),n,o));fire=()=>{addEventListener("fetch",t=>{t.respondWith(this.#n(t.request,t,void 0,t.request.method))})}},ot=[];function Gt(e,t){const r=this.buildAllMatchers(),n=(o,s)=>{const i=r[o]||r[b],a=i[2][s];if(a)return a;const c=s.match(i[0]);if(!c)return[[],ot];const u=c.indexOf("",1);return[i[1][u],c]};return this.match=n,n(e,t)}var oe="[^/]+",V=".*",K="(?:|/.*)",H=Symbol(),Xt=new Set(".\\+*[^]$()");function Yt(e,t){return e.length===1?t.length===1?e<t?-1:1:-1:t.length===1||e===V||e===K?1:t===V||t===K?-1:e===oe?1:t===oe?-1:e.length===t.length?e<t?-1:1:t.length-e.length}var me=class{#t;#e;#r=Object.create(null);insert(t,r,n,o,s){if(t.length===0){if(this.#t!==void 0)throw H;if(s)return;this.#t=r;return}const[i,...a]=t,c=i==="*"?a.length===0?["","",V]:["","",oe]:i==="/*"?["","",K]:i.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);let u;if(c){const l=c[1];let d=c[2]||oe;if(l&&c[2]&&(d===".*"||(d=d.replace(/^\((?!\?:)(?=[^)]+\)$)/,"(?:"),/\((?!\?:)/.test(d))))throw H;if(u=this.#r[d],!u){if(Object.keys(this.#r).some(f=>f!==V&&f!==K))throw H;if(s)return;u=this.#r[d]=new me,l!==""&&(u.#e=o.varIndex++)}!s&&l!==""&&n.push([l,u.#e])}else if(u=this.#r[i],!u){if(Object.keys(this.#r).some(l=>l.length>1&&l!==V&&l!==K))throw H;if(s)return;u=this.#r[i]=new me}u.insert(a,r,n,o,s)}buildRegExpStr(){const r=Object.keys(this.#r).sort(Yt).map(n=>{const o=this.#r[n];return(typeof o.#e=="number"?`(${n})@${o.#e}`:Xt.has(n)?`\\${n}`:n)+o.buildRegExpStr()});return typeof this.#t=="number"&&r.unshift(`#${this.#t}`),r.length===0?"":r.length===1?r[0]:"(?:"+r.join("|")+")"}},Qt=class{#t={varIndex:0};#e=new me;insert(e,t,r){const n=[],o=[];for(let i=0;;){let a=!1;if(e=e.replace(/\{[^}]+\}/g,c=>{const u=`@\\${i}`;return o[i]=[u,c],i++,a=!0,u}),!a)break}const s=e.match(/(?::[^\/]+)|(?:\/\*$)|./g)||[];for(let i=o.length-1;i>=0;i--){const[a]=o[i];for(let c=s.length-1;c>=0;c--)if(s[c].indexOf(a)!==-1){s[c]=s[c].replace(a,o[i][1]);break}}return this.#e.insert(s,t,n,this.#t,r),n}buildRegExp(){let e=this.#e.buildRegExpStr();if(e==="")return[/^$/,[],[]];let t=0;const r=[],n=[];return e=e.replace(/#(\d+)|@(\d+)|\.\*\$/g,(o,s,i)=>s!==void 0?(r[++t]=Number(s),"$()"):(i!==void 0&&(n[Number(i)]=++t),"")),[new RegExp(`^${e}`),r,n]}},er=[/^$/,[],Object.create(null)],st=Object.create(null);function it(e){return st[e]??=new RegExp(e==="*"?"":`^${e.replace(/\/\*$|([.\\+*[^\]$()])/g,(t,r)=>r?`\\${r}`:"(?:|/.*)")}$`)}function tr(){st=Object.create(null)}function rr(e){const t=new Qt,r=[];if(e.length===0)return er;const n=e.map(u=>[!/\*|\/:/.test(u[0]),...u]).sort(([u,l],[d,f])=>u?1:d?-1:l.length-f.length),o=Object.create(null);for(let u=0,l=-1,d=n.length;u<d;u++){const[f,g,m]=n[u];f?o[g]=[m.map(([Z])=>[Z,Object.create(null)]),ot]:l++;let $;try{$=t.insert(g,l,f)}catch(Z){throw Z===H?new rt(g):Z}f||(r[l]=m.map(([Z,A])=>{const I=Object.create(null);for(A-=1;A>=0;A--){const[y,E]=$[A];I[y]=E}return[Z,I]}))}const[s,i,a]=t.buildRegExp();for(let u=0,l=r.length;u<l;u++)for(let d=0,f=r[u].length;d<f;d++){const g=r[u][d]?.[1];if(!g)continue;const m=Object.keys(g);for(let $=0,Z=m.length;$<Z;$++)g[m[$]]=a[g[m[$]]]}const c=[];for(const u in i)c[u]=r[i[u]];return[s,c,o]}function F(e,t){if(e){for(const r of Object.keys(e).sort((n,o)=>o.length-n.length))if(it(r).test(t))return[...e[r]]}}var nr=class{name="RegExpRouter";#t;#e;constructor(){this.#t={[b]:Object.create(null)},this.#e={[b]:Object.create(null)}}add(e,t,r){const n=this.#t,o=this.#e;if(!n||!o)throw new Error(tt);n[e]||[n,o].forEach(a=>{a[e]=Object.create(null),Object.keys(a[b]).forEach(c=>{a[e][c]=[...a[b][c]]})}),t==="/*"&&(t="*");const s=(t.match(/\/:/g)||[]).length;if(/\*$/.test(t)){const a=it(t);e===b?Object.keys(n).forEach(c=>{n[c][t]||=F(n[c],t)||F(n[b],t)||[]}):n[e][t]||=F(n[e],t)||F(n[b],t)||[],Object.keys(n).forEach(c=>{(e===b||e===c)&&Object.keys(n[c]).forEach(u=>{a.test(u)&&n[c][u].push([r,s])})}),Object.keys(o).forEach(c=>{(e===b||e===c)&&Object.keys(o[c]).forEach(u=>a.test(u)&&o[c][u].push([r,s]))});return}const i=Xe(t)||[t];for(let a=0,c=i.length;a<c;a++){const u=i[a];Object.keys(o).forEach(l=>{(e===b||e===l)&&(o[l][u]||=[...F(n[l],u)||F(n[b],u)||[]],o[l][u].push([r,s-c+a+1]))})}}match=Gt;buildAllMatchers(){const e=Object.create(null);return Object.keys(this.#e).concat(Object.keys(this.#t)).forEach(t=>{e[t]||=this.#r(t)}),this.#t=this.#e=void 0,tr(),e}#r(e){const t=[];let r=e===b;return[this.#t,this.#e].forEach(n=>{const o=n[e]?Object.keys(n[e]).map(s=>[s,n[e][s]]):[];o.length!==0?(r||=!0,t.push(...o)):e!==b&&t.push(...Object.keys(n[b]).map(s=>[s,n[b][s]]))}),r?rr(t):null}},or=class{name="SmartRouter";#t=[];#e=[];constructor(e){this.#t=e.routers}add(e,t,r){if(!this.#e)throw new Error(tt);this.#e.push([e,t,r])}match(e,t){if(!this.#e)throw new Error("Fatal error");const r=this.#t,n=this.#e,o=r.length;let s=0,i;for(;s<o;s++){const a=r[s];try{for(let c=0,u=n.length;c<u;c++)a.add(...n[c]);i=a.match(e,t)}catch(c){if(c instanceof rt)continue;throw c}this.match=a.match.bind(a),this.#t=[a],this.#e=void 0;break}if(s===o)throw new Error("Fatal error");return this.name=`SmartRouter + ${this.activeRouter.name}`,i}get activeRouter(){if(this.#e||this.#t.length!==1)throw new Error("No active router has been determined yet.");return this.#t[0]}},B=Object.create(null),at=class{#t;#e;#r;#s=0;#o=B;constructor(e,t,r){if(this.#e=r||Object.create(null),this.#t=[],e&&t){const n=Object.create(null);n[e]={handler:t,possibleKeys:[],score:0},this.#t=[n]}this.#r=[]}insert(e,t,r){this.#s=++this.#s;let n=this;const o=It(t),s=[];for(let i=0,a=o.length;i<a;i++){const c=o[i],u=o[i+1],l=Nt(c,u),d=Array.isArray(l)?l[0]:c;if(d in n.#e){n=n.#e[d],l&&s.push(l[1]);continue}n.#e[d]=new at,l&&(n.#r.push(l),s.push(l[1])),n=n.#e[d]}return n.#t.push({[e]:{handler:r,possibleKeys:s.filter((i,a,c)=>c.indexOf(i)===a),score:this.#s}}),n}#n(e,t,r,n){const o=[];for(let s=0,i=e.#t.length;s<i;s++){const a=e.#t[s],c=a[t]||a[b],u={};if(c!==void 0&&(c.params=Object.create(null),o.push(c),r!==B||n&&n!==B))for(let l=0,d=c.possibleKeys.length;l<d;l++){const f=c.possibleKeys[l],g=u[c.score];c.params[f]=n?.[f]&&!g?n[f]:r[f]??n?.[f],u[c.score]=!0}}return o}search(e,t){const r=[];this.#o=B;let o=[this];const s=Je(t),i=[];for(let a=0,c=s.length;a<c;a++){const u=s[a],l=a===c-1,d=[];for(let f=0,g=o.length;f<g;f++){const m=o[f],$=m.#e[u];$&&($.#o=m.#o,l?($.#e["*"]&&r.push(...this.#n($.#e["*"],e,m.#o)),r.push(...this.#n($,e,m.#o))):d.push($));for(let Z=0,A=m.#r.length;Z<A;Z++){const I=m.#r[Z],y=m.#o===B?{}:{...m.#o};if(I==="*"){const x=m.#e["*"];x&&(r.push(...this.#n(x,e,m.#o)),x.#o=y,d.push(x));continue}const[E,j,W]=I;if(!u&&!(W instanceof RegExp))continue;const P=m.#e[E],Ot=s.slice(a).join("/");if(W instanceof RegExp){const x=W.exec(Ot);if(x){if(y[j]=x[0],r.push(...this.#n(P,e,m.#o,y)),Object.keys(P.#e).length){P.#o=y;const Rt=x[0].match(/\//)?.length??0;(i[Rt]||=[]).push(P)}continue}}(W===!0||W.test(u))&&(y[j]=u,l?(r.push(...this.#n(P,e,y,m.#o)),P.#e["*"]&&r.push(...this.#n(P.#e["*"],e,y,m.#o))):(P.#o=y,d.push(P)))}}o=d.concat(i.shift()??[])}return r.length>1&&r.sort((a,c)=>a.score-c.score),[r.map(({handler:a,params:c})=>[a,c])]}},sr=class{name="TrieRouter";#t;constructor(){this.#t=new at}add(e,t,r){const n=Xe(t);if(n){for(let o=0,s=n.length;o<s;o++)this.#t.insert(e,n[o],r);return}this.#t.insert(e,t,r)}match(e,t){return this.#t.search(e,t)}},ir=class extends nt{constructor(e={}){super(e),this.router=e.router??new or({routers:[new nr,new sr]})}},ar=e=>{const r={...{origin:"*",allowMethods:["GET","HEAD","PUT","POST","DELETE","PATCH"],allowHeaders:[],exposeHeaders:[]},...e},n=(s=>typeof s=="string"?s==="*"?()=>s:i=>s===i?i:null:typeof s=="function"?s:i=>s.includes(i)?i:null)(r.origin),o=(s=>typeof s=="function"?s:Array.isArray(s)?()=>s:()=>[])(r.allowMethods);return async function(i,a){function c(l,d){i.res.headers.set(l,d)}const u=await n(i.req.header("origin")||"",i);if(u&&c("Access-Control-Allow-Origin",u),r.origin!=="*"){const l=i.req.header("Vary");l?c("Vary",l):c("Vary","Origin")}if(r.credentials&&c("Access-Control-Allow-Credentials","true"),r.exposeHeaders?.length&&c("Access-Control-Expose-Headers",r.exposeHeaders.join(",")),i.req.method==="OPTIONS"){r.maxAge!=null&&c("Access-Control-Max-Age",r.maxAge.toString());const l=await o(i.req.header("origin")||"",i);l.length&&c("Access-Control-Allow-Methods",l.join(","));let d=r.allowHeaders;if(!d?.length){const f=i.req.header("Access-Control-Request-Headers");f&&(d=f.split(/\s*,\s*/))}return d?.length&&(c("Access-Control-Allow-Headers",d.join(",")),i.res.headers.append("Vary","Access-Control-Request-Headers")),i.res.headers.delete("Content-Length"),i.res.headers.delete("Content-Type"),new Response(null,{headers:i.res.headers,status:204,statusText:"No Content"})}await a()}};function cr(){const{process:e,Deno:t}=globalThis;return!(typeof t?.noColor=="boolean"?t.noColor:e!==void 0?"NO_COLOR"in e?.env:!1)}async function ur(){const{navigator:e}=globalThis,t="cloudflare:workers";return!(e!==void 0&&e.userAgent==="Cloudflare-Workers"?await(async()=>{try{return"NO_COLOR"in((await import(t)).env??{})}catch{return!1}})():!cr())}var lr=e=>{const[t,r]=[",","."];return e.map(o=>o.replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1"+t)).join(r)},hr=e=>{const t=Date.now()-e;return lr([t<1e3?t+"ms":Math.round(t/1e3)+"s"])},dr=async e=>{if(await ur())switch(e/100|0){case 5:return`\x1B[31m${e}\x1B[0m`;case 4:return`\x1B[33m${e}\x1B[0m`;case 3:return`\x1B[36m${e}\x1B[0m`;case 2:return`\x1B[32m${e}\x1B[0m`}return`${e}`};async function je(e,t,r,n,o=0,s){const i=t==="<--"?`${t} ${r} ${n}`:`${t} ${r} ${n} ${await dr(o)} ${s}`;e(i)}var fr=(e=console.log)=>async function(r,n){const{method:o,url:s}=r.req,i=s.slice(s.indexOf("/",8));await je(e,"<--",o,i);const a=Date.now();await n(),await je(e,"-->",o,i,r.res.status,hr(a))};function h(e,t,r){function n(a,c){var u;Object.defineProperty(a,"_zod",{value:a._zod??{},enumerable:!1}),(u=a._zod).traits??(u.traits=new Set),a._zod.traits.add(e),t(a,c);for(const l in i.prototype)l in a||Object.defineProperty(a,l,{value:i.prototype[l].bind(a)});a._zod.constr=i,a._zod.def=c}const o=r?.Parent??Object;class s extends o{}Object.defineProperty(s,"name",{value:e});function i(a){var c;const u=r?.Parent?new s:this;n(u,a),(c=u._zod).deferred??(c.deferred=[]);for(const l of u._zod.deferred)l();return u}return Object.defineProperty(i,"init",{value:n}),Object.defineProperty(i,Symbol.hasInstance,{value:a=>r?.Parent&&a instanceof r.Parent?!0:a?._zod?.traits?.has(e)}),Object.defineProperty(i,"name",{value:e}),i}class q extends Error{constructor(){super("Encountered Promise during synchronous parse. Use .parseAsync() instead.")}}class ct extends Error{constructor(t){super(`Encountered unidirectional transform during encode: ${t}`),this.name="ZodEncodeError"}}const ut={};function T(e){return ut}function pr(e){const t=Object.values(e).filter(n=>typeof n=="number");return Object.entries(e).filter(([n,o])=>t.indexOf(+n)===-1).map(([n,o])=>o)}function ge(e,t){return typeof t=="bigint"?t.toString():t}function ye(e){return{get value(){{const t=e();return Object.defineProperty(this,"value",{value:t}),t}}}}function be(e){return e==null}function ze(e){const t=e.startsWith("^")?1:0,r=e.endsWith("$")?e.length-1:e.length;return e.slice(t,r)}const xe=Symbol("evaluating");function v(e,t,r){let n;Object.defineProperty(e,t,{get(){if(n!==xe)return n===void 0&&(n=xe,n=r()),n},set(o){Object.defineProperty(e,t,{value:o})},configurable:!0})}function N(e,t,r){Object.defineProperty(e,t,{value:r,writable:!0,enumerable:!0,configurable:!0})}function U(...e){const t={};for(const r of e){const n=Object.getOwnPropertyDescriptors(r);Object.assign(t,n)}return Object.defineProperties({},t)}function Se(e){return JSON.stringify(e)}const lt="captureStackTrace"in Error?Error.captureStackTrace:(...e)=>{};function se(e){return typeof e=="object"&&e!==null&&!Array.isArray(e)}const mr=ye(()=>{if(typeof navigator<"u"&&navigator?.userAgent?.includes("Cloudflare"))return!1;try{const e=Function;return new e(""),!0}catch{return!1}});function J(e){if(se(e)===!1)return!1;const t=e.constructor;if(t===void 0)return!0;const r=t.prototype;return!(se(r)===!1||Object.prototype.hasOwnProperty.call(r,"isPrototypeOf")===!1)}function ht(e){return J(e)?{...e}:Array.isArray(e)?[...e]:e}const gr=new Set(["string","number","symbol"]);function ue(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function S(e,t,r){const n=new e._zod.constr(t??e._zod.def);return(!t||r?.parent)&&(n._zod.parent=e),n}function p(e){const t=e;if(!t)return{};if(typeof t=="string")return{error:()=>t};if(t?.message!==void 0){if(t?.error!==void 0)throw new Error("Cannot specify both `message` and `error` params");t.error=t.message}return delete t.message,typeof t.error=="string"?{...t,error:()=>t.error}:t}function vr(e){return Object.keys(e).filter(t=>e[t]._zod.optin==="optional"&&e[t]._zod.optout==="optional")}function _r(e,t){const r=e._zod.def,n=U(e._zod.def,{get shape(){const o={};for(const s in t){if(!(s in r.shape))throw new Error(`Unrecognized key: "${s}"`);t[s]&&(o[s]=r.shape[s])}return N(this,"shape",o),o},checks:[]});return S(e,n)}function wr(e,t){const r=e._zod.def,n=U(e._zod.def,{get shape(){const o={...e._zod.def.shape};for(const s in t){if(!(s in r.shape))throw new Error(`Unrecognized key: "${s}"`);t[s]&&delete o[s]}return N(this,"shape",o),o},checks:[]});return S(e,n)}function yr(e,t){if(!J(t))throw new Error("Invalid input to extend: expected a plain object");const r=e._zod.def.checks;if(r&&r.length>0)throw new Error("Object schemas containing refinements cannot be extended. Use `.safeExtend()` instead.");const o=U(e._zod.def,{get shape(){const s={...e._zod.def.shape,...t};return N(this,"shape",s),s},checks:[]});return S(e,o)}function br(e,t){if(!J(t))throw new Error("Invalid input to safeExtend: expected a plain object");const r={...e._zod.def,get shape(){const n={...e._zod.def.shape,...t};return N(this,"shape",n),n},checks:e._zod.def.checks};return S(e,r)}function zr(e,t){const r=U(e._zod.def,{get shape(){const n={...e._zod.def.shape,...t._zod.def.shape};return N(this,"shape",n),n},get catchall(){return t._zod.def.catchall},checks:[]});return S(e,r)}function $r(e,t,r){const n=U(t._zod.def,{get shape(){const o=t._zod.def.shape,s={...o};if(r)for(const i in r){if(!(i in o))throw new Error(`Unrecognized key: "${i}"`);r[i]&&(s[i]=e?new e({type:"optional",innerType:o[i]}):o[i])}else for(const i in o)s[i]=e?new e({type:"optional",innerType:o[i]}):o[i];return N(this,"shape",s),s},checks:[]});return S(t,n)}function kr(e,t,r){const n=U(t._zod.def,{get shape(){const o=t._zod.def.shape,s={...o};if(r)for(const i in r){if(!(i in s))throw new Error(`Unrecognized key: "${i}"`);r[i]&&(s[i]=new e({type:"nonoptional",innerType:o[i]}))}else for(const i in o)s[i]=new e({type:"nonoptional",innerType:o[i]});return N(this,"shape",s),s},checks:[]});return S(t,n)}function M(e,t=0){if(e.aborted===!0)return!0;for(let r=t;r<e.issues.length;r++)if(e.issues[r]?.continue!==!0)return!0;return!1}function dt(e,t){return t.map(r=>{var n;return(n=r).path??(n.path=[]),r.path.unshift(e),r})}function Q(e){return typeof e=="string"?e:e?.message}function D(e,t,r){const n={...e,path:e.path??[]};if(!e.message){const o=Q(e.inst?._zod.def?.error?.(e))??Q(t?.error?.(e))??Q(r.customError?.(e))??Q(r.localeError?.(e))??"Invalid input";n.message=o}return delete n.inst,delete n.continue,t?.reportInput||delete n.input,n}function $e(e){return Array.isArray(e)?"array":typeof e=="string"?"string":"unknown"}function G(...e){const[t,r,n]=e;return typeof t=="string"?{message:t,code:"custom",input:r,inst:n}:{...t}}const ft=(e,t)=>{e.name="$ZodError",Object.defineProperty(e,"_zod",{value:e._zod,enumerable:!1}),Object.defineProperty(e,"issues",{value:t,enumerable:!1}),e.message=JSON.stringify(t,ge,2),Object.defineProperty(e,"toString",{value:()=>e.message,enumerable:!1})},pt=h("$ZodError",ft),mt=h("$ZodError",ft,{Parent:Error});function Zr(e,t=r=>r.message){const r={},n=[];for(const o of e.issues)o.path.length>0?(r[o.path[0]]=r[o.path[0]]||[],r[o.path[0]].push(t(o))):n.push(t(o));return{formErrors:n,fieldErrors:r}}function Er(e,t=r=>r.message){const r={_errors:[]},n=o=>{for(const s of o.issues)if(s.code==="invalid_union"&&s.errors.length)s.errors.map(i=>n({issues:i}));else if(s.code==="invalid_key")n({issues:s.issues});else if(s.code==="invalid_element")n({issues:s.issues});else if(s.path.length===0)r._errors.push(t(s));else{let i=r,a=0;for(;a<s.path.length;){const c=s.path[a];a===s.path.length-1?(i[c]=i[c]||{_errors:[]},i[c]._errors.push(t(s))):i[c]=i[c]||{_errors:[]},i=i[c],a++}}};return n(e),r}const ke=e=>(t,r,n,o)=>{const s=n?Object.assign(n,{async:!1}):{async:!1},i=t._zod.run({value:r,issues:[]},s);if(i instanceof Promise)throw new q;if(i.issues.length){const a=new(o?.Err??e)(i.issues.map(c=>D(c,s,T())));throw lt(a,o?.callee),a}return i.value},Ze=e=>async(t,r,n,o)=>{const s=n?Object.assign(n,{async:!0}):{async:!0};let i=t._zod.run({value:r,issues:[]},s);if(i instanceof Promise&&(i=await i),i.issues.length){const a=new(o?.Err??e)(i.issues.map(c=>D(c,s,T())));throw lt(a,o?.callee),a}return i.value},le=e=>(t,r,n)=>{const o=n?{...n,async:!1}:{async:!1},s=t._zod.run({value:r,issues:[]},o);if(s instanceof Promise)throw new q;return s.issues.length?{success:!1,error:new(e??pt)(s.issues.map(i=>D(i,o,T())))}:{success:!0,data:s.value}},Or=le(mt),he=e=>async(t,r,n)=>{const o=n?Object.assign(n,{async:!0}):{async:!0};let s=t._zod.run({value:r,issues:[]},o);return s instanceof Promise&&(s=await s),s.issues.length?{success:!1,error:new e(s.issues.map(i=>D(i,o,T())))}:{success:!0,data:s.value}},Rr=he(mt),Pr=e=>(t,r,n)=>{const o=n?Object.assign(n,{direction:"backward"}):{direction:"backward"};return ke(e)(t,r,o)},Ar=e=>(t,r,n)=>ke(e)(t,r,n),jr=e=>async(t,r,n)=>{const o=n?Object.assign(n,{direction:"backward"}):{direction:"backward"};return Ze(e)(t,r,o)},xr=e=>async(t,r,n)=>Ze(e)(t,r,n),Sr=e=>(t,r,n)=>{const o=n?Object.assign(n,{direction:"backward"}):{direction:"backward"};return le(e)(t,r,o)},Cr=e=>(t,r,n)=>le(e)(t,r,n),Ir=e=>async(t,r,n)=>{const o=n?Object.assign(n,{direction:"backward"}):{direction:"backward"};return he(e)(t,r,o)},Tr=e=>async(t,r,n)=>he(e)(t,r,n),Dr=/^[cC][^\s-]{8,}$/,Nr=/^[0-9a-z]+$/,Ur=/^[0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{26}$/,Fr=/^[0-9a-vA-V]{20}$/,Lr=/^[A-Za-z0-9]{27}$/,Hr=/^[a-zA-Z0-9_-]{21}$/,Mr=/^P(?:(\d+W)|(?!.*W)(?=\d|T\d)(\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+([.,]\d+)?S)?)?)$/,qr=/^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$/,Ce=e=>e?new RegExp(`^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-${e}[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12})$`):/^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/,Wr=/^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$/,Br="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";function Vr(){return new RegExp(Br,"u")}const Kr=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,Jr=/^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$/,Gr=/^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/([0-9]|[1-2][0-9]|3[0-2])$/,Xr=/^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,Yr=/^$|^(?:[0-9a-zA-Z+/]{4})*(?:(?:[0-9a-zA-Z+/]{2}==)|(?:[0-9a-zA-Z+/]{3}=))?$/,gt=/^[A-Za-z0-9_-]*$/,Qr=/^(?=.{1,253}\.?$)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[-0-9a-zA-Z]{0,61}[0-9a-zA-Z])?)*\.?$/,en=/^\+(?:[0-9]){6,14}[0-9]$/,vt="(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))",tn=new RegExp(`^${vt}$`);function _t(e){const t="(?:[01]\\d|2[0-3]):[0-5]\\d";return typeof e.precision=="number"?e.precision===-1?`${t}`:e.precision===0?`${t}:[0-5]\\d`:`${t}:[0-5]\\d\\.\\d{${e.precision}}`:`${t}(?::[0-5]\\d(?:\\.\\d+)?)?`}function rn(e){return new RegExp(`^${_t(e)}$`)}function nn(e){const t=_t({precision:e.precision}),r=["Z"];e.local&&r.push(""),e.offset&&r.push("([+-](?:[01]\\d|2[0-3]):[0-5]\\d)");const n=`${t}(?:${r.join("|")})`;return new RegExp(`^${vt}T(?:${n})$`)}const on=e=>{const t=e?`[\\s\\S]{${e?.minimum??0},${e?.maximum??""}}`:"[\\s\\S]*";return new RegExp(`^${t}$`)},sn=/^[^A-Z]*$/,an=/^[^a-z]*$/,R=h("$ZodCheck",(e,t)=>{var r;e._zod??(e._zod={}),e._zod.def=t,(r=e._zod).onattach??(r.onattach=[])}),cn=h("$ZodCheckMaxLength",(e,t)=>{var r;R.init(e,t),(r=e._zod.def).when??(r.when=n=>{const o=n.value;return!be(o)&&o.length!==void 0}),e._zod.onattach.push(n=>{const o=n._zod.bag.maximum??Number.POSITIVE_INFINITY;t.maximum<o&&(n._zod.bag.maximum=t.maximum)}),e._zod.check=n=>{const o=n.value;if(o.length<=t.maximum)return;const i=$e(o);n.issues.push({origin:i,code:"too_big",maximum:t.maximum,inclusive:!0,input:o,inst:e,continue:!t.abort})}}),un=h("$ZodCheckMinLength",(e,t)=>{var r;R.init(e,t),(r=e._zod.def).when??(r.when=n=>{const o=n.value;return!be(o)&&o.length!==void 0}),e._zod.onattach.push(n=>{const o=n._zod.bag.minimum??Number.NEGATIVE_INFINITY;t.minimum>o&&(n._zod.bag.minimum=t.minimum)}),e._zod.check=n=>{const o=n.value;if(o.length>=t.minimum)return;const i=$e(o);n.issues.push({origin:i,code:"too_small",minimum:t.minimum,inclusive:!0,input:o,inst:e,continue:!t.abort})}}),ln=h("$ZodCheckLengthEquals",(e,t)=>{var r;R.init(e,t),(r=e._zod.def).when??(r.when=n=>{const o=n.value;return!be(o)&&o.length!==void 0}),e._zod.onattach.push(n=>{const o=n._zod.bag;o.minimum=t.length,o.maximum=t.length,o.length=t.length}),e._zod.check=n=>{const o=n.value,s=o.length;if(s===t.length)return;const i=$e(o),a=s>t.length;n.issues.push({origin:i,...a?{code:"too_big",maximum:t.length}:{code:"too_small",minimum:t.length},inclusive:!0,exact:!0,input:n.value,inst:e,continue:!t.abort})}}),de=h("$ZodCheckStringFormat",(e,t)=>{var r,n;R.init(e,t),e._zod.onattach.push(o=>{const s=o._zod.bag;s.format=t.format,t.pattern&&(s.patterns??(s.patterns=new Set),s.patterns.add(t.pattern))}),t.pattern?(r=e._zod).check??(r.check=o=>{t.pattern.lastIndex=0,!t.pattern.test(o.value)&&o.issues.push({origin:"string",code:"invalid_format",format:t.format,input:o.value,...t.pattern?{pattern:t.pattern.toString()}:{},inst:e,continue:!t.abort})}):(n=e._zod).check??(n.check=()=>{})}),hn=h("$ZodCheckRegex",(e,t)=>{de.init(e,t),e._zod.check=r=>{t.pattern.lastIndex=0,!t.pattern.test(r.value)&&r.issues.push({origin:"string",code:"invalid_format",format:"regex",input:r.value,pattern:t.pattern.toString(),inst:e,continue:!t.abort})}}),dn=h("$ZodCheckLowerCase",(e,t)=>{t.pattern??(t.pattern=sn),de.init(e,t)}),fn=h("$ZodCheckUpperCase",(e,t)=>{t.pattern??(t.pattern=an),de.init(e,t)}),pn=h("$ZodCheckIncludes",(e,t)=>{R.init(e,t);const r=ue(t.includes),n=new RegExp(typeof t.position=="number"?`^.{${t.position}}${r}`:r);t.pattern=n,e._zod.onattach.push(o=>{const s=o._zod.bag;s.patterns??(s.patterns=new Set),s.patterns.add(n)}),e._zod.check=o=>{o.value.includes(t.includes,t.position)||o.issues.push({origin:"string",code:"invalid_format",format:"includes",includes:t.includes,input:o.value,inst:e,continue:!t.abort})}}),mn=h("$ZodCheckStartsWith",(e,t)=>{R.init(e,t);const r=new RegExp(`^${ue(t.prefix)}.*`);t.pattern??(t.pattern=r),e._zod.onattach.push(n=>{const o=n._zod.bag;o.patterns??(o.patterns=new Set),o.patterns.add(r)}),e._zod.check=n=>{n.value.startsWith(t.prefix)||n.issues.push({origin:"string",code:"invalid_format",format:"starts_with",prefix:t.prefix,input:n.value,inst:e,continue:!t.abort})}}),gn=h("$ZodCheckEndsWith",(e,t)=>{R.init(e,t);const r=new RegExp(`.*${ue(t.suffix)}$`);t.pattern??(t.pattern=r),e._zod.onattach.push(n=>{const o=n._zod.bag;o.patterns??(o.patterns=new Set),o.patterns.add(r)}),e._zod.check=n=>{n.value.endsWith(t.suffix)||n.issues.push({origin:"string",code:"invalid_format",format:"ends_with",suffix:t.suffix,input:n.value,inst:e,continue:!t.abort})}}),vn=h("$ZodCheckOverwrite",(e,t)=>{R.init(e,t),e._zod.check=r=>{r.value=t.tx(r.value)}});class _n{constructor(t=[]){this.content=[],this.indent=0,this&&(this.args=t)}indented(t){this.indent+=1,t(this),this.indent-=1}write(t){if(typeof t=="function"){t(this,{execution:"sync"}),t(this,{execution:"async"});return}const n=t.split(`
`).filter(i=>i),o=Math.min(...n.map(i=>i.length-i.trimStart().length)),s=n.map(i=>i.slice(o)).map(i=>" ".repeat(this.indent*2)+i);for(const i of s)this.content.push(i)}compile(){const t=Function,r=this?.args,o=[...(this?.content??[""]).map(s=>`  ${s}`)];return new t(...r,o.join(`
`))}}const wn={major:4,minor:1,patch:12},z=h("$ZodType",(e,t)=>{var r;e??(e={}),e._zod.def=t,e._zod.bag=e._zod.bag||{},e._zod.version=wn;const n=[...e._zod.def.checks??[]];e._zod.traits.has("$ZodCheck")&&n.unshift(e);for(const o of n)for(const s of o._zod.onattach)s(e);if(n.length===0)(r=e._zod).deferred??(r.deferred=[]),e._zod.deferred?.push(()=>{e._zod.run=e._zod.parse});else{const o=(i,a,c)=>{let u=M(i),l;for(const d of a){if(d._zod.def.when){if(!d._zod.def.when(i))continue}else if(u)continue;const f=i.issues.length,g=d._zod.check(i);if(g instanceof Promise&&c?.async===!1)throw new q;if(l||g instanceof Promise)l=(l??Promise.resolve()).then(async()=>{await g,i.issues.length!==f&&(u||(u=M(i,f)))});else{if(i.issues.length===f)continue;u||(u=M(i,f))}}return l?l.then(()=>i):i},s=(i,a,c)=>{if(M(i))return i.aborted=!0,i;const u=o(a,n,c);if(u instanceof Promise){if(c.async===!1)throw new q;return u.then(l=>e._zod.parse(l,c))}return e._zod.parse(u,c)};e._zod.run=(i,a)=>{if(a.skipChecks)return e._zod.parse(i,a);if(a.direction==="backward"){const u=e._zod.parse({value:i.value,issues:[]},{...a,skipChecks:!0});return u instanceof Promise?u.then(l=>s(l,i,a)):s(u,i,a)}const c=e._zod.parse(i,a);if(c instanceof Promise){if(a.async===!1)throw new q;return c.then(u=>o(u,n,a))}return o(c,n,a)}}e["~standard"]={validate:o=>{try{const s=Or(e,o);return s.success?{value:s.data}:{issues:s.error?.issues}}catch{return Rr(e,o).then(i=>i.success?{value:i.data}:{issues:i.error?.issues})}},vendor:"zod",version:1}}),Ee=h("$ZodString",(e,t)=>{z.init(e,t),e._zod.pattern=[...e?._zod.bag?.patterns??[]].pop()??on(e._zod.bag),e._zod.parse=(r,n)=>{if(t.coerce)try{r.value=String(r.value)}catch{}return typeof r.value=="string"||r.issues.push({expected:"string",code:"invalid_type",input:r.value,inst:e}),r}}),_=h("$ZodStringFormat",(e,t)=>{de.init(e,t),Ee.init(e,t)}),yn=h("$ZodGUID",(e,t)=>{t.pattern??(t.pattern=qr),_.init(e,t)}),bn=h("$ZodUUID",(e,t)=>{if(t.version){const n={v1:1,v2:2,v3:3,v4:4,v5:5,v6:6,v7:7,v8:8}[t.version];if(n===void 0)throw new Error(`Invalid UUID version: "${t.version}"`);t.pattern??(t.pattern=Ce(n))}else t.pattern??(t.pattern=Ce());_.init(e,t)}),zn=h("$ZodEmail",(e,t)=>{t.pattern??(t.pattern=Wr),_.init(e,t)}),$n=h("$ZodURL",(e,t)=>{_.init(e,t),e._zod.check=r=>{try{const n=r.value.trim(),o=new URL(n);t.hostname&&(t.hostname.lastIndex=0,t.hostname.test(o.hostname)||r.issues.push({code:"invalid_format",format:"url",note:"Invalid hostname",pattern:Qr.source,input:r.value,inst:e,continue:!t.abort})),t.protocol&&(t.protocol.lastIndex=0,t.protocol.test(o.protocol.endsWith(":")?o.protocol.slice(0,-1):o.protocol)||r.issues.push({code:"invalid_format",format:"url",note:"Invalid protocol",pattern:t.protocol.source,input:r.value,inst:e,continue:!t.abort})),t.normalize?r.value=o.href:r.value=n;return}catch{r.issues.push({code:"invalid_format",format:"url",input:r.value,inst:e,continue:!t.abort})}}}),kn=h("$ZodEmoji",(e,t)=>{t.pattern??(t.pattern=Vr()),_.init(e,t)}),Zn=h("$ZodNanoID",(e,t)=>{t.pattern??(t.pattern=Hr),_.init(e,t)}),En=h("$ZodCUID",(e,t)=>{t.pattern??(t.pattern=Dr),_.init(e,t)}),On=h("$ZodCUID2",(e,t)=>{t.pattern??(t.pattern=Nr),_.init(e,t)}),Rn=h("$ZodULID",(e,t)=>{t.pattern??(t.pattern=Ur),_.init(e,t)}),Pn=h("$ZodXID",(e,t)=>{t.pattern??(t.pattern=Fr),_.init(e,t)}),An=h("$ZodKSUID",(e,t)=>{t.pattern??(t.pattern=Lr),_.init(e,t)}),jn=h("$ZodISODateTime",(e,t)=>{t.pattern??(t.pattern=nn(t)),_.init(e,t)}),xn=h("$ZodISODate",(e,t)=>{t.pattern??(t.pattern=tn),_.init(e,t)}),Sn=h("$ZodISOTime",(e,t)=>{t.pattern??(t.pattern=rn(t)),_.init(e,t)}),Cn=h("$ZodISODuration",(e,t)=>{t.pattern??(t.pattern=Mr),_.init(e,t)}),In=h("$ZodIPv4",(e,t)=>{t.pattern??(t.pattern=Kr),_.init(e,t),e._zod.onattach.push(r=>{const n=r._zod.bag;n.format="ipv4"})}),Tn=h("$ZodIPv6",(e,t)=>{t.pattern??(t.pattern=Jr),_.init(e,t),e._zod.onattach.push(r=>{const n=r._zod.bag;n.format="ipv6"}),e._zod.check=r=>{try{new URL(`http://[${r.value}]`)}catch{r.issues.push({code:"invalid_format",format:"ipv6",input:r.value,inst:e,continue:!t.abort})}}}),Dn=h("$ZodCIDRv4",(e,t)=>{t.pattern??(t.pattern=Gr),_.init(e,t)}),Nn=h("$ZodCIDRv6",(e,t)=>{t.pattern??(t.pattern=Xr),_.init(e,t),e._zod.check=r=>{const n=r.value.split("/");try{if(n.length!==2)throw new Error;const[o,s]=n;if(!s)throw new Error;const i=Number(s);if(`${i}`!==s)throw new Error;if(i<0||i>128)throw new Error;new URL(`http://[${o}]`)}catch{r.issues.push({code:"invalid_format",format:"cidrv6",input:r.value,inst:e,continue:!t.abort})}}});function wt(e){if(e==="")return!0;if(e.length%4!==0)return!1;try{return atob(e),!0}catch{return!1}}const Un=h("$ZodBase64",(e,t)=>{t.pattern??(t.pattern=Yr),_.init(e,t),e._zod.onattach.push(r=>{r._zod.bag.contentEncoding="base64"}),e._zod.check=r=>{wt(r.value)||r.issues.push({code:"invalid_format",format:"base64",input:r.value,inst:e,continue:!t.abort})}});function Fn(e){if(!gt.test(e))return!1;const t=e.replace(/[-_]/g,n=>n==="-"?"+":"/"),r=t.padEnd(Math.ceil(t.length/4)*4,"=");return wt(r)}const Ln=h("$ZodBase64URL",(e,t)=>{t.pattern??(t.pattern=gt),_.init(e,t),e._zod.onattach.push(r=>{r._zod.bag.contentEncoding="base64url"}),e._zod.check=r=>{Fn(r.value)||r.issues.push({code:"invalid_format",format:"base64url",input:r.value,inst:e,continue:!t.abort})}}),Hn=h("$ZodE164",(e,t)=>{t.pattern??(t.pattern=en),_.init(e,t)});function Mn(e,t=null){try{const r=e.split(".");if(r.length!==3)return!1;const[n]=r;if(!n)return!1;const o=JSON.parse(atob(n));return!("typ"in o&&o?.typ!=="JWT"||!o.alg||t&&(!("alg"in o)||o.alg!==t))}catch{return!1}}const qn=h("$ZodJWT",(e,t)=>{_.init(e,t),e._zod.check=r=>{Mn(r.value,t.alg)||r.issues.push({code:"invalid_format",format:"jwt",input:r.value,inst:e,continue:!t.abort})}}),Wn=h("$ZodUnknown",(e,t)=>{z.init(e,t),e._zod.parse=r=>r}),Bn=h("$ZodNever",(e,t)=>{z.init(e,t),e._zod.parse=(r,n)=>(r.issues.push({expected:"never",code:"invalid_type",input:r.value,inst:e}),r)});function Ie(e,t,r){e.issues.length&&t.issues.push(...dt(r,e.issues)),t.value[r]=e.value}const Vn=h("$ZodArray",(e,t)=>{z.init(e,t),e._zod.parse=(r,n)=>{const o=r.value;if(!Array.isArray(o))return r.issues.push({expected:"array",code:"invalid_type",input:o,inst:e}),r;r.value=Array(o.length);const s=[];for(let i=0;i<o.length;i++){const a=o[i],c=t.element._zod.run({value:a,issues:[]},n);c instanceof Promise?s.push(c.then(u=>Ie(u,r,i))):Ie(c,r,i)}return s.length?Promise.all(s).then(()=>r):r}});function ie(e,t,r,n){e.issues.length&&t.issues.push(...dt(r,e.issues)),e.value===void 0?r in n&&(t.value[r]=void 0):t.value[r]=e.value}function yt(e){const t=Object.keys(e.shape);for(const n of t)if(!e.shape?.[n]?._zod?.traits?.has("$ZodType"))throw new Error(`Invalid element at key "${n}": expected a Zod schema`);const r=vr(e.shape);return{...e,keys:t,keySet:new Set(t),numKeys:t.length,optionalKeys:new Set(r)}}function bt(e,t,r,n,o,s){const i=[],a=o.keySet,c=o.catchall._zod,u=c.def.type;for(const l of Object.keys(t)){if(a.has(l))continue;if(u==="never"){i.push(l);continue}const d=c.run({value:t[l],issues:[]},n);d instanceof Promise?e.push(d.then(f=>ie(f,r,l,t))):ie(d,r,l,t)}return i.length&&r.issues.push({code:"unrecognized_keys",keys:i,input:t,inst:s}),e.length?Promise.all(e).then(()=>r):r}const Kn=h("$ZodObject",(e,t)=>{if(z.init(e,t),!Object.getOwnPropertyDescriptor(t,"shape")?.get){const a=t.shape;Object.defineProperty(t,"shape",{get:()=>{const c={...a};return Object.defineProperty(t,"shape",{value:c}),c}})}const n=ye(()=>yt(t));v(e._zod,"propValues",()=>{const a=t.shape,c={};for(const u in a){const l=a[u]._zod;if(l.values){c[u]??(c[u]=new Set);for(const d of l.values)c[u].add(d)}}return c});const o=se,s=t.catchall;let i;e._zod.parse=(a,c)=>{i??(i=n.value);const u=a.value;if(!o(u))return a.issues.push({expected:"object",code:"invalid_type",input:u,inst:e}),a;a.value={};const l=[],d=i.shape;for(const f of i.keys){const m=d[f]._zod.run({value:u[f],issues:[]},c);m instanceof Promise?l.push(m.then($=>ie($,a,f,u))):ie(m,a,f,u)}return s?bt(l,u,a,c,n.value,e):l.length?Promise.all(l).then(()=>a):a}}),Jn=h("$ZodObjectJIT",(e,t)=>{Kn.init(e,t);const r=e._zod.parse,n=ye(()=>yt(t)),o=f=>{const g=new _n(["shape","payload","ctx"]),m=n.value,$=y=>{const E=Se(y);return`shape[${E}]._zod.run({ value: input[${E}], issues: [] }, ctx)`};g.write("const input = payload.value;");const Z=Object.create(null);let A=0;for(const y of m.keys)Z[y]=`key_${A++}`;g.write("const newResult = {};");for(const y of m.keys){const E=Z[y],j=Se(y);g.write(`const ${E} = ${$(y)};`),g.write(`
        if (${E}.issues.length) {
          payload.issues = payload.issues.concat(${E}.issues.map(iss => ({
            ...iss,
            path: iss.path ? [${j}, ...iss.path] : [${j}]
          })));
        }
        
        
        if (${E}.value === undefined) {
          if (${j} in input) {
            newResult[${j}] = undefined;
          }
        } else {
          newResult[${j}] = ${E}.value;
        }
        
      `)}g.write("payload.value = newResult;"),g.write("return payload;");const I=g.compile();return(y,E)=>I(f,y,E)};let s;const i=se,a=!ut.jitless,u=a&&mr.value,l=t.catchall;let d;e._zod.parse=(f,g)=>{d??(d=n.value);const m=f.value;return i(m)?a&&u&&g?.async===!1&&g.jitless!==!0?(s||(s=o(t.shape)),f=s(f,g),l?bt([],m,f,g,d,e):f):r(f,g):(f.issues.push({expected:"object",code:"invalid_type",input:m,inst:e}),f)}});function Te(e,t,r,n){for(const s of e)if(s.issues.length===0)return t.value=s.value,t;const o=e.filter(s=>!M(s));return o.length===1?(t.value=o[0].value,o[0]):(t.issues.push({code:"invalid_union",input:t.value,inst:r,errors:e.map(s=>s.issues.map(i=>D(i,n,T())))}),t)}const Gn=h("$ZodUnion",(e,t)=>{z.init(e,t),v(e._zod,"optin",()=>t.options.some(o=>o._zod.optin==="optional")?"optional":void 0),v(e._zod,"optout",()=>t.options.some(o=>o._zod.optout==="optional")?"optional":void 0),v(e._zod,"values",()=>{if(t.options.every(o=>o._zod.values))return new Set(t.options.flatMap(o=>Array.from(o._zod.values)))}),v(e._zod,"pattern",()=>{if(t.options.every(o=>o._zod.pattern)){const o=t.options.map(s=>s._zod.pattern);return new RegExp(`^(${o.map(s=>ze(s.source)).join("|")})$`)}});const r=t.options.length===1,n=t.options[0]._zod.run;e._zod.parse=(o,s)=>{if(r)return n(o,s);let i=!1;const a=[];for(const c of t.options){const u=c._zod.run({value:o.value,issues:[]},s);if(u instanceof Promise)a.push(u),i=!0;else{if(u.issues.length===0)return u;a.push(u)}}return i?Promise.all(a).then(c=>Te(c,o,e,s)):Te(a,o,e,s)}}),Xn=h("$ZodIntersection",(e,t)=>{z.init(e,t),e._zod.parse=(r,n)=>{const o=r.value,s=t.left._zod.run({value:o,issues:[]},n),i=t.right._zod.run({value:o,issues:[]},n);return s instanceof Promise||i instanceof Promise?Promise.all([s,i]).then(([c,u])=>De(r,c,u)):De(r,s,i)}});function ve(e,t){if(e===t)return{valid:!0,data:e};if(e instanceof Date&&t instanceof Date&&+e==+t)return{valid:!0,data:e};if(J(e)&&J(t)){const r=Object.keys(t),n=Object.keys(e).filter(s=>r.indexOf(s)!==-1),o={...e,...t};for(const s of n){const i=ve(e[s],t[s]);if(!i.valid)return{valid:!1,mergeErrorPath:[s,...i.mergeErrorPath]};o[s]=i.data}return{valid:!0,data:o}}if(Array.isArray(e)&&Array.isArray(t)){if(e.length!==t.length)return{valid:!1,mergeErrorPath:[]};const r=[];for(let n=0;n<e.length;n++){const o=e[n],s=t[n],i=ve(o,s);if(!i.valid)return{valid:!1,mergeErrorPath:[n,...i.mergeErrorPath]};r.push(i.data)}return{valid:!0,data:r}}return{valid:!1,mergeErrorPath:[]}}function De(e,t,r){if(t.issues.length&&e.issues.push(...t.issues),r.issues.length&&e.issues.push(...r.issues),M(e))return e;const n=ve(t.value,r.value);if(!n.valid)throw new Error(`Unmergable intersection. Error path: ${JSON.stringify(n.mergeErrorPath)}`);return e.value=n.data,e}const Yn=h("$ZodEnum",(e,t)=>{z.init(e,t);const r=pr(t.entries),n=new Set(r);e._zod.values=n,e._zod.pattern=new RegExp(`^(${r.filter(o=>gr.has(typeof o)).map(o=>typeof o=="string"?ue(o):o.toString()).join("|")})$`),e._zod.parse=(o,s)=>{const i=o.value;return n.has(i)||o.issues.push({code:"invalid_value",values:r,input:i,inst:e}),o}}),Qn=h("$ZodTransform",(e,t)=>{z.init(e,t),e._zod.parse=(r,n)=>{if(n.direction==="backward")throw new ct(e.constructor.name);const o=t.transform(r.value,r);if(n.async)return(o instanceof Promise?o:Promise.resolve(o)).then(i=>(r.value=i,r));if(o instanceof Promise)throw new q;return r.value=o,r}});function Ne(e,t){return e.issues.length&&t===void 0?{issues:[],value:void 0}:e}const eo=h("$ZodOptional",(e,t)=>{z.init(e,t),e._zod.optin="optional",e._zod.optout="optional",v(e._zod,"values",()=>t.innerType._zod.values?new Set([...t.innerType._zod.values,void 0]):void 0),v(e._zod,"pattern",()=>{const r=t.innerType._zod.pattern;return r?new RegExp(`^(${ze(r.source)})?$`):void 0}),e._zod.parse=(r,n)=>{if(t.innerType._zod.optin==="optional"){const o=t.innerType._zod.run(r,n);return o instanceof Promise?o.then(s=>Ne(s,r.value)):Ne(o,r.value)}return r.value===void 0?r:t.innerType._zod.run(r,n)}}),to=h("$ZodNullable",(e,t)=>{z.init(e,t),v(e._zod,"optin",()=>t.innerType._zod.optin),v(e._zod,"optout",()=>t.innerType._zod.optout),v(e._zod,"pattern",()=>{const r=t.innerType._zod.pattern;return r?new RegExp(`^(${ze(r.source)}|null)$`):void 0}),v(e._zod,"values",()=>t.innerType._zod.values?new Set([...t.innerType._zod.values,null]):void 0),e._zod.parse=(r,n)=>r.value===null?r:t.innerType._zod.run(r,n)}),ro=h("$ZodDefault",(e,t)=>{z.init(e,t),e._zod.optin="optional",v(e._zod,"values",()=>t.innerType._zod.values),e._zod.parse=(r,n)=>{if(n.direction==="backward")return t.innerType._zod.run(r,n);if(r.value===void 0)return r.value=t.defaultValue,r;const o=t.innerType._zod.run(r,n);return o instanceof Promise?o.then(s=>Ue(s,t)):Ue(o,t)}});function Ue(e,t){return e.value===void 0&&(e.value=t.defaultValue),e}const no=h("$ZodPrefault",(e,t)=>{z.init(e,t),e._zod.optin="optional",v(e._zod,"values",()=>t.innerType._zod.values),e._zod.parse=(r,n)=>(n.direction==="backward"||r.value===void 0&&(r.value=t.defaultValue),t.innerType._zod.run(r,n))}),oo=h("$ZodNonOptional",(e,t)=>{z.init(e,t),v(e._zod,"values",()=>{const r=t.innerType._zod.values;return r?new Set([...r].filter(n=>n!==void 0)):void 0}),e._zod.parse=(r,n)=>{const o=t.innerType._zod.run(r,n);return o instanceof Promise?o.then(s=>Fe(s,e)):Fe(o,e)}});function Fe(e,t){return!e.issues.length&&e.value===void 0&&e.issues.push({code:"invalid_type",expected:"nonoptional",input:e.value,inst:t}),e}const so=h("$ZodCatch",(e,t)=>{z.init(e,t),v(e._zod,"optin",()=>t.innerType._zod.optin),v(e._zod,"optout",()=>t.innerType._zod.optout),v(e._zod,"values",()=>t.innerType._zod.values),e._zod.parse=(r,n)=>{if(n.direction==="backward")return t.innerType._zod.run(r,n);const o=t.innerType._zod.run(r,n);return o instanceof Promise?o.then(s=>(r.value=s.value,s.issues.length&&(r.value=t.catchValue({...r,error:{issues:s.issues.map(i=>D(i,n,T()))},input:r.value}),r.issues=[]),r)):(r.value=o.value,o.issues.length&&(r.value=t.catchValue({...r,error:{issues:o.issues.map(s=>D(s,n,T()))},input:r.value}),r.issues=[]),r)}}),io=h("$ZodPipe",(e,t)=>{z.init(e,t),v(e._zod,"values",()=>t.in._zod.values),v(e._zod,"optin",()=>t.in._zod.optin),v(e._zod,"optout",()=>t.out._zod.optout),v(e._zod,"propValues",()=>t.in._zod.propValues),e._zod.parse=(r,n)=>{if(n.direction==="backward"){const s=t.out._zod.run(r,n);return s instanceof Promise?s.then(i=>ee(i,t.in,n)):ee(s,t.in,n)}const o=t.in._zod.run(r,n);return o instanceof Promise?o.then(s=>ee(s,t.out,n)):ee(o,t.out,n)}});function ee(e,t,r){return e.issues.length?(e.aborted=!0,e):t._zod.run({value:e.value,issues:e.issues},r)}const ao=h("$ZodReadonly",(e,t)=>{z.init(e,t),v(e._zod,"propValues",()=>t.innerType._zod.propValues),v(e._zod,"values",()=>t.innerType._zod.values),v(e._zod,"optin",()=>t.innerType._zod.optin),v(e._zod,"optout",()=>t.innerType._zod.optout),e._zod.parse=(r,n)=>{if(n.direction==="backward")return t.innerType._zod.run(r,n);const o=t.innerType._zod.run(r,n);return o instanceof Promise?o.then(Le):Le(o)}});function Le(e){return e.value=Object.freeze(e.value),e}const co=h("$ZodCustom",(e,t)=>{R.init(e,t),z.init(e,t),e._zod.parse=(r,n)=>r,e._zod.check=r=>{const n=r.value,o=t.fn(n);if(o instanceof Promise)return o.then(s=>He(s,r,n,e));He(o,r,n,e)}});function He(e,t,r,n){if(!e){const o={code:"custom",input:r,inst:n,path:[...n._zod.def.path??[]],continue:!n._zod.def.abort};n._zod.def.params&&(o.params=n._zod.def.params),t.issues.push(G(o))}}class uo{constructor(){this._map=new WeakMap,this._idmap=new Map}add(t,...r){const n=r[0];if(this._map.set(t,n),n&&typeof n=="object"&&"id"in n){if(this._idmap.has(n.id))throw new Error(`ID ${n.id} already exists in the registry`);this._idmap.set(n.id,t)}return this}clear(){return this._map=new WeakMap,this._idmap=new Map,this}remove(t){const r=this._map.get(t);return r&&typeof r=="object"&&"id"in r&&this._idmap.delete(r.id),this._map.delete(t),this}get(t){const r=t._zod.parent;if(r){const n={...this.get(r)??{}};delete n.id;const o={...n,...this._map.get(t)};return Object.keys(o).length?o:void 0}return this._map.get(t)}has(t){return this._map.has(t)}}function lo(){return new uo}const te=lo();function ho(e,t){return new e({type:"string",...p(t)})}function fo(e,t){return new e({type:"string",format:"email",check:"string_format",abort:!1,...p(t)})}function Me(e,t){return new e({type:"string",format:"guid",check:"string_format",abort:!1,...p(t)})}function po(e,t){return new e({type:"string",format:"uuid",check:"string_format",abort:!1,...p(t)})}function mo(e,t){return new e({type:"string",format:"uuid",check:"string_format",abort:!1,version:"v4",...p(t)})}function go(e,t){return new e({type:"string",format:"uuid",check:"string_format",abort:!1,version:"v6",...p(t)})}function vo(e,t){return new e({type:"string",format:"uuid",check:"string_format",abort:!1,version:"v7",...p(t)})}function _o(e,t){return new e({type:"string",format:"url",check:"string_format",abort:!1,...p(t)})}function wo(e,t){return new e({type:"string",format:"emoji",check:"string_format",abort:!1,...p(t)})}function yo(e,t){return new e({type:"string",format:"nanoid",check:"string_format",abort:!1,...p(t)})}function bo(e,t){return new e({type:"string",format:"cuid",check:"string_format",abort:!1,...p(t)})}function zo(e,t){return new e({type:"string",format:"cuid2",check:"string_format",abort:!1,...p(t)})}function $o(e,t){return new e({type:"string",format:"ulid",check:"string_format",abort:!1,...p(t)})}function ko(e,t){return new e({type:"string",format:"xid",check:"string_format",abort:!1,...p(t)})}function Zo(e,t){return new e({type:"string",format:"ksuid",check:"string_format",abort:!1,...p(t)})}function Eo(e,t){return new e({type:"string",format:"ipv4",check:"string_format",abort:!1,...p(t)})}function Oo(e,t){return new e({type:"string",format:"ipv6",check:"string_format",abort:!1,...p(t)})}function Ro(e,t){return new e({type:"string",format:"cidrv4",check:"string_format",abort:!1,...p(t)})}function Po(e,t){return new e({type:"string",format:"cidrv6",check:"string_format",abort:!1,...p(t)})}function Ao(e,t){return new e({type:"string",format:"base64",check:"string_format",abort:!1,...p(t)})}function jo(e,t){return new e({type:"string",format:"base64url",check:"string_format",abort:!1,...p(t)})}function xo(e,t){return new e({type:"string",format:"e164",check:"string_format",abort:!1,...p(t)})}function So(e,t){return new e({type:"string",format:"jwt",check:"string_format",abort:!1,...p(t)})}function Co(e,t){return new e({type:"string",format:"datetime",check:"string_format",offset:!1,local:!1,precision:null,...p(t)})}function Io(e,t){return new e({type:"string",format:"date",check:"string_format",...p(t)})}function To(e,t){return new e({type:"string",format:"time",check:"string_format",precision:null,...p(t)})}function Do(e,t){return new e({type:"string",format:"duration",check:"string_format",...p(t)})}function No(e){return new e({type:"unknown"})}function Uo(e,t){return new e({type:"never",...p(t)})}function zt(e,t){return new cn({check:"max_length",...p(t),maximum:e})}function ae(e,t){return new un({check:"min_length",...p(t),minimum:e})}function $t(e,t){return new ln({check:"length_equals",...p(t),length:e})}function Fo(e,t){return new hn({check:"string_format",format:"regex",...p(t),pattern:e})}function Lo(e){return new dn({check:"string_format",format:"lowercase",...p(e)})}function Ho(e){return new fn({check:"string_format",format:"uppercase",...p(e)})}function Mo(e,t){return new pn({check:"string_format",format:"includes",...p(t),includes:e})}function qo(e,t){return new mn({check:"string_format",format:"starts_with",...p(t),prefix:e})}function Wo(e,t){return new gn({check:"string_format",format:"ends_with",...p(t),suffix:e})}function X(e){return new vn({check:"overwrite",tx:e})}function Bo(e){return X(t=>t.normalize(e))}function Vo(){return X(e=>e.trim())}function Ko(){return X(e=>e.toLowerCase())}function Jo(){return X(e=>e.toUpperCase())}function Go(e,t,r){return new e({type:"array",element:t,...p(r)})}function Xo(e,t,r){return new e({type:"custom",check:"custom",fn:t,...p(r)})}function Yo(e){const t=Qo(r=>(r.addIssue=n=>{if(typeof n=="string")r.issues.push(G(n,r.value,t._zod.def));else{const o=n;o.fatal&&(o.continue=!1),o.code??(o.code="custom"),o.input??(o.input=r.value),o.inst??(o.inst=t),o.continue??(o.continue=!t._zod.def.abort),r.issues.push(G(o))}},e(r.value,r)));return t}function Qo(e,t){const r=new R({check:"custom",...p(t)});return r._zod.check=e,r}const es=h("ZodISODateTime",(e,t)=>{jn.init(e,t),w.init(e,t)});function ts(e){return Co(es,e)}const rs=h("ZodISODate",(e,t)=>{xn.init(e,t),w.init(e,t)});function ns(e){return Io(rs,e)}const os=h("ZodISOTime",(e,t)=>{Sn.init(e,t),w.init(e,t)});function ss(e){return To(os,e)}const is=h("ZodISODuration",(e,t)=>{Cn.init(e,t),w.init(e,t)});function as(e){return Do(is,e)}const cs=(e,t)=>{pt.init(e,t),e.name="ZodError",Object.defineProperties(e,{format:{value:r=>Er(e,r)},flatten:{value:r=>Zr(e,r)},addIssue:{value:r=>{e.issues.push(r),e.message=JSON.stringify(e.issues,ge,2)}},addIssues:{value:r=>{e.issues.push(...r),e.message=JSON.stringify(e.issues,ge,2)}},isEmpty:{get(){return e.issues.length===0}}})},O=h("ZodError",cs,{Parent:Error}),us=ke(O),ls=Ze(O),hs=le(O),ds=he(O),fs=Pr(O),ps=Ar(O),ms=jr(O),gs=xr(O),vs=Sr(O),_s=Cr(O),ws=Ir(O),ys=Tr(O),k=h("ZodType",(e,t)=>(z.init(e,t),e.def=t,e.type=t.type,Object.defineProperty(e,"_def",{value:t}),e.check=(...r)=>e.clone(U(t,{checks:[...t.checks??[],...r.map(n=>typeof n=="function"?{_zod:{check:n,def:{check:"custom"},onattach:[]}}:n)]})),e.clone=(r,n)=>S(e,r,n),e.brand=()=>e,e.register=((r,n)=>(r.add(e,n),e)),e.parse=(r,n)=>us(e,r,n,{callee:e.parse}),e.safeParse=(r,n)=>hs(e,r,n),e.parseAsync=async(r,n)=>ls(e,r,n,{callee:e.parseAsync}),e.safeParseAsync=async(r,n)=>ds(e,r,n),e.spa=e.safeParseAsync,e.encode=(r,n)=>fs(e,r,n),e.decode=(r,n)=>ps(e,r,n),e.encodeAsync=async(r,n)=>ms(e,r,n),e.decodeAsync=async(r,n)=>gs(e,r,n),e.safeEncode=(r,n)=>vs(e,r,n),e.safeDecode=(r,n)=>_s(e,r,n),e.safeEncodeAsync=async(r,n)=>ws(e,r,n),e.safeDecodeAsync=async(r,n)=>ys(e,r,n),e.refine=(r,n)=>e.check(hi(r,n)),e.superRefine=r=>e.check(di(r)),e.overwrite=r=>e.check(X(r)),e.optional=()=>Be(e),e.nullable=()=>Ve(e),e.nullish=()=>Be(Ve(e)),e.nonoptional=r=>oi(e,r),e.array=()=>Ms(e),e.or=r=>Vs([e,r]),e.and=r=>Js(e,r),e.transform=r=>Ke(e,Ys(r)),e.default=r=>ti(e,r),e.prefault=r=>ni(e,r),e.catch=r=>ii(e,r),e.pipe=r=>Ke(e,r),e.readonly=()=>ui(e),e.describe=r=>{const n=e.clone();return te.add(n,{description:r}),n},Object.defineProperty(e,"description",{get(){return te.get(e)?.description},configurable:!0}),e.meta=(...r)=>{if(r.length===0)return te.get(e);const n=e.clone();return te.add(n,r[0]),n},e.isOptional=()=>e.safeParse(void 0).success,e.isNullable=()=>e.safeParse(null).success,e)),kt=h("_ZodString",(e,t)=>{Ee.init(e,t),k.init(e,t);const r=e._zod.bag;e.format=r.format??null,e.minLength=r.minimum??null,e.maxLength=r.maximum??null,e.regex=(...n)=>e.check(Fo(...n)),e.includes=(...n)=>e.check(Mo(...n)),e.startsWith=(...n)=>e.check(qo(...n)),e.endsWith=(...n)=>e.check(Wo(...n)),e.min=(...n)=>e.check(ae(...n)),e.max=(...n)=>e.check(zt(...n)),e.length=(...n)=>e.check($t(...n)),e.nonempty=(...n)=>e.check(ae(1,...n)),e.lowercase=n=>e.check(Lo(n)),e.uppercase=n=>e.check(Ho(n)),e.trim=()=>e.check(Vo()),e.normalize=(...n)=>e.check(Bo(...n)),e.toLowerCase=()=>e.check(Ko()),e.toUpperCase=()=>e.check(Jo())}),bs=h("ZodString",(e,t)=>{Ee.init(e,t),kt.init(e,t),e.email=r=>e.check(fo(zs,r)),e.url=r=>e.check(_o($s,r)),e.jwt=r=>e.check(So(Ns,r)),e.emoji=r=>e.check(wo(ks,r)),e.guid=r=>e.check(Me(qe,r)),e.uuid=r=>e.check(po(ne,r)),e.uuidv4=r=>e.check(mo(ne,r)),e.uuidv6=r=>e.check(go(ne,r)),e.uuidv7=r=>e.check(vo(ne,r)),e.nanoid=r=>e.check(yo(Zs,r)),e.guid=r=>e.check(Me(qe,r)),e.cuid=r=>e.check(bo(Es,r)),e.cuid2=r=>e.check(zo(Os,r)),e.ulid=r=>e.check($o(Rs,r)),e.base64=r=>e.check(Ao(Is,r)),e.base64url=r=>e.check(jo(Ts,r)),e.xid=r=>e.check(ko(Ps,r)),e.ksuid=r=>e.check(Zo(As,r)),e.ipv4=r=>e.check(Eo(js,r)),e.ipv6=r=>e.check(Oo(xs,r)),e.cidrv4=r=>e.check(Ro(Ss,r)),e.cidrv6=r=>e.check(Po(Cs,r)),e.e164=r=>e.check(xo(Ds,r)),e.datetime=r=>e.check(ts(r)),e.date=r=>e.check(ns(r)),e.time=r=>e.check(ss(r)),e.duration=r=>e.check(as(r))});function re(e){return ho(bs,e)}const w=h("ZodStringFormat",(e,t)=>{_.init(e,t),kt.init(e,t)}),zs=h("ZodEmail",(e,t)=>{zn.init(e,t),w.init(e,t)}),qe=h("ZodGUID",(e,t)=>{yn.init(e,t),w.init(e,t)}),ne=h("ZodUUID",(e,t)=>{bn.init(e,t),w.init(e,t)}),$s=h("ZodURL",(e,t)=>{$n.init(e,t),w.init(e,t)}),ks=h("ZodEmoji",(e,t)=>{kn.init(e,t),w.init(e,t)}),Zs=h("ZodNanoID",(e,t)=>{Zn.init(e,t),w.init(e,t)}),Es=h("ZodCUID",(e,t)=>{En.init(e,t),w.init(e,t)}),Os=h("ZodCUID2",(e,t)=>{On.init(e,t),w.init(e,t)}),Rs=h("ZodULID",(e,t)=>{Rn.init(e,t),w.init(e,t)}),Ps=h("ZodXID",(e,t)=>{Pn.init(e,t),w.init(e,t)}),As=h("ZodKSUID",(e,t)=>{An.init(e,t),w.init(e,t)}),js=h("ZodIPv4",(e,t)=>{In.init(e,t),w.init(e,t)}),xs=h("ZodIPv6",(e,t)=>{Tn.init(e,t),w.init(e,t)}),Ss=h("ZodCIDRv4",(e,t)=>{Dn.init(e,t),w.init(e,t)}),Cs=h("ZodCIDRv6",(e,t)=>{Nn.init(e,t),w.init(e,t)}),Is=h("ZodBase64",(e,t)=>{Un.init(e,t),w.init(e,t)}),Ts=h("ZodBase64URL",(e,t)=>{Ln.init(e,t),w.init(e,t)}),Ds=h("ZodE164",(e,t)=>{Hn.init(e,t),w.init(e,t)}),Ns=h("ZodJWT",(e,t)=>{qn.init(e,t),w.init(e,t)}),Us=h("ZodUnknown",(e,t)=>{Wn.init(e,t),k.init(e,t)});function We(){return No(Us)}const Fs=h("ZodNever",(e,t)=>{Bn.init(e,t),k.init(e,t)});function Ls(e){return Uo(Fs,e)}const Hs=h("ZodArray",(e,t)=>{Vn.init(e,t),k.init(e,t),e.element=t.element,e.min=(r,n)=>e.check(ae(r,n)),e.nonempty=r=>e.check(ae(1,r)),e.max=(r,n)=>e.check(zt(r,n)),e.length=(r,n)=>e.check($t(r,n)),e.unwrap=()=>e.element});function Ms(e,t){return Go(Hs,e,t)}const qs=h("ZodObject",(e,t)=>{Jn.init(e,t),k.init(e,t),v(e,"shape",()=>t.shape),e.keyof=()=>Gs(Object.keys(e._zod.def.shape)),e.catchall=r=>e.clone({...e._zod.def,catchall:r}),e.passthrough=()=>e.clone({...e._zod.def,catchall:We()}),e.loose=()=>e.clone({...e._zod.def,catchall:We()}),e.strict=()=>e.clone({...e._zod.def,catchall:Ls()}),e.strip=()=>e.clone({...e._zod.def,catchall:void 0}),e.extend=r=>yr(e,r),e.safeExtend=r=>br(e,r),e.merge=r=>zr(e,r),e.pick=r=>_r(e,r),e.omit=r=>wr(e,r),e.partial=(...r)=>$r(Zt,e,r[0]),e.required=(...r)=>kr(Et,e,r[0])});function Ws(e,t){const r={type:"object",shape:e??{},...p(t)};return new qs(r)}const Bs=h("ZodUnion",(e,t)=>{Gn.init(e,t),k.init(e,t),e.options=t.options});function Vs(e,t){return new Bs({type:"union",options:e,...p(t)})}const Ks=h("ZodIntersection",(e,t)=>{Xn.init(e,t),k.init(e,t)});function Js(e,t){return new Ks({type:"intersection",left:e,right:t})}const _e=h("ZodEnum",(e,t)=>{Yn.init(e,t),k.init(e,t),e.enum=t.entries,e.options=Object.values(t.entries);const r=new Set(Object.keys(t.entries));e.extract=(n,o)=>{const s={};for(const i of n)if(r.has(i))s[i]=t.entries[i];else throw new Error(`Key ${i} not found in enum`);return new _e({...t,checks:[],...p(o),entries:s})},e.exclude=(n,o)=>{const s={...t.entries};for(const i of n)if(r.has(i))delete s[i];else throw new Error(`Key ${i} not found in enum`);return new _e({...t,checks:[],...p(o),entries:s})}});function Gs(e,t){const r=Array.isArray(e)?Object.fromEntries(e.map(n=>[n,n])):e;return new _e({type:"enum",entries:r,...p(t)})}const Xs=h("ZodTransform",(e,t)=>{Qn.init(e,t),k.init(e,t),e._zod.parse=(r,n)=>{if(n.direction==="backward")throw new ct(e.constructor.name);r.addIssue=s=>{if(typeof s=="string")r.issues.push(G(s,r.value,t));else{const i=s;i.fatal&&(i.continue=!1),i.code??(i.code="custom"),i.input??(i.input=r.value),i.inst??(i.inst=e),r.issues.push(G(i))}};const o=t.transform(r.value,r);return o instanceof Promise?o.then(s=>(r.value=s,r)):(r.value=o,r)}});function Ys(e){return new Xs({type:"transform",transform:e})}const Zt=h("ZodOptional",(e,t)=>{eo.init(e,t),k.init(e,t),e.unwrap=()=>e._zod.def.innerType});function Be(e){return new Zt({type:"optional",innerType:e})}const Qs=h("ZodNullable",(e,t)=>{to.init(e,t),k.init(e,t),e.unwrap=()=>e._zod.def.innerType});function Ve(e){return new Qs({type:"nullable",innerType:e})}const ei=h("ZodDefault",(e,t)=>{ro.init(e,t),k.init(e,t),e.unwrap=()=>e._zod.def.innerType,e.removeDefault=e.unwrap});function ti(e,t){return new ei({type:"default",innerType:e,get defaultValue(){return typeof t=="function"?t():ht(t)}})}const ri=h("ZodPrefault",(e,t)=>{no.init(e,t),k.init(e,t),e.unwrap=()=>e._zod.def.innerType});function ni(e,t){return new ri({type:"prefault",innerType:e,get defaultValue(){return typeof t=="function"?t():ht(t)}})}const Et=h("ZodNonOptional",(e,t)=>{oo.init(e,t),k.init(e,t),e.unwrap=()=>e._zod.def.innerType});function oi(e,t){return new Et({type:"nonoptional",innerType:e,...p(t)})}const si=h("ZodCatch",(e,t)=>{so.init(e,t),k.init(e,t),e.unwrap=()=>e._zod.def.innerType,e.removeCatch=e.unwrap});function ii(e,t){return new si({type:"catch",innerType:e,catchValue:typeof t=="function"?t:()=>t})}const ai=h("ZodPipe",(e,t)=>{io.init(e,t),k.init(e,t),e.in=t.in,e.out=t.out});function Ke(e,t){return new ai({type:"pipe",in:e,out:t})}const ci=h("ZodReadonly",(e,t)=>{ao.init(e,t),k.init(e,t),e.unwrap=()=>e._zod.def.innerType});function ui(e){return new ci({type:"readonly",innerType:e})}const li=h("ZodCustom",(e,t)=>{co.init(e,t),k.init(e,t)});function hi(e,t={}){return Xo(li,e,t)}function di(e){return Yo(e)}var fi=/^[\w!#$%&'*.^`|~+-]+$/,pi=/^[ !#-:<-[\]-~]*$/,mi=(e,t)=>{const r=e.trim().split(";"),n={};for(let o of r){o=o.trim();const s=o.indexOf("=");if(s===-1)continue;const i=o.substring(0,s).trim();if(!fi.test(i))continue;let a=o.substring(s+1).trim();a.startsWith('"')&&a.endsWith('"')&&(a=a.slice(1,-1)),pi.test(a)&&(n[i]=a.indexOf("%")!==-1?ce(a,we):a)}return n},gi=(e,t,r)=>{const n=e.req.raw.headers.get("Cookie");return n?mi(n):{}},vi=(e,t)=>new Response(e,{headers:{"Content-Type":t}}).formData(),_i=/^application\/([a-z-\.]+\+)?json(;\s*[a-zA-Z0-9\-]+\=([^;]+))*$/,wi=/^multipart\/form-data(;\s?boundary=[a-zA-Z0-9'"()+_,\-./:=?]+)?$/,yi=/^application\/x-www-form-urlencoded(;\s*[a-zA-Z0-9\-]+\=([^;]+))*$/,bi=(e,t)=>async(r,n)=>{let o={};const s=r.req.header("Content-Type");switch(e){case"json":if(!s||!_i.test(s))break;try{o=await r.req.json()}catch{const a="Malformed JSON in request body";throw new Re(400,{message:a})}break;case"form":{if(!s||!(wi.test(s)||yi.test(s)))break;let a;if(r.req.bodyCache.formData)a=await r.req.bodyCache.formData;else try{const u=await r.req.arrayBuffer();a=await vi(u,s),r.req.bodyCache.formData=a}catch(u){let l="Malformed FormData request.";throw l+=u instanceof Error?` ${u.message}`:` ${String(u)}`,new Re(400,{message:l})}const c={};a.forEach((u,l)=>{l.endsWith("[]")?(c[l]??=[]).push(u):Array.isArray(c[l])?c[l].push(u):l in c?c[l]=[c[l],u]:c[l]=u}),o=c;break}case"query":o=Object.fromEntries(Object.entries(r.req.queries()).map(([a,c])=>c.length===1?[a,c[0]]:[a,c]));break;case"param":o=r.req.param();break;case"header":o=r.req.header();break;case"cookie":o=gi(r);break}const i=await t(o,r);return i instanceof Response?i:(r.req.addValidatedData(e,i),await n())},zi=(e,t,r,n)=>bi(e,async(o,s)=>{let i=o;const a=await t.safeParseAsync(i);return a.success?a.data:s.json(a,400)});function $i(e){e.get("/api/test",r=>r.json({success:!0,data:{name:"this works"}}));const t=Ws({name:re().min(2),phone:re().min(10),projectName:re().min(2),aboutProject:re().min(10)});e.post("/api/contact",zi("json",t),async r=>{const n=r.req.valid("json");try{const o={from:"Portfolio Contact Form <onboarding@resend.dev>",to:["jaswant5511246@gmail.com"],subject:`New Project Inquiry: ${n.projectName}`,html:`
                    <h1>New Contact Form Submission</h1>
                    <p><strong>Name:</strong> ${n.name}</p>
                    <p><strong>Phone:</strong> ${n.phone}</p>
                    <p><strong>Project Name:</strong> ${n.projectName}</p>
                    <p><strong>About Project:</strong></p>
                    <p>${n.aboutProject}</p>
                `},s=r.env.RESEND_API_KEY;if(!s)return console.error("RESEND_API_KEY is not set in environment variables."),r.json({success:!1,error:"Server configuration error."},500);const i=await fetch("https://api.resend.com/emails",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${s}`},body:JSON.stringify(o)});if(!i.ok){const a=await i.text();return console.error("Failed to send email:",i.status,a),r.json({success:!1,error:"Failed to send message."},500)}return r.json({success:!0,message:"Message received successfully!"})}catch(o){return console.error("Error processing contact form:",o),r.json({success:!1,error:"An unexpected error occurred."},500)}})}const C=new ir;C.use("*",fr());C.use("/api/*",ar({origin:"*",allowMethods:["GET","POST","PUT","DELETE","OPTIONS"],allowHeaders:["Content-Type","Authorization"]}));$i(C);C.get("/api/health",e=>e.json({success:!0,data:{status:"healthy",timestamp:new Date().toISOString()}}));C.post("/api/client-errors",async e=>{try{const t=await e.req.json();return console.error("[CLIENT ERROR]",JSON.stringify({timestamp:t.timestamp||new Date().toISOString(),message:t.message,url:t.url,stack:t.stack,componentStack:t.componentStack,errorBoundary:t.errorBoundary},null,2)),e.json({success:!0})}catch(t){return console.error("[CLIENT ERROR HANDLER] Failed:",t),e.json({success:!1,error:"Failed to process"},500)}});C.notFound(e=>e.json({success:!1,error:"Not Found"},404));C.onError((e,t)=>(console.error(`[ERROR] ${e}`),t.json({success:!1,error:"Internal Server Error"},500)));console.log("Server is running");const ki={fetch:C.fetch},Ri=ki??{};export{Ri as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
