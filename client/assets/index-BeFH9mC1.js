var Lk=Object.defineProperty;var Ok=(e,t,n)=>t in e?Lk(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var Sn=(e,t,n)=>Ok(e,typeof t!="symbol"?t+"":t,n);function ow(e,t){for(var n=0;n<t.length;n++){const i=t[n];if(typeof i!="string"&&!Array.isArray(i)){for(const s in i)if(s!=="default"&&!(s in e)){const l=Object.getOwnPropertyDescriptor(i,s);l&&Object.defineProperty(e,s,l.get?l:{enumerable:!0,get:()=>i[s]})}}}return Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const l of s)if(l.type==="childList")for(const u of l.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&i(u)}).observe(document,{childList:!0,subtree:!0});function n(s){const l={};return s.integrity&&(l.integrity=s.integrity),s.referrerPolicy&&(l.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?l.credentials="include":s.crossOrigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function i(s){if(s.ep)return;s.ep=!0;const l=n(s);fetch(s.href,l)}})();function iw(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Gd={exports:{}},qs={},Yd={exports:{}},Xe={},nv;function zk(){if(nv)return Xe;nv=1;/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var e=Symbol.for("react.element"),t=Symbol.for("react.portal"),n=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),d=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),p=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),g=Symbol.iterator;function y(j){return j===null||typeof j!="object"?null:(j=g&&j[g]||j["@@iterator"],typeof j=="function"?j:null)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},_=Object.assign,k={};function C(j,K,q){this.props=j,this.context=K,this.refs=k,this.updater=q||b}C.prototype.isReactComponent={},C.prototype.setState=function(j,K){if(typeof j!="object"&&typeof j!="function"&&j!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,j,K,"setState")},C.prototype.forceUpdate=function(j){this.updater.enqueueForceUpdate(this,j,"forceUpdate")};function N(){}N.prototype=C.prototype;function M(j,K,q){this.props=j,this.context=K,this.refs=k,this.updater=q||b}var O=M.prototype=new N;O.constructor=M,_(O,C.prototype),O.isPureReactComponent=!0;var B=Array.isArray,Z=Object.prototype.hasOwnProperty,re={current:null},R={key:!0,ref:!0,__self:!0,__source:!0};function I(j,K,q){var ce,me={},je=null,Ee=null;if(K!=null)for(ce in K.ref!==void 0&&(Ee=K.ref),K.key!==void 0&&(je=""+K.key),K)Z.call(K,ce)&&!R.hasOwnProperty(ce)&&(me[ce]=K[ce]);var Se=arguments.length-2;if(Se===1)me.children=q;else if(1<Se){for(var He=Array(Se),st=0;st<Se;st++)He[st]=arguments[st+2];me.children=He}if(j&&j.defaultProps)for(ce in Se=j.defaultProps,Se)me[ce]===void 0&&(me[ce]=Se[ce]);return{$$typeof:e,type:j,key:je,ref:Ee,props:me,_owner:re.current}}function ae(j,K){return{$$typeof:e,type:j.type,key:K,ref:j.ref,props:j.props,_owner:j._owner}}function le(j){return typeof j=="object"&&j!==null&&j.$$typeof===e}function Ie(j){var K={"=":"=0",":":"=2"};return"$"+j.replace(/[=:]/g,function(q){return K[q]})}var he=/\/+/g;function ge(j,K){return typeof j=="object"&&j!==null&&j.key!=null?Ie(""+j.key):K.toString(36)}function Ne(j,K,q,ce,me){var je=typeof j;(je==="undefined"||je==="boolean")&&(j=null);var Ee=!1;if(j===null)Ee=!0;else switch(je){case"string":case"number":Ee=!0;break;case"object":switch(j.$$typeof){case e:case t:Ee=!0}}if(Ee)return Ee=j,me=me(Ee),j=ce===""?"."+ge(Ee,0):ce,B(me)?(q="",j!=null&&(q=j.replace(he,"$&/")+"/"),Ne(me,K,q,"",function(st){return st})):me!=null&&(le(me)&&(me=ae(me,q+(!me.key||Ee&&Ee.key===me.key?"":(""+me.key).replace(he,"$&/")+"/")+j)),K.push(me)),1;if(Ee=0,ce=ce===""?".":ce+":",B(j))for(var Se=0;Se<j.length;Se++){je=j[Se];var He=ce+ge(je,Se);Ee+=Ne(je,K,q,He,me)}else if(He=y(j),typeof He=="function")for(j=He.call(j),Se=0;!(je=j.next()).done;)je=je.value,He=ce+ge(je,Se++),Ee+=Ne(je,K,q,He,me);else if(je==="object")throw K=String(j),Error("Objects are not valid as a React child (found: "+(K==="[object Object]"?"object with keys {"+Object.keys(j).join(", ")+"}":K)+"). If you meant to render a collection of children, use an array instead.");return Ee}function Le(j,K,q){if(j==null)return j;var ce=[],me=0;return Ne(j,ce,"","",function(je){return K.call(q,je,me++)}),ce}function ve(j){if(j._status===-1){var K=j._result;K=K(),K.then(function(q){(j._status===0||j._status===-1)&&(j._status=1,j._result=q)},function(q){(j._status===0||j._status===-1)&&(j._status=2,j._result=q)}),j._status===-1&&(j._status=0,j._result=K)}if(j._status===1)return j._result.default;throw j._result}var ue={current:null},z={transition:null},fe={ReactCurrentDispatcher:ue,ReactCurrentBatchConfig:z,ReactCurrentOwner:re};function ee(){throw Error("act(...) is not supported in production builds of React.")}return Xe.Children={map:Le,forEach:function(j,K,q){Le(j,function(){K.apply(this,arguments)},q)},count:function(j){var K=0;return Le(j,function(){K++}),K},toArray:function(j){return Le(j,function(K){return K})||[]},only:function(j){if(!le(j))throw Error("React.Children.only expected to receive a single React element child.");return j}},Xe.Component=C,Xe.Fragment=n,Xe.Profiler=s,Xe.PureComponent=M,Xe.StrictMode=i,Xe.Suspense=f,Xe.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=fe,Xe.act=ee,Xe.cloneElement=function(j,K,q){if(j==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+j+".");var ce=_({},j.props),me=j.key,je=j.ref,Ee=j._owner;if(K!=null){if(K.ref!==void 0&&(je=K.ref,Ee=re.current),K.key!==void 0&&(me=""+K.key),j.type&&j.type.defaultProps)var Se=j.type.defaultProps;for(He in K)Z.call(K,He)&&!R.hasOwnProperty(He)&&(ce[He]=K[He]===void 0&&Se!==void 0?Se[He]:K[He])}var He=arguments.length-2;if(He===1)ce.children=q;else if(1<He){Se=Array(He);for(var st=0;st<He;st++)Se[st]=arguments[st+2];ce.children=Se}return{$$typeof:e,type:j.type,key:me,ref:je,props:ce,_owner:Ee}},Xe.createContext=function(j){return j={$$typeof:u,_currentValue:j,_currentValue2:j,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},j.Provider={$$typeof:l,_context:j},j.Consumer=j},Xe.createElement=I,Xe.createFactory=function(j){var K=I.bind(null,j);return K.type=j,K},Xe.createRef=function(){return{current:null}},Xe.forwardRef=function(j){return{$$typeof:d,render:j}},Xe.isValidElement=le,Xe.lazy=function(j){return{$$typeof:m,_payload:{_status:-1,_result:j},_init:ve}},Xe.memo=function(j,K){return{$$typeof:p,type:j,compare:K===void 0?null:K}},Xe.startTransition=function(j){var K=z.transition;z.transition={};try{j()}finally{z.transition=K}},Xe.unstable_act=ee,Xe.useCallback=function(j,K){return ue.current.useCallback(j,K)},Xe.useContext=function(j){return ue.current.useContext(j)},Xe.useDebugValue=function(){},Xe.useDeferredValue=function(j){return ue.current.useDeferredValue(j)},Xe.useEffect=function(j,K){return ue.current.useEffect(j,K)},Xe.useId=function(){return ue.current.useId()},Xe.useImperativeHandle=function(j,K,q){return ue.current.useImperativeHandle(j,K,q)},Xe.useInsertionEffect=function(j,K){return ue.current.useInsertionEffect(j,K)},Xe.useLayoutEffect=function(j,K){return ue.current.useLayoutEffect(j,K)},Xe.useMemo=function(j,K){return ue.current.useMemo(j,K)},Xe.useReducer=function(j,K,q){return ue.current.useReducer(j,K,q)},Xe.useRef=function(j){return ue.current.useRef(j)},Xe.useState=function(j){return ue.current.useState(j)},Xe.useSyncExternalStore=function(j,K,q){return ue.current.useSyncExternalStore(j,K,q)},Xe.useTransition=function(){return ue.current.useTransition()},Xe.version="18.3.1",Xe}var rv;function bh(){return rv||(rv=1,Yd.exports=zk()),Yd.exports}/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var ov;function Ik(){if(ov)return qs;ov=1;var e=bh(),t=Symbol.for("react.element"),n=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,s=e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function u(d,f,p){var m,g={},y=null,b=null;p!==void 0&&(y=""+p),f.key!==void 0&&(y=""+f.key),f.ref!==void 0&&(b=f.ref);for(m in f)i.call(f,m)&&!l.hasOwnProperty(m)&&(g[m]=f[m]);if(d&&d.defaultProps)for(m in f=d.defaultProps,f)g[m]===void 0&&(g[m]=f[m]);return{$$typeof:t,type:d,key:y,ref:b,props:g,_owner:s.current}}return qs.Fragment=n,qs.jsx=u,qs.jsxs=u,qs}var iv;function Fk(){return iv||(iv=1,Gd.exports=Ik()),Gd.exports}var x=Fk();const sw=e=>e.includes("Warning:")||e.includes("React")?"react":e.includes("fetch")||e.includes("network")||e.includes("Failed to load")?"network":e.includes("TypeError")||e.includes("ReferenceError")||e.includes("SyntaxError")?"javascript":"unknown",Vk="Warning:",$k="[WARNING]",Uk="[CONSOLE ERROR]",Bk=[/\.tsx?$/,/\.jsx?$/,/\/src\//],aw=[/node_modules/,/\.vite/,/chunk-/,/deps/],Wk=e=>[/React Router Future Flag Warning/i,/future flag to opt-in early/i,/reactrouter\.com.*upgrading.*future/i,/v7_\w+.*future flag/i].some(n=>n.test(e)),Zk=e=>[/componentWillReceiveProps/,/componentWillMount/,/componentWillUpdate/,/UNSAFE_componentWill/].some(n=>n.test(e)),sv=e=>{if(!e)return!1;const t=e.split(`
`);return t.some(s=>Bk.some(l=>l.test(s)))?!0:!t.every(s=>s.trim()===""||s.includes("Error")||aw.some(l=>l.test(s)))};class Hk{constructor(){Sn(this,"reportedErrors",new Map);Sn(this,"deduplicationWindow",5e3);Sn(this,"cleanupInterval",6e4);Sn(this,"lastCleanup",Date.now())}calculatePrecedence(t){const n=this.hasRelevantSourceCode(t.stack),i=t.level==="warning",s=t.stack?t.stack.split(`
`).length:0;return{hasSourceCode:n,isWarning:i,stackDepth:s,timestamp:Date.now()}}hasRelevantSourceCode(t){return t?t.split(`
`).some(n=>/\.tsx?$/.test(n)||/\.jsx?$/.test(n)||/\/src\//.test(n)):!1}isHigherPrecedence(t,n){return t.hasSourceCode!==n.hasSourceCode?t.hasSourceCode:t.isWarning!==n.isWarning?t.isWarning:t.stackDepth!==n.stackDepth?t.stackDepth>n.stackDepth:t.timestamp>n.timestamp}generateSignature(t){let n=t.message.replace(/\[CONSOLE ERROR\]|\[WARNING\]/g,"").replace(/^Uncaught Error:\s*/i,"").replace(/^Error:\s*/i,"").replace(/%s.*?\n/g,"").replace(/\s+/g," ").trim();return n.includes("Maximum update depth exceeded")?n="Maximum update depth exceeded":n.includes("The result of getSnapshot should be cached")?n="The result of getSnapshot should be cached":n.includes("React Router caught the following error")&&(n="React Router caught error"),n}shouldReport(t,n=!1){this.maybeCleanup();const i=this.generateSignature(t),s=this.calculatePrecedence(t),l=this.reportedErrors.get(i),u=Date.now();return l?this.isHigherPrecedence(s,l.precedence)&&s.hasSourceCode&&!l.precedence.hasSourceCode?(l.precedence=s,l.timestamp=u,l.reported=!0,{shouldReport:!0}):u-l.timestamp<this.deduplicationWindow?{shouldReport:!1,reason:"duplicate_in_window"}:n&&!s.hasSourceCode?{shouldReport:!1,reason:"no_source_code"}:(l.timestamp=u,l.precedence=s,l.reported=!0,{shouldReport:!0}):n&&!s.hasSourceCode?{shouldReport:!1,reason:"no_source_code"}:(this.reportedErrors.set(i,{timestamp:u,precedence:s,reported:!0}),{shouldReport:!0})}maybeCleanup(){const t=Date.now();if(t-this.lastCleanup>this.cleanupInterval){const n=t-3e5;for(const[i,s]of this.reportedErrors.entries())s.timestamp<n&&this.reportedErrors.delete(i);this.lastCleanup=t}}}const lw=new Hk;class Kk{constructor(){Sn(this,"errorQueue",[]);Sn(this,"isReporting",!1);Sn(this,"maxQueueSize",10);Sn(this,"reportingEndpoint","/api/client-errors");Sn(this,"originalConsoleWarn",null);Sn(this,"originalConsoleError",null);Sn(this,"isInitialized",!1);if(!(typeof window>"u"))try{this.setupConsoleInterceptors(),this.setupGlobalErrorHandler(),this.setupUnhandledRejectionHandler(),this.isInitialized=!0}catch(t){console.error("[ErrorReporter] Failed to initialize:",t)}}setupGlobalErrorHandler(){const t=window.onerror;window.onerror=(n,i,s,l,u)=>{const d=typeof n=="string"?n:"Unknown error",f={message:d,stack:u==null?void 0:u.stack,source:i||void 0,level:"error",url:window.location.href};if(!this.filterError(f).shouldReport)return t?t(n,i,s,l,u):!0;const m=this.createErrorPayload({message:d,stack:u==null?void 0:u.stack,parsedStack:this.parseStackTrace(u==null?void 0:u.stack),source:i||void 0,lineno:s||void 0,colno:l||void 0,error:u});return this.report(m),t?t(n,i,s,l,u):!0}}setupUnhandledRejectionHandler(){window.addEventListener("unhandledrejection",t=>{const n=t.reason,i=(n==null?void 0:n.message)||"Unhandled Promise Rejection",s={message:i,stack:n==null?void 0:n.stack,level:"error",url:window.location.href};if(!this.filterError(s).shouldReport)return;const u=this.createErrorPayload({message:i,stack:n==null?void 0:n.stack,parsedStack:this.parseStackTrace(n==null?void 0:n.stack),error:n});this.report(u)})}createConsoleInterceptor(t,n,i){return(...s)=>{n.apply(console,s);try{const l=uw(s),u=new Error().stack,d=t==="warn"&&l.includes(Vk)?"warning":"error",f={message:`${i} ${l}`,stack:u,level:d,url:window.location.href};if(!this.filterError(f).shouldReport)return;const m=this.createErrorPayload({message:f.message,stack:u,parsedStack:this.parseStackTrace(u),level:d});this.report(m)}catch{}}}setupConsoleInterceptors(){this.originalConsoleWarn=console.warn,this.originalConsoleError=console.error;const t=console.warn,n=console.error;t.__errorReporterWrapped&&n.__errorReporterWrapped||(console.error=this.createConsoleInterceptor("error",this.originalConsoleError,Uk),console.warn=this.createConsoleInterceptor("warn",this.originalConsoleWarn,$k))}createBaseErrorData(){return{url:window.location.href,timestamp:new Date().toISOString()}}createErrorPayload(t){return{...this.createBaseErrorData(),level:t.level??"error",category:sw(t.message),...t}}filterError(t){const{message:n,stack:i,level:s,source:l}=t;if(n.includes("[ErrorReporter]"))return{shouldReport:!1,reason:"internal_debug"};if(Wk(n))return{shouldReport:!1,reason:"react_router_future_flag"};if(s==="warning"&&Zk(n))return{shouldReport:!1,reason:"deprecated_react_warning"};if(s==="error"&&n.includes("Uncaught Error")&&!sv(i))return{shouldReport:!1,reason:"no_relevant_source"};if(s==="error"&&l&&aw.some(d=>d.test(l))&&!sv(i))return{shouldReport:!1,reason:"vendor_only_error"};const u=lw.shouldReport(t,!1);return u.shouldReport?{shouldReport:!0}:{shouldReport:!1,reason:u.reason}}parseStackTrace(t){if(!t)return"";try{const n=t.split(`
`),i=[];for(const s of n){if(s.includes("Error")&&!s.includes("at "))continue;let l=s.trim();const u=s.match(/at (\w+) \(.*?\/src\/(.*?):(\d+):(\d+)\)/);if(u){const[,d,f,p,m]=u;l=`    at ${d} (${f}:${p}:${m})`}else{const d=s.match(/at.*?\/src\/(.*?):(\d+):(\d+)/);if(d){const[,f,p,m]=d;l=`    at ${f}:${p}:${m}`}else s.match(/at\s+(\w+)\s+\(/)&&(l=s)}l&&i.push(l)}return i.join(`
`)}catch{return t}}report(t){if(!(!this.isInitialized||typeof window>"u"))try{this.errorQueue.push(t),this.errorQueue.length>this.maxQueueSize&&this.errorQueue.shift(),this.processQueue()}catch{}}async processQueue(){if(this.isReporting||this.errorQueue.length===0)return;this.isReporting=!0;const t=[...this.errorQueue];this.errorQueue=[];try{for(const n of t)await this.sendError(n)}catch(n){console.error("[ErrorReporter] Failed to report errors:",n),this.errorQueue.unshift(...t)}finally{this.isReporting=!1}}async sendError(t){try{const n=await fetch(this.reportingEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!n.ok)throw new Error(`Failed to report error: ${n.status} ${n.statusText}`);const i=await n.json();if(!i.success)throw new Error(i.error||"Unknown error occurred");console.log("[ErrorReporter] Error reported successfully:",t.message)}catch(n){throw console.error("[ErrorReporter] Failed to send error:",n),n}}dispose(){this.originalConsoleWarn&&(console.warn=this.originalConsoleWarn),this.originalConsoleError&&(console.error=this.originalConsoleError),this.isInitialized=!1}}const uw=e=>e.map(t=>typeof t=="string"?t:typeof t=="object"&&t?JSON.stringify(t,null,2):String(t)).join(" "),Gk=(e,t)=>({message:e,stack:new Error().stack,url:window.location.href,timestamp:new Date().toISOString(),level:t,category:sw(e)}),Yk=e=>{const{message:t,stack:n,level:i}=e;if(t.includes("[ErrorReporter]")||[/React Router Future Flag Warning/i,/future flag to opt-in early/i,/reactrouter\.com.*upgrading.*future/i,/v7_\w+.*future flag/i].some(f=>f.test(t))||i==="warning"&&[/componentWillReceiveProps/,/componentWillMount/,/componentWillUpdate/,/UNSAFE_componentWill/].some(f=>f.test(t)))return!1;const u=n?n.split(`
`).some(f=>/\.tsx?$/.test(f)||/\.jsx?$/.test(f)||/\/src\//.test(f)):!1;return i==="error"&&t.includes("Uncaught Error")&&!u||t.includes("Maximum update depth exceeded")&&!u?!1:lw.shouldReport(e,!0).shouldReport},Xk=async e=>{try{await fetch("/api/client-errors",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})}catch{}};if(typeof window<"u"){const e=console.warn,t=console.error,n=(i,s,l)=>function(...u){i.apply(console,u);try{const d=uw(u),f=new Error().stack,p=d.includes("Warning:")?"warning":l,m={message:`${s} ${d}`,stack:f,level:p,url:window.location.href};if(Yk(m)){const g=Gk(m.message,p);Xk(g)}}catch{}};console.warn=n(e,"[WARNING]","warning"),console.warn.__errorReporterWrapped=!0,console.error=n(t,"[CONSOLE ERROR]","error"),console.error.__errorReporterWrapped=!0}const kh=new Kk;typeof window<"u"&&window.addEventListener("beforeunload",()=>{kh.dispose()});var cw=Symbol.for("immer-nothing"),av=Symbol.for("immer-draftable"),it=Symbol.for("immer-state");function ir(e,...t){throw new Error(`[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`)}var ss=Object.getPrototypeOf;function as(e){return!!e&&!!e[it]}function qr(e){var t;return e?dw(e)||Array.isArray(e)||!!e[av]||!!((t=e.constructor)!=null&&t[av])||Oa(e)||Hu(e):!1}var Qk=Object.prototype.constructor.toString();function dw(e){if(!e||typeof e!="object")return!1;const t=ss(e);if(t===null)return!0;const n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object?!0:typeof n=="function"&&Function.toString.call(n)===Qk}function xa(e,t){Zu(e)===0?Reflect.ownKeys(e).forEach(n=>{t(n,e[n],e)}):e.forEach((n,i)=>t(i,n,e))}function Zu(e){const t=e[it];return t?t.type_:Array.isArray(e)?1:Oa(e)?2:Hu(e)?3:0}function Nf(e,t){return Zu(e)===2?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function fw(e,t,n){const i=Zu(e);i===2?e.set(t,n):i===3?e.add(n):e[t]=n}function Jk(e,t){return e===t?e!==0||1/e===1/t:e!==e&&t!==t}function Oa(e){return e instanceof Map}function Hu(e){return e instanceof Set}function tn(e){return e.copy_||e.base_}function Af(e,t){if(Oa(e))return new Map(e);if(Hu(e))return new Set(e);if(Array.isArray(e))return Array.prototype.slice.call(e);const n=dw(e);if(t===!0||t==="class_only"&&!n){const i=Object.getOwnPropertyDescriptors(e);delete i[it];let s=Reflect.ownKeys(i);for(let l=0;l<s.length;l++){const u=s[l],d=i[u];d.writable===!1&&(d.writable=!0,d.configurable=!0),(d.get||d.set)&&(i[u]={configurable:!0,writable:!0,enumerable:d.enumerable,value:e[u]})}return Object.create(ss(e),i)}else{const i=ss(e);if(i!==null&&n)return{...e};const s=Object.create(i);return Object.assign(s,e)}}function Eh(e,t=!1){return Ku(e)||as(e)||!qr(e)||(Zu(e)>1&&Object.defineProperties(e,{set:{value:Yl},add:{value:Yl},clear:{value:Yl},delete:{value:Yl}}),Object.freeze(e),t&&Object.values(e).forEach(n=>Eh(n,!0))),e}function Yl(){ir(2)}function Ku(e){return Object.isFrozen(e)}var Mf={};function di(e){const t=Mf[e];return t||ir(0,e),t}function qk(e,t){Mf[e]||(Mf[e]=t)}var Sa;function Eu(){return Sa}function eE(e,t){return{drafts_:[],parent_:e,immer_:t,canAutoFreeze_:!0,unfinalizedDrafts_:0}}function lv(e,t){t&&(di("Patches"),e.patches_=[],e.inversePatches_=[],e.patchListener_=t)}function jf(e){Lf(e),e.drafts_.forEach(tE),e.drafts_=null}function Lf(e){e===Sa&&(Sa=e.parent_)}function uv(e){return Sa=eE(Sa,e)}function tE(e){const t=e[it];t.type_===0||t.type_===1?t.revoke_():t.revoked_=!0}function cv(e,t){t.unfinalizedDrafts_=t.drafts_.length;const n=t.drafts_[0];return e!==void 0&&e!==n?(n[it].modified_&&(jf(t),ir(4)),qr(e)&&(e=_u(t,e),t.parent_||Cu(t,e)),t.patches_&&di("Patches").generateReplacementPatches_(n[it].base_,e,t.patches_,t.inversePatches_)):e=_u(t,n,[]),jf(t),t.patches_&&t.patchListener_(t.patches_,t.inversePatches_),e!==cw?e:void 0}function _u(e,t,n){if(Ku(t))return t;const i=t[it];if(!i)return xa(t,(s,l)=>dv(e,i,t,s,l,n)),t;if(i.scope_!==e)return t;if(!i.modified_)return Cu(e,i.base_,!0),i.base_;if(!i.finalized_){i.finalized_=!0,i.scope_.unfinalizedDrafts_--;const s=i.copy_;let l=s,u=!1;i.type_===3&&(l=new Set(s),s.clear(),u=!0),xa(l,(d,f)=>dv(e,i,s,d,f,n,u)),Cu(e,s,!1),n&&e.patches_&&di("Patches").generatePatches_(i,n,e.patches_,e.inversePatches_)}return i.copy_}function dv(e,t,n,i,s,l,u){if(as(s)){const d=l&&t&&t.type_!==3&&!Nf(t.assigned_,i)?l.concat(i):void 0,f=_u(e,s,d);if(fw(n,i,f),as(f))e.canAutoFreeze_=!1;else return}else u&&n.add(s);if(qr(s)&&!Ku(s)){if(!e.immer_.autoFreeze_&&e.unfinalizedDrafts_<1)return;_u(e,s),(!t||!t.scope_.parent_)&&typeof i!="symbol"&&(Oa(n)?n.has(i):Object.prototype.propertyIsEnumerable.call(n,i))&&Cu(e,s)}}function Cu(e,t,n=!1){!e.parent_&&e.immer_.autoFreeze_&&e.canAutoFreeze_&&Eh(t,n)}function nE(e,t){const n=Array.isArray(e),i={type_:n?1:0,scope_:t?t.scope_:Eu(),modified_:!1,finalized_:!1,assigned_:{},parent_:t,base_:e,draft_:null,copy_:null,revoke_:null,isManual_:!1};let s=i,l=_h;n&&(s=[i],l=ba);const{revoke:u,proxy:d}=Proxy.revocable(s,l);return i.draft_=d,i.revoke_=u,d}var _h={get(e,t){if(t===it)return e;const n=tn(e);if(!Nf(n,t))return rE(e,n,t);const i=n[t];return e.finalized_||!qr(i)?i:i===Xd(e.base_,t)?(Qd(e),e.copy_[t]=ka(i,e)):i},has(e,t){return t in tn(e)},ownKeys(e){return Reflect.ownKeys(tn(e))},set(e,t,n){const i=hw(tn(e),t);if(i!=null&&i.set)return i.set.call(e.draft_,n),!0;if(!e.modified_){const s=Xd(tn(e),t),l=s==null?void 0:s[it];if(l&&l.base_===n)return e.copy_[t]=n,e.assigned_[t]=!1,!0;if(Jk(n,s)&&(n!==void 0||Nf(e.base_,t)))return!0;Qd(e),Xr(e)}return e.copy_[t]===n&&(n!==void 0||t in e.copy_)||Number.isNaN(n)&&Number.isNaN(e.copy_[t])||(e.copy_[t]=n,e.assigned_[t]=!0),!0},deleteProperty(e,t){return Xd(e.base_,t)!==void 0||t in e.base_?(e.assigned_[t]=!1,Qd(e),Xr(e)):delete e.assigned_[t],e.copy_&&delete e.copy_[t],!0},getOwnPropertyDescriptor(e,t){const n=tn(e),i=Reflect.getOwnPropertyDescriptor(n,t);return i&&{writable:!0,configurable:e.type_!==1||t!=="length",enumerable:i.enumerable,value:n[t]}},defineProperty(){ir(11)},getPrototypeOf(e){return ss(e.base_)},setPrototypeOf(){ir(12)}},ba={};xa(_h,(e,t)=>{ba[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}});ba.deleteProperty=function(e,t){return ba.set.call(this,e,t,void 0)};ba.set=function(e,t,n){return _h.set.call(this,e[0],t,n,e[0])};function Xd(e,t){const n=e[it];return(n?tn(n):e)[t]}function rE(e,t,n){var s;const i=hw(t,n);return i?"value"in i?i.value:(s=i.get)==null?void 0:s.call(e.draft_):void 0}function hw(e,t){if(!(t in e))return;let n=ss(e);for(;n;){const i=Object.getOwnPropertyDescriptor(n,t);if(i)return i;n=ss(n)}}function Xr(e){e.modified_||(e.modified_=!0,e.parent_&&Xr(e.parent_))}function Qd(e){e.copy_||(e.copy_=Af(e.base_,e.scope_.immer_.useStrictShallowCopy_))}var oE=class{constructor(e){this.autoFreeze_=!0,this.useStrictShallowCopy_=!1,this.produce=(t,n,i)=>{if(typeof t=="function"&&typeof n!="function"){const l=n;n=t;const u=this;return function(f=l,...p){return u.produce(f,m=>n.call(this,m,...p))}}typeof n!="function"&&ir(6),i!==void 0&&typeof i!="function"&&ir(7);let s;if(qr(t)){const l=uv(this),u=ka(t,void 0);let d=!0;try{s=n(u),d=!1}finally{d?jf(l):Lf(l)}return lv(l,i),cv(s,l)}else if(!t||typeof t!="object"){if(s=n(t),s===void 0&&(s=t),s===cw&&(s=void 0),this.autoFreeze_&&Eh(s,!0),i){const l=[],u=[];di("Patches").generateReplacementPatches_(t,s,l,u),i(l,u)}return s}else ir(1,t)},this.produceWithPatches=(t,n)=>{if(typeof t=="function")return(u,...d)=>this.produceWithPatches(u,f=>t(f,...d));let i,s;return[this.produce(t,n,(u,d)=>{i=u,s=d}),i,s]},typeof(e==null?void 0:e.autoFreeze)=="boolean"&&this.setAutoFreeze(e.autoFreeze),typeof(e==null?void 0:e.useStrictShallowCopy)=="boolean"&&this.setUseStrictShallowCopy(e.useStrictShallowCopy)}createDraft(e){qr(e)||ir(8),as(e)&&(e=iE(e));const t=uv(this),n=ka(e,void 0);return n[it].isManual_=!0,Lf(t),n}finishDraft(e,t){const n=e&&e[it];(!n||!n.isManual_)&&ir(9);const{scope_:i}=n;return lv(i,t),cv(void 0,i)}setAutoFreeze(e){this.autoFreeze_=e}setUseStrictShallowCopy(e){this.useStrictShallowCopy_=e}applyPatches(e,t){let n;for(n=t.length-1;n>=0;n--){const s=t[n];if(s.path.length===0&&s.op==="replace"){e=s.value;break}}n>-1&&(t=t.slice(n+1));const i=di("Patches").applyPatches_;return as(e)?i(e,t):this.produce(e,s=>i(s,t))}};function ka(e,t){const n=Oa(e)?di("MapSet").proxyMap_(e,t):Hu(e)?di("MapSet").proxySet_(e,t):nE(e,t);return(t?t.scope_:Eu()).drafts_.push(n),n}function iE(e){return as(e)||ir(10,e),pw(e)}function pw(e){if(!qr(e)||Ku(e))return e;const t=e[it];let n;if(t){if(!t.modified_)return t.base_;t.finalized_=!0,n=Af(e,t.scope_.immer_.useStrictShallowCopy_)}else n=Af(e,!0);return xa(n,(i,s)=>{fw(n,i,pw(s))}),t&&(t.finalized_=!1),n}function sE(){class e extends Map{constructor(f,p){super(),this[it]={type_:2,parent_:p,scope_:p?p.scope_:Eu(),modified_:!1,finalized_:!1,copy_:void 0,assigned_:void 0,base_:f,draft_:this,isManual_:!1,revoked_:!1}}get size(){return tn(this[it]).size}has(f){return tn(this[it]).has(f)}set(f,p){const m=this[it];return u(m),(!tn(m).has(f)||tn(m).get(f)!==p)&&(n(m),Xr(m),m.assigned_.set(f,!0),m.copy_.set(f,p),m.assigned_.set(f,!0)),this}delete(f){if(!this.has(f))return!1;const p=this[it];return u(p),n(p),Xr(p),p.base_.has(f)?p.assigned_.set(f,!1):p.assigned_.delete(f),p.copy_.delete(f),!0}clear(){const f=this[it];u(f),tn(f).size&&(n(f),Xr(f),f.assigned_=new Map,xa(f.base_,p=>{f.assigned_.set(p,!1)}),f.copy_.clear())}forEach(f,p){const m=this[it];tn(m).forEach((g,y,b)=>{f.call(p,this.get(y),y,this)})}get(f){const p=this[it];u(p);const m=tn(p).get(f);if(p.finalized_||!qr(m)||m!==p.base_.get(f))return m;const g=ka(m,p);return n(p),p.copy_.set(f,g),g}keys(){return tn(this[it]).keys()}values(){const f=this.keys();return{[Symbol.iterator]:()=>this.values(),next:()=>{const p=f.next();return p.done?p:{done:!1,value:this.get(p.value)}}}}entries(){const f=this.keys();return{[Symbol.iterator]:()=>this.entries(),next:()=>{const p=f.next();if(p.done)return p;const m=this.get(p.value);return{done:!1,value:[p.value,m]}}}}[Symbol.iterator](){return this.entries()}}function t(d,f){return new e(d,f)}function n(d){d.copy_||(d.assigned_=new Map,d.copy_=new Map(d.base_))}class i extends Set{constructor(f,p){super(),this[it]={type_:3,parent_:p,scope_:p?p.scope_:Eu(),modified_:!1,finalized_:!1,copy_:void 0,base_:f,draft_:this,drafts_:new Map,revoked_:!1,isManual_:!1}}get size(){return tn(this[it]).size}has(f){const p=this[it];return u(p),p.copy_?!!(p.copy_.has(f)||p.drafts_.has(f)&&p.copy_.has(p.drafts_.get(f))):p.base_.has(f)}add(f){const p=this[it];return u(p),this.has(f)||(l(p),Xr(p),p.copy_.add(f)),this}delete(f){if(!this.has(f))return!1;const p=this[it];return u(p),l(p),Xr(p),p.copy_.delete(f)||(p.drafts_.has(f)?p.copy_.delete(p.drafts_.get(f)):!1)}clear(){const f=this[it];u(f),tn(f).size&&(l(f),Xr(f),f.copy_.clear())}values(){const f=this[it];return u(f),l(f),f.copy_.values()}entries(){const f=this[it];return u(f),l(f),f.copy_.entries()}keys(){return this.values()}[Symbol.iterator](){return this.values()}forEach(f,p){const m=this.values();let g=m.next();for(;!g.done;)f.call(p,g.value,g.value,this),g=m.next()}}function s(d,f){return new i(d,f)}function l(d){d.copy_||(d.copy_=new Set,d.base_.forEach(f=>{if(qr(f)){const p=ka(f,d);d.drafts_.set(f,p),d.copy_.add(p)}else d.copy_.add(f)}))}function u(d){d.revoked_&&ir(3,JSON.stringify(tn(d)))}qk("MapSet",{proxyMap_:t,proxySet_:s})}var aE=new oE;aE.produce;var S=bh();const G=iw(S),Ch=ow({__proto__:null,default:G},[S]);var Xl={},Jd={exports:{}},Tn={},qd={exports:{}},ef={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var fv;function lE(){return fv||(fv=1,(function(e){function t(z,fe){var ee=z.length;z.push(fe);e:for(;0<ee;){var j=ee-1>>>1,K=z[j];if(0<s(K,fe))z[j]=fe,z[ee]=K,ee=j;else break e}}function n(z){return z.length===0?null:z[0]}function i(z){if(z.length===0)return null;var fe=z[0],ee=z.pop();if(ee!==fe){z[0]=ee;e:for(var j=0,K=z.length,q=K>>>1;j<q;){var ce=2*(j+1)-1,me=z[ce],je=ce+1,Ee=z[je];if(0>s(me,ee))je<K&&0>s(Ee,me)?(z[j]=Ee,z[je]=ee,j=je):(z[j]=me,z[ce]=ee,j=ce);else if(je<K&&0>s(Ee,ee))z[j]=Ee,z[je]=ee,j=je;else break e}}return fe}function s(z,fe){var ee=z.sortIndex-fe.sortIndex;return ee!==0?ee:z.id-fe.id}if(typeof performance=="object"&&typeof performance.now=="function"){var l=performance;e.unstable_now=function(){return l.now()}}else{var u=Date,d=u.now();e.unstable_now=function(){return u.now()-d}}var f=[],p=[],m=1,g=null,y=3,b=!1,_=!1,k=!1,C=typeof setTimeout=="function"?setTimeout:null,N=typeof clearTimeout=="function"?clearTimeout:null,M=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function O(z){for(var fe=n(p);fe!==null;){if(fe.callback===null)i(p);else if(fe.startTime<=z)i(p),fe.sortIndex=fe.expirationTime,t(f,fe);else break;fe=n(p)}}function B(z){if(k=!1,O(z),!_)if(n(f)!==null)_=!0,ve(Z);else{var fe=n(p);fe!==null&&ue(B,fe.startTime-z)}}function Z(z,fe){_=!1,k&&(k=!1,N(I),I=-1),b=!0;var ee=y;try{for(O(fe),g=n(f);g!==null&&(!(g.expirationTime>fe)||z&&!Ie());){var j=g.callback;if(typeof j=="function"){g.callback=null,y=g.priorityLevel;var K=j(g.expirationTime<=fe);fe=e.unstable_now(),typeof K=="function"?g.callback=K:g===n(f)&&i(f),O(fe)}else i(f);g=n(f)}if(g!==null)var q=!0;else{var ce=n(p);ce!==null&&ue(B,ce.startTime-fe),q=!1}return q}finally{g=null,y=ee,b=!1}}var re=!1,R=null,I=-1,ae=5,le=-1;function Ie(){return!(e.unstable_now()-le<ae)}function he(){if(R!==null){var z=e.unstable_now();le=z;var fe=!0;try{fe=R(!0,z)}finally{fe?ge():(re=!1,R=null)}}else re=!1}var ge;if(typeof M=="function")ge=function(){M(he)};else if(typeof MessageChannel<"u"){var Ne=new MessageChannel,Le=Ne.port2;Ne.port1.onmessage=he,ge=function(){Le.postMessage(null)}}else ge=function(){C(he,0)};function ve(z){R=z,re||(re=!0,ge())}function ue(z,fe){I=C(function(){z(e.unstable_now())},fe)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(z){z.callback=null},e.unstable_continueExecution=function(){_||b||(_=!0,ve(Z))},e.unstable_forceFrameRate=function(z){0>z||125<z?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):ae=0<z?Math.floor(1e3/z):5},e.unstable_getCurrentPriorityLevel=function(){return y},e.unstable_getFirstCallbackNode=function(){return n(f)},e.unstable_next=function(z){switch(y){case 1:case 2:case 3:var fe=3;break;default:fe=y}var ee=y;y=fe;try{return z()}finally{y=ee}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(z,fe){switch(z){case 1:case 2:case 3:case 4:case 5:break;default:z=3}var ee=y;y=z;try{return fe()}finally{y=ee}},e.unstable_scheduleCallback=function(z,fe,ee){var j=e.unstable_now();switch(typeof ee=="object"&&ee!==null?(ee=ee.delay,ee=typeof ee=="number"&&0<ee?j+ee:j):ee=j,z){case 1:var K=-1;break;case 2:K=250;break;case 5:K=1073741823;break;case 4:K=1e4;break;default:K=5e3}return K=ee+K,z={id:m++,callback:fe,priorityLevel:z,startTime:ee,expirationTime:K,sortIndex:-1},ee>j?(z.sortIndex=ee,t(p,z),n(f)===null&&z===n(p)&&(k?(N(I),I=-1):k=!0,ue(B,ee-j))):(z.sortIndex=K,t(f,z),_||b||(_=!0,ve(Z))),z},e.unstable_shouldYield=Ie,e.unstable_wrapCallback=function(z){var fe=y;return function(){var ee=y;y=fe;try{return z.apply(this,arguments)}finally{y=ee}}}})(ef)),ef}var hv;function uE(){return hv||(hv=1,qd.exports=lE()),qd.exports}/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var pv;function cE(){if(pv)return Tn;pv=1;var e=bh(),t=uE();function n(r){for(var o="https://reactjs.org/docs/error-decoder.html?invariant="+r,a=1;a<arguments.length;a++)o+="&args[]="+encodeURIComponent(arguments[a]);return"Minified React error #"+r+"; visit "+o+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,s={};function l(r,o){u(r,o),u(r+"Capture",o)}function u(r,o){for(s[r]=o,r=0;r<o.length;r++)i.add(o[r])}var d=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),f=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,m={},g={};function y(r){return f.call(g,r)?!0:f.call(m,r)?!1:p.test(r)?g[r]=!0:(m[r]=!0,!1)}function b(r,o,a,c){if(a!==null&&a.type===0)return!1;switch(typeof o){case"function":case"symbol":return!0;case"boolean":return c?!1:a!==null?!a.acceptsBooleans:(r=r.toLowerCase().slice(0,5),r!=="data-"&&r!=="aria-");default:return!1}}function _(r,o,a,c){if(o===null||typeof o>"u"||b(r,o,a,c))return!0;if(c)return!1;if(a!==null)switch(a.type){case 3:return!o;case 4:return o===!1;case 5:return isNaN(o);case 6:return isNaN(o)||1>o}return!1}function k(r,o,a,c,h,v,w){this.acceptsBooleans=o===2||o===3||o===4,this.attributeName=c,this.attributeNamespace=h,this.mustUseProperty=a,this.propertyName=r,this.type=o,this.sanitizeURL=v,this.removeEmptyString=w}var C={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(r){C[r]=new k(r,0,!1,r,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(r){var o=r[0];C[o]=new k(o,1,!1,r[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(r){C[r]=new k(r,2,!1,r.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(r){C[r]=new k(r,2,!1,r,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(r){C[r]=new k(r,3,!1,r.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(r){C[r]=new k(r,3,!0,r,null,!1,!1)}),["capture","download"].forEach(function(r){C[r]=new k(r,4,!1,r,null,!1,!1)}),["cols","rows","size","span"].forEach(function(r){C[r]=new k(r,6,!1,r,null,!1,!1)}),["rowSpan","start"].forEach(function(r){C[r]=new k(r,5,!1,r.toLowerCase(),null,!1,!1)});var N=/[\-:]([a-z])/g;function M(r){return r[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(r){var o=r.replace(N,M);C[o]=new k(o,1,!1,r,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(r){var o=r.replace(N,M);C[o]=new k(o,1,!1,r,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(r){var o=r.replace(N,M);C[o]=new k(o,1,!1,r,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(r){C[r]=new k(r,1,!1,r.toLowerCase(),null,!1,!1)}),C.xlinkHref=new k("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(r){C[r]=new k(r,1,!1,r.toLowerCase(),null,!0,!0)});function O(r,o,a,c){var h=C.hasOwnProperty(o)?C[o]:null;(h!==null?h.type!==0:c||!(2<o.length)||o[0]!=="o"&&o[0]!=="O"||o[1]!=="n"&&o[1]!=="N")&&(_(o,a,h,c)&&(a=null),c||h===null?y(o)&&(a===null?r.removeAttribute(o):r.setAttribute(o,""+a)):h.mustUseProperty?r[h.propertyName]=a===null?h.type===3?!1:"":a:(o=h.attributeName,c=h.attributeNamespace,a===null?r.removeAttribute(o):(h=h.type,a=h===3||h===4&&a===!0?"":""+a,c?r.setAttributeNS(c,o,a):r.setAttribute(o,a))))}var B=e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Z=Symbol.for("react.element"),re=Symbol.for("react.portal"),R=Symbol.for("react.fragment"),I=Symbol.for("react.strict_mode"),ae=Symbol.for("react.profiler"),le=Symbol.for("react.provider"),Ie=Symbol.for("react.context"),he=Symbol.for("react.forward_ref"),ge=Symbol.for("react.suspense"),Ne=Symbol.for("react.suspense_list"),Le=Symbol.for("react.memo"),ve=Symbol.for("react.lazy"),ue=Symbol.for("react.offscreen"),z=Symbol.iterator;function fe(r){return r===null||typeof r!="object"?null:(r=z&&r[z]||r["@@iterator"],typeof r=="function"?r:null)}var ee=Object.assign,j;function K(r){if(j===void 0)try{throw Error()}catch(a){var o=a.stack.trim().match(/\n( *(at )?)/);j=o&&o[1]||""}return`
`+j+r}var q=!1;function ce(r,o){if(!r||q)return"";q=!0;var a=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(o)if(o=function(){throw Error()},Object.defineProperty(o.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(o,[])}catch(W){var c=W}Reflect.construct(r,[],o)}else{try{o.call()}catch(W){c=W}r.call(o.prototype)}else{try{throw Error()}catch(W){c=W}r()}}catch(W){if(W&&c&&typeof W.stack=="string"){for(var h=W.stack.split(`
`),v=c.stack.split(`
`),w=h.length-1,E=v.length-1;1<=w&&0<=E&&h[w]!==v[E];)E--;for(;1<=w&&0<=E;w--,E--)if(h[w]!==v[E]){if(w!==1||E!==1)do if(w--,E--,0>E||h[w]!==v[E]){var D=`
`+h[w].replace(" at new "," at ");return r.displayName&&D.includes("<anonymous>")&&(D=D.replace("<anonymous>",r.displayName)),D}while(1<=w&&0<=E);break}}}finally{q=!1,Error.prepareStackTrace=a}return(r=r?r.displayName||r.name:"")?K(r):""}function me(r){switch(r.tag){case 5:return K(r.type);case 16:return K("Lazy");case 13:return K("Suspense");case 19:return K("SuspenseList");case 0:case 2:case 15:return r=ce(r.type,!1),r;case 11:return r=ce(r.type.render,!1),r;case 1:return r=ce(r.type,!0),r;default:return""}}function je(r){if(r==null)return null;if(typeof r=="function")return r.displayName||r.name||null;if(typeof r=="string")return r;switch(r){case R:return"Fragment";case re:return"Portal";case ae:return"Profiler";case I:return"StrictMode";case ge:return"Suspense";case Ne:return"SuspenseList"}if(typeof r=="object")switch(r.$$typeof){case Ie:return(r.displayName||"Context")+".Consumer";case le:return(r._context.displayName||"Context")+".Provider";case he:var o=r.render;return r=r.displayName,r||(r=o.displayName||o.name||"",r=r!==""?"ForwardRef("+r+")":"ForwardRef"),r;case Le:return o=r.displayName||null,o!==null?o:je(r.type)||"Memo";case ve:o=r._payload,r=r._init;try{return je(r(o))}catch{}}return null}function Ee(r){var o=r.type;switch(r.tag){case 24:return"Cache";case 9:return(o.displayName||"Context")+".Consumer";case 10:return(o._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return r=o.render,r=r.displayName||r.name||"",o.displayName||(r!==""?"ForwardRef("+r+")":"ForwardRef");case 7:return"Fragment";case 5:return o;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return je(o);case 8:return o===I?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof o=="function")return o.displayName||o.name||null;if(typeof o=="string")return o}return null}function Se(r){switch(typeof r){case"boolean":case"number":case"string":case"undefined":return r;case"object":return r;default:return""}}function He(r){var o=r.type;return(r=r.nodeName)&&r.toLowerCase()==="input"&&(o==="checkbox"||o==="radio")}function st(r){var o=He(r)?"checked":"value",a=Object.getOwnPropertyDescriptor(r.constructor.prototype,o),c=""+r[o];if(!r.hasOwnProperty(o)&&typeof a<"u"&&typeof a.get=="function"&&typeof a.set=="function"){var h=a.get,v=a.set;return Object.defineProperty(r,o,{configurable:!0,get:function(){return h.call(this)},set:function(w){c=""+w,v.call(this,w)}}),Object.defineProperty(r,o,{enumerable:a.enumerable}),{getValue:function(){return c},setValue:function(w){c=""+w},stopTracking:function(){r._valueTracker=null,delete r[o]}}}}function on(r){r._valueTracker||(r._valueTracker=st(r))}function et(r){if(!r)return!1;var o=r._valueTracker;if(!o)return!0;var a=o.getValue(),c="";return r&&(c=He(r)?r.checked?"true":"false":r.value),r=c,r!==a?(o.setValue(r),!0):!1}function vn(r){if(r=r||(typeof document<"u"?document:void 0),typeof r>"u")return null;try{return r.activeElement||r.body}catch{return r.body}}function On(r,o){var a=o.checked;return ee({},o,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:a??r._wrapperState.initialChecked})}function jr(r,o){var a=o.defaultValue==null?"":o.defaultValue,c=o.checked!=null?o.checked:o.defaultChecked;a=Se(o.value!=null?o.value:a),r._wrapperState={initialChecked:c,initialValue:a,controlled:o.type==="checkbox"||o.type==="radio"?o.checked!=null:o.value!=null}}function yn(r,o){o=o.checked,o!=null&&O(r,"checked",o,!1)}function zn(r,o){yn(r,o);var a=Se(o.value),c=o.type;if(a!=null)c==="number"?(a===0&&r.value===""||r.value!=a)&&(r.value=""+a):r.value!==""+a&&(r.value=""+a);else if(c==="submit"||c==="reset"){r.removeAttribute("value");return}o.hasOwnProperty("value")?Wt(r,o.type,a):o.hasOwnProperty("defaultValue")&&Wt(r,o.type,Se(o.defaultValue)),o.checked==null&&o.defaultChecked!=null&&(r.defaultChecked=!!o.defaultChecked)}function ro(r,o,a){if(o.hasOwnProperty("value")||o.hasOwnProperty("defaultValue")){var c=o.type;if(!(c!=="submit"&&c!=="reset"||o.value!==void 0&&o.value!==null))return;o=""+r._wrapperState.initialValue,a||o===r.value||(r.value=o),r.defaultValue=o}a=r.name,a!==""&&(r.name=""),r.defaultChecked=!!r._wrapperState.initialChecked,a!==""&&(r.name=a)}function Wt(r,o,a){(o!=="number"||vn(r.ownerDocument)!==r)&&(a==null?r.defaultValue=""+r._wrapperState.initialValue:r.defaultValue!==""+a&&(r.defaultValue=""+a))}var P=Array.isArray;function V(r,o,a,c){if(r=r.options,o){o={};for(var h=0;h<a.length;h++)o["$"+a[h]]=!0;for(a=0;a<r.length;a++)h=o.hasOwnProperty("$"+r[a].value),r[a].selected!==h&&(r[a].selected=h),h&&c&&(r[a].defaultSelected=!0)}else{for(a=""+Se(a),o=null,h=0;h<r.length;h++){if(r[h].value===a){r[h].selected=!0,c&&(r[h].defaultSelected=!0);return}o!==null||r[h].disabled||(o=r[h])}o!==null&&(o.selected=!0)}}function H(r,o){if(o.dangerouslySetInnerHTML!=null)throw Error(n(91));return ee({},o,{value:void 0,defaultValue:void 0,children:""+r._wrapperState.initialValue})}function de(r,o){var a=o.value;if(a==null){if(a=o.children,o=o.defaultValue,a!=null){if(o!=null)throw Error(n(92));if(P(a)){if(1<a.length)throw Error(n(93));a=a[0]}o=a}o==null&&(o=""),a=o}r._wrapperState={initialValue:Se(a)}}function oe(r,o){var a=Se(o.value),c=Se(o.defaultValue);a!=null&&(a=""+a,a!==r.value&&(r.value=a),o.defaultValue==null&&r.defaultValue!==a&&(r.defaultValue=a)),c!=null&&(r.defaultValue=""+c)}function te(r){var o=r.textContent;o===r._wrapperState.initialValue&&o!==""&&o!==null&&(r.value=o)}function be(r){switch(r){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ke(r,o){return r==null||r==="http://www.w3.org/1999/xhtml"?be(o):r==="http://www.w3.org/2000/svg"&&o==="foreignObject"?"http://www.w3.org/1999/xhtml":r}var Ze,at=(function(r){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(o,a,c,h){MSApp.execUnsafeLocalFunction(function(){return r(o,a,c,h)})}:r})(function(r,o){if(r.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in r)r.innerHTML=o;else{for(Ze=Ze||document.createElement("div"),Ze.innerHTML="<svg>"+o.valueOf().toString()+"</svg>",o=Ze.firstChild;r.firstChild;)r.removeChild(r.firstChild);for(;o.firstChild;)r.appendChild(o.firstChild)}});function zt(r,o){if(o){var a=r.firstChild;if(a&&a===r.lastChild&&a.nodeType===3){a.nodeValue=o;return}}r.textContent=o}var Pt={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Gn=["Webkit","ms","Moz","O"];Object.keys(Pt).forEach(function(r){Gn.forEach(function(o){o=o+r.charAt(0).toUpperCase()+r.substring(1),Pt[o]=Pt[r]})});function sn(r,o,a){return o==null||typeof o=="boolean"||o===""?"":a||typeof o!="number"||o===0||Pt.hasOwnProperty(r)&&Pt[r]?(""+o).trim():o+"px"}function ur(r,o){r=r.style;for(var a in o)if(o.hasOwnProperty(a)){var c=a.indexOf("--")===0,h=sn(a,o[a],c);a==="float"&&(a="cssFloat"),c?r.setProperty(a,h):r[a]=h}}var Lr=ee({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Yn(r,o){if(o){if(Lr[r]&&(o.children!=null||o.dangerouslySetInnerHTML!=null))throw Error(n(137,r));if(o.dangerouslySetInnerHTML!=null){if(o.children!=null)throw Error(n(60));if(typeof o.dangerouslySetInnerHTML!="object"||!("__html"in o.dangerouslySetInnerHTML))throw Error(n(61))}if(o.style!=null&&typeof o.style!="object")throw Error(n(62))}}function Or(r,o){if(r.indexOf("-")===-1)return typeof o.is=="string";switch(r){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var In=null;function an(r){return r=r.target||r.srcElement||window,r.correspondingUseElement&&(r=r.correspondingUseElement),r.nodeType===3?r.parentNode:r}var oo=null,Xn=null,Fn=null;function Fo(r){if(r=Is(r)){if(typeof oo!="function")throw Error(n(280));var o=r.stateNode;o&&(o=cl(o),oo(r.stateNode,r.type,o))}}function $e(r){Xn?Fn?Fn.push(r):Fn=[r]:Xn=r}function bt(){if(Xn){var r=Xn,o=Fn;if(Fn=Xn=null,Fo(r),o)for(r=0;r<o.length;r++)Fo(o[r])}}function Tt(r,o){return r(o)}function Mt(){}var Vn=!1;function Rt(r,o,a){if(Vn)return r(o,a);Vn=!0;try{return Tt(r,o,a)}finally{Vn=!1,(Xn!==null||Fn!==null)&&(Mt(),bt())}}function It(r,o){var a=r.stateNode;if(a===null)return null;var c=cl(a);if(c===null)return null;a=c[o];e:switch(o){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(c=!c.disabled)||(r=r.type,c=!(r==="button"||r==="input"||r==="select"||r==="textarea")),r=!c;break e;default:r=!1}if(r)return null;if(a&&typeof a!="function")throw Error(n(231,o,typeof a));return a}var T=!1;if(d)try{var L={};Object.defineProperty(L,"passive",{get:function(){T=!0}}),window.addEventListener("test",L,L),window.removeEventListener("test",L,L)}catch{T=!1}function U(r,o,a,c,h,v,w,E,D){var W=Array.prototype.slice.call(arguments,3);try{o.apply(a,W)}catch(J){this.onError(J)}}var Y=!1,se=null,Ae=!1,Fe=null,_e={onError:function(r){Y=!0,se=r}};function Re(r,o,a,c,h,v,w,E,D){Y=!1,se=null,U.apply(_e,arguments)}function we(r,o,a,c,h,v,w,E,D){if(Re.apply(this,arguments),Y){if(Y){var W=se;Y=!1,se=null}else throw Error(n(198));Ae||(Ae=!0,Fe=W)}}function ke(r){var o=r,a=r;if(r.alternate)for(;o.return;)o=o.return;else{r=o;do o=r,(o.flags&4098)!==0&&(a=o.return),r=o.return;while(r)}return o.tag===3?a:null}function We(r){if(r.tag===13){var o=r.memoizedState;if(o===null&&(r=r.alternate,r!==null&&(o=r.memoizedState)),o!==null)return o.dehydrated}return null}function Qe(r){if(ke(r)!==r)throw Error(n(188))}function Zt(r){var o=r.alternate;if(!o){if(o=ke(r),o===null)throw Error(n(188));return o!==r?null:r}for(var a=r,c=o;;){var h=a.return;if(h===null)break;var v=h.alternate;if(v===null){if(c=h.return,c!==null){a=c;continue}break}if(h.child===v.child){for(v=h.child;v;){if(v===a)return Qe(h),r;if(v===c)return Qe(h),o;v=v.sibling}throw Error(n(188))}if(a.return!==c.return)a=h,c=v;else{for(var w=!1,E=h.child;E;){if(E===a){w=!0,a=h,c=v;break}if(E===c){w=!0,c=h,a=v;break}E=E.sibling}if(!w){for(E=v.child;E;){if(E===a){w=!0,a=v,c=h;break}if(E===c){w=!0,c=v,a=h;break}E=E.sibling}if(!w)throw Error(n(189))}}if(a.alternate!==c)throw Error(n(190))}if(a.tag!==3)throw Error(n(188));return a.stateNode.current===a?r:o}function lt(r){return r=Zt(r),r!==null?qe(r):null}function qe(r){if(r.tag===5||r.tag===6)return r;for(r=r.child;r!==null;){var o=qe(r);if(o!==null)return o;r=r.sibling}return null}var mt=t.unstable_scheduleCallback,zr=t.unstable_cancelCallback,Vo=t.unstable_shouldYield,cr=t.unstable_requestPaint,nt=t.unstable_now,ws=t.unstable_getCurrentPriorityLevel,Ir=t.unstable_ImmediatePriority,kr=t.unstable_UserBlockingPriority,Fr=t.unstable_NormalPriority,Si=t.unstable_LowPriority,Je=t.unstable_IdlePriority,ft=null,ln=null;function $o(r){if(ln&&typeof ln.onCommitFiberRoot=="function")try{ln.onCommitFiberRoot(ft,r,void 0,(r.current.flags&128)===128)}catch{}}var rt=Math.clz32?Math.clz32:pc,io=Math.log,Za=Math.LN2;function pc(r){return r>>>=0,r===0?32:31-(io(r)/Za|0)|0}var Ha=64,Ka=4194304;function xs(r){switch(r&-r){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return r&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return r&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return r}}function Ga(r,o){var a=r.pendingLanes;if(a===0)return 0;var c=0,h=r.suspendedLanes,v=r.pingedLanes,w=a&268435455;if(w!==0){var E=w&~h;E!==0?c=xs(E):(v&=w,v!==0&&(c=xs(v)))}else w=a&~h,w!==0?c=xs(w):v!==0&&(c=xs(v));if(c===0)return 0;if(o!==0&&o!==c&&(o&h)===0&&(h=c&-c,v=o&-o,h>=v||h===16&&(v&4194240)!==0))return o;if((c&4)!==0&&(c|=a&16),o=r.entangledLanes,o!==0)for(r=r.entanglements,o&=c;0<o;)a=31-rt(o),h=1<<a,c|=r[a],o&=~h;return c}function eb(r,o){switch(r){case 1:case 2:case 4:return o+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return o+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function tb(r,o){for(var a=r.suspendedLanes,c=r.pingedLanes,h=r.expirationTimes,v=r.pendingLanes;0<v;){var w=31-rt(v),E=1<<w,D=h[w];D===-1?((E&a)===0||(E&c)!==0)&&(h[w]=eb(E,o)):D<=o&&(r.expiredLanes|=E),v&=~E}}function mc(r){return r=r.pendingLanes&-1073741825,r!==0?r:r&1073741824?1073741824:0}function Mp(){var r=Ha;return Ha<<=1,(Ha&4194240)===0&&(Ha=64),r}function gc(r){for(var o=[],a=0;31>a;a++)o.push(r);return o}function Ss(r,o,a){r.pendingLanes|=o,o!==536870912&&(r.suspendedLanes=0,r.pingedLanes=0),r=r.eventTimes,o=31-rt(o),r[o]=a}function nb(r,o){var a=r.pendingLanes&~o;r.pendingLanes=o,r.suspendedLanes=0,r.pingedLanes=0,r.expiredLanes&=o,r.mutableReadLanes&=o,r.entangledLanes&=o,o=r.entanglements;var c=r.eventTimes;for(r=r.expirationTimes;0<a;){var h=31-rt(a),v=1<<h;o[h]=0,c[h]=-1,r[h]=-1,a&=~v}}function vc(r,o){var a=r.entangledLanes|=o;for(r=r.entanglements;a;){var c=31-rt(a),h=1<<c;h&o|r[c]&o&&(r[c]|=o),a&=~h}}var ut=0;function jp(r){return r&=-r,1<r?4<r?(r&268435455)!==0?16:536870912:4:1}var Lp,yc,Op,zp,Ip,wc=!1,Ya=[],so=null,ao=null,lo=null,bs=new Map,ks=new Map,uo=[],rb="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Fp(r,o){switch(r){case"focusin":case"focusout":so=null;break;case"dragenter":case"dragleave":ao=null;break;case"mouseover":case"mouseout":lo=null;break;case"pointerover":case"pointerout":bs.delete(o.pointerId);break;case"gotpointercapture":case"lostpointercapture":ks.delete(o.pointerId)}}function Es(r,o,a,c,h,v){return r===null||r.nativeEvent!==v?(r={blockedOn:o,domEventName:a,eventSystemFlags:c,nativeEvent:v,targetContainers:[h]},o!==null&&(o=Is(o),o!==null&&yc(o)),r):(r.eventSystemFlags|=c,o=r.targetContainers,h!==null&&o.indexOf(h)===-1&&o.push(h),r)}function ob(r,o,a,c,h){switch(o){case"focusin":return so=Es(so,r,o,a,c,h),!0;case"dragenter":return ao=Es(ao,r,o,a,c,h),!0;case"mouseover":return lo=Es(lo,r,o,a,c,h),!0;case"pointerover":var v=h.pointerId;return bs.set(v,Es(bs.get(v)||null,r,o,a,c,h)),!0;case"gotpointercapture":return v=h.pointerId,ks.set(v,Es(ks.get(v)||null,r,o,a,c,h)),!0}return!1}function Vp(r){var o=Uo(r.target);if(o!==null){var a=ke(o);if(a!==null){if(o=a.tag,o===13){if(o=We(a),o!==null){r.blockedOn=o,Ip(r.priority,function(){Op(a)});return}}else if(o===3&&a.stateNode.current.memoizedState.isDehydrated){r.blockedOn=a.tag===3?a.stateNode.containerInfo:null;return}}}r.blockedOn=null}function Xa(r){if(r.blockedOn!==null)return!1;for(var o=r.targetContainers;0<o.length;){var a=Sc(r.domEventName,r.eventSystemFlags,o[0],r.nativeEvent);if(a===null){a=r.nativeEvent;var c=new a.constructor(a.type,a);In=c,a.target.dispatchEvent(c),In=null}else return o=Is(a),o!==null&&yc(o),r.blockedOn=a,!1;o.shift()}return!0}function $p(r,o,a){Xa(r)&&a.delete(o)}function ib(){wc=!1,so!==null&&Xa(so)&&(so=null),ao!==null&&Xa(ao)&&(ao=null),lo!==null&&Xa(lo)&&(lo=null),bs.forEach($p),ks.forEach($p)}function _s(r,o){r.blockedOn===o&&(r.blockedOn=null,wc||(wc=!0,t.unstable_scheduleCallback(t.unstable_NormalPriority,ib)))}function Cs(r){function o(h){return _s(h,r)}if(0<Ya.length){_s(Ya[0],r);for(var a=1;a<Ya.length;a++){var c=Ya[a];c.blockedOn===r&&(c.blockedOn=null)}}for(so!==null&&_s(so,r),ao!==null&&_s(ao,r),lo!==null&&_s(lo,r),bs.forEach(o),ks.forEach(o),a=0;a<uo.length;a++)c=uo[a],c.blockedOn===r&&(c.blockedOn=null);for(;0<uo.length&&(a=uo[0],a.blockedOn===null);)Vp(a),a.blockedOn===null&&uo.shift()}var bi=B.ReactCurrentBatchConfig,Qa=!0;function sb(r,o,a,c){var h=ut,v=bi.transition;bi.transition=null;try{ut=1,xc(r,o,a,c)}finally{ut=h,bi.transition=v}}function ab(r,o,a,c){var h=ut,v=bi.transition;bi.transition=null;try{ut=4,xc(r,o,a,c)}finally{ut=h,bi.transition=v}}function xc(r,o,a,c){if(Qa){var h=Sc(r,o,a,c);if(h===null)Ic(r,o,c,Ja,a),Fp(r,c);else if(ob(h,r,o,a,c))c.stopPropagation();else if(Fp(r,c),o&4&&-1<rb.indexOf(r)){for(;h!==null;){var v=Is(h);if(v!==null&&Lp(v),v=Sc(r,o,a,c),v===null&&Ic(r,o,c,Ja,a),v===h)break;h=v}h!==null&&c.stopPropagation()}else Ic(r,o,c,null,a)}}var Ja=null;function Sc(r,o,a,c){if(Ja=null,r=an(c),r=Uo(r),r!==null)if(o=ke(r),o===null)r=null;else if(a=o.tag,a===13){if(r=We(o),r!==null)return r;r=null}else if(a===3){if(o.stateNode.current.memoizedState.isDehydrated)return o.tag===3?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null);return Ja=r,null}function Up(r){switch(r){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(ws()){case Ir:return 1;case kr:return 4;case Fr:case Si:return 16;case Je:return 536870912;default:return 16}default:return 16}}var co=null,bc=null,qa=null;function Bp(){if(qa)return qa;var r,o=bc,a=o.length,c,h="value"in co?co.value:co.textContent,v=h.length;for(r=0;r<a&&o[r]===h[r];r++);var w=a-r;for(c=1;c<=w&&o[a-c]===h[v-c];c++);return qa=h.slice(r,1<c?1-c:void 0)}function el(r){var o=r.keyCode;return"charCode"in r?(r=r.charCode,r===0&&o===13&&(r=13)):r=o,r===10&&(r=13),32<=r||r===13?r:0}function tl(){return!0}function Wp(){return!1}function $n(r){function o(a,c,h,v,w){this._reactName=a,this._targetInst=h,this.type=c,this.nativeEvent=v,this.target=w,this.currentTarget=null;for(var E in r)r.hasOwnProperty(E)&&(a=r[E],this[E]=a?a(v):v[E]);return this.isDefaultPrevented=(v.defaultPrevented!=null?v.defaultPrevented:v.returnValue===!1)?tl:Wp,this.isPropagationStopped=Wp,this}return ee(o.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():typeof a.returnValue!="unknown"&&(a.returnValue=!1),this.isDefaultPrevented=tl)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():typeof a.cancelBubble!="unknown"&&(a.cancelBubble=!0),this.isPropagationStopped=tl)},persist:function(){},isPersistent:tl}),o}var ki={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(r){return r.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},kc=$n(ki),Ps=ee({},ki,{view:0,detail:0}),lb=$n(Ps),Ec,_c,Ts,nl=ee({},Ps,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Pc,button:0,buttons:0,relatedTarget:function(r){return r.relatedTarget===void 0?r.fromElement===r.srcElement?r.toElement:r.fromElement:r.relatedTarget},movementX:function(r){return"movementX"in r?r.movementX:(r!==Ts&&(Ts&&r.type==="mousemove"?(Ec=r.screenX-Ts.screenX,_c=r.screenY-Ts.screenY):_c=Ec=0,Ts=r),Ec)},movementY:function(r){return"movementY"in r?r.movementY:_c}}),Zp=$n(nl),ub=ee({},nl,{dataTransfer:0}),cb=$n(ub),db=ee({},Ps,{relatedTarget:0}),Cc=$n(db),fb=ee({},ki,{animationName:0,elapsedTime:0,pseudoElement:0}),hb=$n(fb),pb=ee({},ki,{clipboardData:function(r){return"clipboardData"in r?r.clipboardData:window.clipboardData}}),mb=$n(pb),gb=ee({},ki,{data:0}),Hp=$n(gb),vb={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},yb={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},wb={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xb(r){var o=this.nativeEvent;return o.getModifierState?o.getModifierState(r):(r=wb[r])?!!o[r]:!1}function Pc(){return xb}var Sb=ee({},Ps,{key:function(r){if(r.key){var o=vb[r.key]||r.key;if(o!=="Unidentified")return o}return r.type==="keypress"?(r=el(r),r===13?"Enter":String.fromCharCode(r)):r.type==="keydown"||r.type==="keyup"?yb[r.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Pc,charCode:function(r){return r.type==="keypress"?el(r):0},keyCode:function(r){return r.type==="keydown"||r.type==="keyup"?r.keyCode:0},which:function(r){return r.type==="keypress"?el(r):r.type==="keydown"||r.type==="keyup"?r.keyCode:0}}),bb=$n(Sb),kb=ee({},nl,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Kp=$n(kb),Eb=ee({},Ps,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Pc}),_b=$n(Eb),Cb=ee({},ki,{propertyName:0,elapsedTime:0,pseudoElement:0}),Pb=$n(Cb),Tb=ee({},nl,{deltaX:function(r){return"deltaX"in r?r.deltaX:"wheelDeltaX"in r?-r.wheelDeltaX:0},deltaY:function(r){return"deltaY"in r?r.deltaY:"wheelDeltaY"in r?-r.wheelDeltaY:"wheelDelta"in r?-r.wheelDelta:0},deltaZ:0,deltaMode:0}),Rb=$n(Tb),Db=[9,13,27,32],Tc=d&&"CompositionEvent"in window,Rs=null;d&&"documentMode"in document&&(Rs=document.documentMode);var Nb=d&&"TextEvent"in window&&!Rs,Gp=d&&(!Tc||Rs&&8<Rs&&11>=Rs),Yp=" ",Xp=!1;function Qp(r,o){switch(r){case"keyup":return Db.indexOf(o.keyCode)!==-1;case"keydown":return o.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Jp(r){return r=r.detail,typeof r=="object"&&"data"in r?r.data:null}var Ei=!1;function Ab(r,o){switch(r){case"compositionend":return Jp(o);case"keypress":return o.which!==32?null:(Xp=!0,Yp);case"textInput":return r=o.data,r===Yp&&Xp?null:r;default:return null}}function Mb(r,o){if(Ei)return r==="compositionend"||!Tc&&Qp(r,o)?(r=Bp(),qa=bc=co=null,Ei=!1,r):null;switch(r){case"paste":return null;case"keypress":if(!(o.ctrlKey||o.altKey||o.metaKey)||o.ctrlKey&&o.altKey){if(o.char&&1<o.char.length)return o.char;if(o.which)return String.fromCharCode(o.which)}return null;case"compositionend":return Gp&&o.locale!=="ko"?null:o.data;default:return null}}var jb={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qp(r){var o=r&&r.nodeName&&r.nodeName.toLowerCase();return o==="input"?!!jb[r.type]:o==="textarea"}function em(r,o,a,c){$e(c),o=al(o,"onChange"),0<o.length&&(a=new kc("onChange","change",null,a,c),r.push({event:a,listeners:o}))}var Ds=null,Ns=null;function Lb(r){ym(r,0)}function rl(r){var o=Ri(r);if(et(o))return r}function Ob(r,o){if(r==="change")return o}var tm=!1;if(d){var Rc;if(d){var Dc="oninput"in document;if(!Dc){var nm=document.createElement("div");nm.setAttribute("oninput","return;"),Dc=typeof nm.oninput=="function"}Rc=Dc}else Rc=!1;tm=Rc&&(!document.documentMode||9<document.documentMode)}function rm(){Ds&&(Ds.detachEvent("onpropertychange",om),Ns=Ds=null)}function om(r){if(r.propertyName==="value"&&rl(Ns)){var o=[];em(o,Ns,r,an(r)),Rt(Lb,o)}}function zb(r,o,a){r==="focusin"?(rm(),Ds=o,Ns=a,Ds.attachEvent("onpropertychange",om)):r==="focusout"&&rm()}function Ib(r){if(r==="selectionchange"||r==="keyup"||r==="keydown")return rl(Ns)}function Fb(r,o){if(r==="click")return rl(o)}function Vb(r,o){if(r==="input"||r==="change")return rl(o)}function $b(r,o){return r===o&&(r!==0||1/r===1/o)||r!==r&&o!==o}var dr=typeof Object.is=="function"?Object.is:$b;function As(r,o){if(dr(r,o))return!0;if(typeof r!="object"||r===null||typeof o!="object"||o===null)return!1;var a=Object.keys(r),c=Object.keys(o);if(a.length!==c.length)return!1;for(c=0;c<a.length;c++){var h=a[c];if(!f.call(o,h)||!dr(r[h],o[h]))return!1}return!0}function im(r){for(;r&&r.firstChild;)r=r.firstChild;return r}function sm(r,o){var a=im(r);r=0;for(var c;a;){if(a.nodeType===3){if(c=r+a.textContent.length,r<=o&&c>=o)return{node:a,offset:o-r};r=c}e:{for(;a;){if(a.nextSibling){a=a.nextSibling;break e}a=a.parentNode}a=void 0}a=im(a)}}function am(r,o){return r&&o?r===o?!0:r&&r.nodeType===3?!1:o&&o.nodeType===3?am(r,o.parentNode):"contains"in r?r.contains(o):r.compareDocumentPosition?!!(r.compareDocumentPosition(o)&16):!1:!1}function lm(){for(var r=window,o=vn();o instanceof r.HTMLIFrameElement;){try{var a=typeof o.contentWindow.location.href=="string"}catch{a=!1}if(a)r=o.contentWindow;else break;o=vn(r.document)}return o}function Nc(r){var o=r&&r.nodeName&&r.nodeName.toLowerCase();return o&&(o==="input"&&(r.type==="text"||r.type==="search"||r.type==="tel"||r.type==="url"||r.type==="password")||o==="textarea"||r.contentEditable==="true")}function Ub(r){var o=lm(),a=r.focusedElem,c=r.selectionRange;if(o!==a&&a&&a.ownerDocument&&am(a.ownerDocument.documentElement,a)){if(c!==null&&Nc(a)){if(o=c.start,r=c.end,r===void 0&&(r=o),"selectionStart"in a)a.selectionStart=o,a.selectionEnd=Math.min(r,a.value.length);else if(r=(o=a.ownerDocument||document)&&o.defaultView||window,r.getSelection){r=r.getSelection();var h=a.textContent.length,v=Math.min(c.start,h);c=c.end===void 0?v:Math.min(c.end,h),!r.extend&&v>c&&(h=c,c=v,v=h),h=sm(a,v);var w=sm(a,c);h&&w&&(r.rangeCount!==1||r.anchorNode!==h.node||r.anchorOffset!==h.offset||r.focusNode!==w.node||r.focusOffset!==w.offset)&&(o=o.createRange(),o.setStart(h.node,h.offset),r.removeAllRanges(),v>c?(r.addRange(o),r.extend(w.node,w.offset)):(o.setEnd(w.node,w.offset),r.addRange(o)))}}for(o=[],r=a;r=r.parentNode;)r.nodeType===1&&o.push({element:r,left:r.scrollLeft,top:r.scrollTop});for(typeof a.focus=="function"&&a.focus(),a=0;a<o.length;a++)r=o[a],r.element.scrollLeft=r.left,r.element.scrollTop=r.top}}var Bb=d&&"documentMode"in document&&11>=document.documentMode,_i=null,Ac=null,Ms=null,Mc=!1;function um(r,o,a){var c=a.window===a?a.document:a.nodeType===9?a:a.ownerDocument;Mc||_i==null||_i!==vn(c)||(c=_i,"selectionStart"in c&&Nc(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset}),Ms&&As(Ms,c)||(Ms=c,c=al(Ac,"onSelect"),0<c.length&&(o=new kc("onSelect","select",null,o,a),r.push({event:o,listeners:c}),o.target=_i)))}function ol(r,o){var a={};return a[r.toLowerCase()]=o.toLowerCase(),a["Webkit"+r]="webkit"+o,a["Moz"+r]="moz"+o,a}var Ci={animationend:ol("Animation","AnimationEnd"),animationiteration:ol("Animation","AnimationIteration"),animationstart:ol("Animation","AnimationStart"),transitionend:ol("Transition","TransitionEnd")},jc={},cm={};d&&(cm=document.createElement("div").style,"AnimationEvent"in window||(delete Ci.animationend.animation,delete Ci.animationiteration.animation,delete Ci.animationstart.animation),"TransitionEvent"in window||delete Ci.transitionend.transition);function il(r){if(jc[r])return jc[r];if(!Ci[r])return r;var o=Ci[r],a;for(a in o)if(o.hasOwnProperty(a)&&a in cm)return jc[r]=o[a];return r}var dm=il("animationend"),fm=il("animationiteration"),hm=il("animationstart"),pm=il("transitionend"),mm=new Map,gm="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function fo(r,o){mm.set(r,o),l(o,[r])}for(var Lc=0;Lc<gm.length;Lc++){var Oc=gm[Lc],Wb=Oc.toLowerCase(),Zb=Oc[0].toUpperCase()+Oc.slice(1);fo(Wb,"on"+Zb)}fo(dm,"onAnimationEnd"),fo(fm,"onAnimationIteration"),fo(hm,"onAnimationStart"),fo("dblclick","onDoubleClick"),fo("focusin","onFocus"),fo("focusout","onBlur"),fo(pm,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var js="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Hb=new Set("cancel close invalid load scroll toggle".split(" ").concat(js));function vm(r,o,a){var c=r.type||"unknown-event";r.currentTarget=a,we(c,o,void 0,r),r.currentTarget=null}function ym(r,o){o=(o&4)!==0;for(var a=0;a<r.length;a++){var c=r[a],h=c.event;c=c.listeners;e:{var v=void 0;if(o)for(var w=c.length-1;0<=w;w--){var E=c[w],D=E.instance,W=E.currentTarget;if(E=E.listener,D!==v&&h.isPropagationStopped())break e;vm(h,E,W),v=D}else for(w=0;w<c.length;w++){if(E=c[w],D=E.instance,W=E.currentTarget,E=E.listener,D!==v&&h.isPropagationStopped())break e;vm(h,E,W),v=D}}}if(Ae)throw r=Fe,Ae=!1,Fe=null,r}function gt(r,o){var a=o[Wc];a===void 0&&(a=o[Wc]=new Set);var c=r+"__bubble";a.has(c)||(wm(o,r,2,!1),a.add(c))}function zc(r,o,a){var c=0;o&&(c|=4),wm(a,r,c,o)}var sl="_reactListening"+Math.random().toString(36).slice(2);function Ls(r){if(!r[sl]){r[sl]=!0,i.forEach(function(a){a!=="selectionchange"&&(Hb.has(a)||zc(a,!1,r),zc(a,!0,r))});var o=r.nodeType===9?r:r.ownerDocument;o===null||o[sl]||(o[sl]=!0,zc("selectionchange",!1,o))}}function wm(r,o,a,c){switch(Up(o)){case 1:var h=sb;break;case 4:h=ab;break;default:h=xc}a=h.bind(null,o,a,r),h=void 0,!T||o!=="touchstart"&&o!=="touchmove"&&o!=="wheel"||(h=!0),c?h!==void 0?r.addEventListener(o,a,{capture:!0,passive:h}):r.addEventListener(o,a,!0):h!==void 0?r.addEventListener(o,a,{passive:h}):r.addEventListener(o,a,!1)}function Ic(r,o,a,c,h){var v=c;if((o&1)===0&&(o&2)===0&&c!==null)e:for(;;){if(c===null)return;var w=c.tag;if(w===3||w===4){var E=c.stateNode.containerInfo;if(E===h||E.nodeType===8&&E.parentNode===h)break;if(w===4)for(w=c.return;w!==null;){var D=w.tag;if((D===3||D===4)&&(D=w.stateNode.containerInfo,D===h||D.nodeType===8&&D.parentNode===h))return;w=w.return}for(;E!==null;){if(w=Uo(E),w===null)return;if(D=w.tag,D===5||D===6){c=v=w;continue e}E=E.parentNode}}c=c.return}Rt(function(){var W=v,J=an(a),ne=[];e:{var X=mm.get(r);if(X!==void 0){var ye=kc,Ce=r;switch(r){case"keypress":if(el(a)===0)break e;case"keydown":case"keyup":ye=bb;break;case"focusin":Ce="focus",ye=Cc;break;case"focusout":Ce="blur",ye=Cc;break;case"beforeblur":case"afterblur":ye=Cc;break;case"click":if(a.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":ye=Zp;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":ye=cb;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":ye=_b;break;case dm:case fm:case hm:ye=hb;break;case pm:ye=Pb;break;case"scroll":ye=lb;break;case"wheel":ye=Rb;break;case"copy":case"cut":case"paste":ye=mb;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":ye=Kp}var De=(o&4)!==0,jt=!De&&r==="scroll",F=De?X!==null?X+"Capture":null:X;De=[];for(var A=W,$;A!==null;){$=A;var ie=$.stateNode;if($.tag===5&&ie!==null&&($=ie,F!==null&&(ie=It(A,F),ie!=null&&De.push(Os(A,ie,$)))),jt)break;A=A.return}0<De.length&&(X=new ye(X,Ce,null,a,J),ne.push({event:X,listeners:De}))}}if((o&7)===0){e:{if(X=r==="mouseover"||r==="pointerover",ye=r==="mouseout"||r==="pointerout",X&&a!==In&&(Ce=a.relatedTarget||a.fromElement)&&(Uo(Ce)||Ce[Vr]))break e;if((ye||X)&&(X=J.window===J?J:(X=J.ownerDocument)?X.defaultView||X.parentWindow:window,ye?(Ce=a.relatedTarget||a.toElement,ye=W,Ce=Ce?Uo(Ce):null,Ce!==null&&(jt=ke(Ce),Ce!==jt||Ce.tag!==5&&Ce.tag!==6)&&(Ce=null)):(ye=null,Ce=W),ye!==Ce)){if(De=Zp,ie="onMouseLeave",F="onMouseEnter",A="mouse",(r==="pointerout"||r==="pointerover")&&(De=Kp,ie="onPointerLeave",F="onPointerEnter",A="pointer"),jt=ye==null?X:Ri(ye),$=Ce==null?X:Ri(Ce),X=new De(ie,A+"leave",ye,a,J),X.target=jt,X.relatedTarget=$,ie=null,Uo(J)===W&&(De=new De(F,A+"enter",Ce,a,J),De.target=$,De.relatedTarget=jt,ie=De),jt=ie,ye&&Ce)t:{for(De=ye,F=Ce,A=0,$=De;$;$=Pi($))A++;for($=0,ie=F;ie;ie=Pi(ie))$++;for(;0<A-$;)De=Pi(De),A--;for(;0<$-A;)F=Pi(F),$--;for(;A--;){if(De===F||F!==null&&De===F.alternate)break t;De=Pi(De),F=Pi(F)}De=null}else De=null;ye!==null&&xm(ne,X,ye,De,!1),Ce!==null&&jt!==null&&xm(ne,jt,Ce,De,!0)}}e:{if(X=W?Ri(W):window,ye=X.nodeName&&X.nodeName.toLowerCase(),ye==="select"||ye==="input"&&X.type==="file")var Me=Ob;else if(qp(X))if(tm)Me=Vb;else{Me=Ib;var Oe=zb}else(ye=X.nodeName)&&ye.toLowerCase()==="input"&&(X.type==="checkbox"||X.type==="radio")&&(Me=Fb);if(Me&&(Me=Me(r,W))){em(ne,Me,a,J);break e}Oe&&Oe(r,X,W),r==="focusout"&&(Oe=X._wrapperState)&&Oe.controlled&&X.type==="number"&&Wt(X,"number",X.value)}switch(Oe=W?Ri(W):window,r){case"focusin":(qp(Oe)||Oe.contentEditable==="true")&&(_i=Oe,Ac=W,Ms=null);break;case"focusout":Ms=Ac=_i=null;break;case"mousedown":Mc=!0;break;case"contextmenu":case"mouseup":case"dragend":Mc=!1,um(ne,a,J);break;case"selectionchange":if(Bb)break;case"keydown":case"keyup":um(ne,a,J)}var ze;if(Tc)e:{switch(r){case"compositionstart":var Ue="onCompositionStart";break e;case"compositionend":Ue="onCompositionEnd";break e;case"compositionupdate":Ue="onCompositionUpdate";break e}Ue=void 0}else Ei?Qp(r,a)&&(Ue="onCompositionEnd"):r==="keydown"&&a.keyCode===229&&(Ue="onCompositionStart");Ue&&(Gp&&a.locale!=="ko"&&(Ei||Ue!=="onCompositionStart"?Ue==="onCompositionEnd"&&Ei&&(ze=Bp()):(co=J,bc="value"in co?co.value:co.textContent,Ei=!0)),Oe=al(W,Ue),0<Oe.length&&(Ue=new Hp(Ue,r,null,a,J),ne.push({event:Ue,listeners:Oe}),ze?Ue.data=ze:(ze=Jp(a),ze!==null&&(Ue.data=ze)))),(ze=Nb?Ab(r,a):Mb(r,a))&&(W=al(W,"onBeforeInput"),0<W.length&&(J=new Hp("onBeforeInput","beforeinput",null,a,J),ne.push({event:J,listeners:W}),J.data=ze))}ym(ne,o)})}function Os(r,o,a){return{instance:r,listener:o,currentTarget:a}}function al(r,o){for(var a=o+"Capture",c=[];r!==null;){var h=r,v=h.stateNode;h.tag===5&&v!==null&&(h=v,v=It(r,a),v!=null&&c.unshift(Os(r,v,h)),v=It(r,o),v!=null&&c.push(Os(r,v,h))),r=r.return}return c}function Pi(r){if(r===null)return null;do r=r.return;while(r&&r.tag!==5);return r||null}function xm(r,o,a,c,h){for(var v=o._reactName,w=[];a!==null&&a!==c;){var E=a,D=E.alternate,W=E.stateNode;if(D!==null&&D===c)break;E.tag===5&&W!==null&&(E=W,h?(D=It(a,v),D!=null&&w.unshift(Os(a,D,E))):h||(D=It(a,v),D!=null&&w.push(Os(a,D,E)))),a=a.return}w.length!==0&&r.push({event:o,listeners:w})}var Kb=/\r\n?/g,Gb=/\u0000|\uFFFD/g;function Sm(r){return(typeof r=="string"?r:""+r).replace(Kb,`
`).replace(Gb,"")}function ll(r,o,a){if(o=Sm(o),Sm(r)!==o&&a)throw Error(n(425))}function ul(){}var Fc=null,Vc=null;function $c(r,o){return r==="textarea"||r==="noscript"||typeof o.children=="string"||typeof o.children=="number"||typeof o.dangerouslySetInnerHTML=="object"&&o.dangerouslySetInnerHTML!==null&&o.dangerouslySetInnerHTML.__html!=null}var Uc=typeof setTimeout=="function"?setTimeout:void 0,Yb=typeof clearTimeout=="function"?clearTimeout:void 0,bm=typeof Promise=="function"?Promise:void 0,Xb=typeof queueMicrotask=="function"?queueMicrotask:typeof bm<"u"?function(r){return bm.resolve(null).then(r).catch(Qb)}:Uc;function Qb(r){setTimeout(function(){throw r})}function Bc(r,o){var a=o,c=0;do{var h=a.nextSibling;if(r.removeChild(a),h&&h.nodeType===8)if(a=h.data,a==="/$"){if(c===0){r.removeChild(h),Cs(o);return}c--}else a!=="$"&&a!=="$?"&&a!=="$!"||c++;a=h}while(a);Cs(o)}function ho(r){for(;r!=null;r=r.nextSibling){var o=r.nodeType;if(o===1||o===3)break;if(o===8){if(o=r.data,o==="$"||o==="$!"||o==="$?")break;if(o==="/$")return null}}return r}function km(r){r=r.previousSibling;for(var o=0;r;){if(r.nodeType===8){var a=r.data;if(a==="$"||a==="$!"||a==="$?"){if(o===0)return r;o--}else a==="/$"&&o++}r=r.previousSibling}return null}var Ti=Math.random().toString(36).slice(2),Er="__reactFiber$"+Ti,zs="__reactProps$"+Ti,Vr="__reactContainer$"+Ti,Wc="__reactEvents$"+Ti,Jb="__reactListeners$"+Ti,qb="__reactHandles$"+Ti;function Uo(r){var o=r[Er];if(o)return o;for(var a=r.parentNode;a;){if(o=a[Vr]||a[Er]){if(a=o.alternate,o.child!==null||a!==null&&a.child!==null)for(r=km(r);r!==null;){if(a=r[Er])return a;r=km(r)}return o}r=a,a=r.parentNode}return null}function Is(r){return r=r[Er]||r[Vr],!r||r.tag!==5&&r.tag!==6&&r.tag!==13&&r.tag!==3?null:r}function Ri(r){if(r.tag===5||r.tag===6)return r.stateNode;throw Error(n(33))}function cl(r){return r[zs]||null}var Zc=[],Di=-1;function po(r){return{current:r}}function vt(r){0>Di||(r.current=Zc[Di],Zc[Di]=null,Di--)}function ht(r,o){Di++,Zc[Di]=r.current,r.current=o}var mo={},fn=po(mo),kn=po(!1),Bo=mo;function Ni(r,o){var a=r.type.contextTypes;if(!a)return mo;var c=r.stateNode;if(c&&c.__reactInternalMemoizedUnmaskedChildContext===o)return c.__reactInternalMemoizedMaskedChildContext;var h={},v;for(v in a)h[v]=o[v];return c&&(r=r.stateNode,r.__reactInternalMemoizedUnmaskedChildContext=o,r.__reactInternalMemoizedMaskedChildContext=h),h}function En(r){return r=r.childContextTypes,r!=null}function dl(){vt(kn),vt(fn)}function Em(r,o,a){if(fn.current!==mo)throw Error(n(168));ht(fn,o),ht(kn,a)}function _m(r,o,a){var c=r.stateNode;if(o=o.childContextTypes,typeof c.getChildContext!="function")return a;c=c.getChildContext();for(var h in c)if(!(h in o))throw Error(n(108,Ee(r)||"Unknown",h));return ee({},a,c)}function fl(r){return r=(r=r.stateNode)&&r.__reactInternalMemoizedMergedChildContext||mo,Bo=fn.current,ht(fn,r),ht(kn,kn.current),!0}function Cm(r,o,a){var c=r.stateNode;if(!c)throw Error(n(169));a?(r=_m(r,o,Bo),c.__reactInternalMemoizedMergedChildContext=r,vt(kn),vt(fn),ht(fn,r)):vt(kn),ht(kn,a)}var $r=null,hl=!1,Hc=!1;function Pm(r){$r===null?$r=[r]:$r.push(r)}function ek(r){hl=!0,Pm(r)}function go(){if(!Hc&&$r!==null){Hc=!0;var r=0,o=ut;try{var a=$r;for(ut=1;r<a.length;r++){var c=a[r];do c=c(!0);while(c!==null)}$r=null,hl=!1}catch(h){throw $r!==null&&($r=$r.slice(r+1)),mt(Ir,go),h}finally{ut=o,Hc=!1}}return null}var Ai=[],Mi=0,pl=null,ml=0,Qn=[],Jn=0,Wo=null,Ur=1,Br="";function Zo(r,o){Ai[Mi++]=ml,Ai[Mi++]=pl,pl=r,ml=o}function Tm(r,o,a){Qn[Jn++]=Ur,Qn[Jn++]=Br,Qn[Jn++]=Wo,Wo=r;var c=Ur;r=Br;var h=32-rt(c)-1;c&=~(1<<h),a+=1;var v=32-rt(o)+h;if(30<v){var w=h-h%5;v=(c&(1<<w)-1).toString(32),c>>=w,h-=w,Ur=1<<32-rt(o)+h|a<<h|c,Br=v+r}else Ur=1<<v|a<<h|c,Br=r}function Kc(r){r.return!==null&&(Zo(r,1),Tm(r,1,0))}function Gc(r){for(;r===pl;)pl=Ai[--Mi],Ai[Mi]=null,ml=Ai[--Mi],Ai[Mi]=null;for(;r===Wo;)Wo=Qn[--Jn],Qn[Jn]=null,Br=Qn[--Jn],Qn[Jn]=null,Ur=Qn[--Jn],Qn[Jn]=null}var Un=null,Bn=null,yt=!1,fr=null;function Rm(r,o){var a=nr(5,null,null,0);a.elementType="DELETED",a.stateNode=o,a.return=r,o=r.deletions,o===null?(r.deletions=[a],r.flags|=16):o.push(a)}function Dm(r,o){switch(r.tag){case 5:var a=r.type;return o=o.nodeType!==1||a.toLowerCase()!==o.nodeName.toLowerCase()?null:o,o!==null?(r.stateNode=o,Un=r,Bn=ho(o.firstChild),!0):!1;case 6:return o=r.pendingProps===""||o.nodeType!==3?null:o,o!==null?(r.stateNode=o,Un=r,Bn=null,!0):!1;case 13:return o=o.nodeType!==8?null:o,o!==null?(a=Wo!==null?{id:Ur,overflow:Br}:null,r.memoizedState={dehydrated:o,treeContext:a,retryLane:1073741824},a=nr(18,null,null,0),a.stateNode=o,a.return=r,r.child=a,Un=r,Bn=null,!0):!1;default:return!1}}function Yc(r){return(r.mode&1)!==0&&(r.flags&128)===0}function Xc(r){if(yt){var o=Bn;if(o){var a=o;if(!Dm(r,o)){if(Yc(r))throw Error(n(418));o=ho(a.nextSibling);var c=Un;o&&Dm(r,o)?Rm(c,a):(r.flags=r.flags&-4097|2,yt=!1,Un=r)}}else{if(Yc(r))throw Error(n(418));r.flags=r.flags&-4097|2,yt=!1,Un=r}}}function Nm(r){for(r=r.return;r!==null&&r.tag!==5&&r.tag!==3&&r.tag!==13;)r=r.return;Un=r}function gl(r){if(r!==Un)return!1;if(!yt)return Nm(r),yt=!0,!1;var o;if((o=r.tag!==3)&&!(o=r.tag!==5)&&(o=r.type,o=o!=="head"&&o!=="body"&&!$c(r.type,r.memoizedProps)),o&&(o=Bn)){if(Yc(r))throw Am(),Error(n(418));for(;o;)Rm(r,o),o=ho(o.nextSibling)}if(Nm(r),r.tag===13){if(r=r.memoizedState,r=r!==null?r.dehydrated:null,!r)throw Error(n(317));e:{for(r=r.nextSibling,o=0;r;){if(r.nodeType===8){var a=r.data;if(a==="/$"){if(o===0){Bn=ho(r.nextSibling);break e}o--}else a!=="$"&&a!=="$!"&&a!=="$?"||o++}r=r.nextSibling}Bn=null}}else Bn=Un?ho(r.stateNode.nextSibling):null;return!0}function Am(){for(var r=Bn;r;)r=ho(r.nextSibling)}function ji(){Bn=Un=null,yt=!1}function Qc(r){fr===null?fr=[r]:fr.push(r)}var tk=B.ReactCurrentBatchConfig;function Fs(r,o,a){if(r=a.ref,r!==null&&typeof r!="function"&&typeof r!="object"){if(a._owner){if(a=a._owner,a){if(a.tag!==1)throw Error(n(309));var c=a.stateNode}if(!c)throw Error(n(147,r));var h=c,v=""+r;return o!==null&&o.ref!==null&&typeof o.ref=="function"&&o.ref._stringRef===v?o.ref:(o=function(w){var E=h.refs;w===null?delete E[v]:E[v]=w},o._stringRef=v,o)}if(typeof r!="string")throw Error(n(284));if(!a._owner)throw Error(n(290,r))}return r}function vl(r,o){throw r=Object.prototype.toString.call(o),Error(n(31,r==="[object Object]"?"object with keys {"+Object.keys(o).join(", ")+"}":r))}function Mm(r){var o=r._init;return o(r._payload)}function jm(r){function o(F,A){if(r){var $=F.deletions;$===null?(F.deletions=[A],F.flags|=16):$.push(A)}}function a(F,A){if(!r)return null;for(;A!==null;)o(F,A),A=A.sibling;return null}function c(F,A){for(F=new Map;A!==null;)A.key!==null?F.set(A.key,A):F.set(A.index,A),A=A.sibling;return F}function h(F,A){return F=Eo(F,A),F.index=0,F.sibling=null,F}function v(F,A,$){return F.index=$,r?($=F.alternate,$!==null?($=$.index,$<A?(F.flags|=2,A):$):(F.flags|=2,A)):(F.flags|=1048576,A)}function w(F){return r&&F.alternate===null&&(F.flags|=2),F}function E(F,A,$,ie){return A===null||A.tag!==6?(A=Ud($,F.mode,ie),A.return=F,A):(A=h(A,$),A.return=F,A)}function D(F,A,$,ie){var Me=$.type;return Me===R?J(F,A,$.props.children,ie,$.key):A!==null&&(A.elementType===Me||typeof Me=="object"&&Me!==null&&Me.$$typeof===ve&&Mm(Me)===A.type)?(ie=h(A,$.props),ie.ref=Fs(F,A,$),ie.return=F,ie):(ie=$l($.type,$.key,$.props,null,F.mode,ie),ie.ref=Fs(F,A,$),ie.return=F,ie)}function W(F,A,$,ie){return A===null||A.tag!==4||A.stateNode.containerInfo!==$.containerInfo||A.stateNode.implementation!==$.implementation?(A=Bd($,F.mode,ie),A.return=F,A):(A=h(A,$.children||[]),A.return=F,A)}function J(F,A,$,ie,Me){return A===null||A.tag!==7?(A=qo($,F.mode,ie,Me),A.return=F,A):(A=h(A,$),A.return=F,A)}function ne(F,A,$){if(typeof A=="string"&&A!==""||typeof A=="number")return A=Ud(""+A,F.mode,$),A.return=F,A;if(typeof A=="object"&&A!==null){switch(A.$$typeof){case Z:return $=$l(A.type,A.key,A.props,null,F.mode,$),$.ref=Fs(F,null,A),$.return=F,$;case re:return A=Bd(A,F.mode,$),A.return=F,A;case ve:var ie=A._init;return ne(F,ie(A._payload),$)}if(P(A)||fe(A))return A=qo(A,F.mode,$,null),A.return=F,A;vl(F,A)}return null}function X(F,A,$,ie){var Me=A!==null?A.key:null;if(typeof $=="string"&&$!==""||typeof $=="number")return Me!==null?null:E(F,A,""+$,ie);if(typeof $=="object"&&$!==null){switch($.$$typeof){case Z:return $.key===Me?D(F,A,$,ie):null;case re:return $.key===Me?W(F,A,$,ie):null;case ve:return Me=$._init,X(F,A,Me($._payload),ie)}if(P($)||fe($))return Me!==null?null:J(F,A,$,ie,null);vl(F,$)}return null}function ye(F,A,$,ie,Me){if(typeof ie=="string"&&ie!==""||typeof ie=="number")return F=F.get($)||null,E(A,F,""+ie,Me);if(typeof ie=="object"&&ie!==null){switch(ie.$$typeof){case Z:return F=F.get(ie.key===null?$:ie.key)||null,D(A,F,ie,Me);case re:return F=F.get(ie.key===null?$:ie.key)||null,W(A,F,ie,Me);case ve:var Oe=ie._init;return ye(F,A,$,Oe(ie._payload),Me)}if(P(ie)||fe(ie))return F=F.get($)||null,J(A,F,ie,Me,null);vl(A,ie)}return null}function Ce(F,A,$,ie){for(var Me=null,Oe=null,ze=A,Ue=A=0,en=null;ze!==null&&Ue<$.length;Ue++){ze.index>Ue?(en=ze,ze=null):en=ze.sibling;var ot=X(F,ze,$[Ue],ie);if(ot===null){ze===null&&(ze=en);break}r&&ze&&ot.alternate===null&&o(F,ze),A=v(ot,A,Ue),Oe===null?Me=ot:Oe.sibling=ot,Oe=ot,ze=en}if(Ue===$.length)return a(F,ze),yt&&Zo(F,Ue),Me;if(ze===null){for(;Ue<$.length;Ue++)ze=ne(F,$[Ue],ie),ze!==null&&(A=v(ze,A,Ue),Oe===null?Me=ze:Oe.sibling=ze,Oe=ze);return yt&&Zo(F,Ue),Me}for(ze=c(F,ze);Ue<$.length;Ue++)en=ye(ze,F,Ue,$[Ue],ie),en!==null&&(r&&en.alternate!==null&&ze.delete(en.key===null?Ue:en.key),A=v(en,A,Ue),Oe===null?Me=en:Oe.sibling=en,Oe=en);return r&&ze.forEach(function(_o){return o(F,_o)}),yt&&Zo(F,Ue),Me}function De(F,A,$,ie){var Me=fe($);if(typeof Me!="function")throw Error(n(150));if($=Me.call($),$==null)throw Error(n(151));for(var Oe=Me=null,ze=A,Ue=A=0,en=null,ot=$.next();ze!==null&&!ot.done;Ue++,ot=$.next()){ze.index>Ue?(en=ze,ze=null):en=ze.sibling;var _o=X(F,ze,ot.value,ie);if(_o===null){ze===null&&(ze=en);break}r&&ze&&_o.alternate===null&&o(F,ze),A=v(_o,A,Ue),Oe===null?Me=_o:Oe.sibling=_o,Oe=_o,ze=en}if(ot.done)return a(F,ze),yt&&Zo(F,Ue),Me;if(ze===null){for(;!ot.done;Ue++,ot=$.next())ot=ne(F,ot.value,ie),ot!==null&&(A=v(ot,A,Ue),Oe===null?Me=ot:Oe.sibling=ot,Oe=ot);return yt&&Zo(F,Ue),Me}for(ze=c(F,ze);!ot.done;Ue++,ot=$.next())ot=ye(ze,F,Ue,ot.value,ie),ot!==null&&(r&&ot.alternate!==null&&ze.delete(ot.key===null?Ue:ot.key),A=v(ot,A,Ue),Oe===null?Me=ot:Oe.sibling=ot,Oe=ot);return r&&ze.forEach(function(jk){return o(F,jk)}),yt&&Zo(F,Ue),Me}function jt(F,A,$,ie){if(typeof $=="object"&&$!==null&&$.type===R&&$.key===null&&($=$.props.children),typeof $=="object"&&$!==null){switch($.$$typeof){case Z:e:{for(var Me=$.key,Oe=A;Oe!==null;){if(Oe.key===Me){if(Me=$.type,Me===R){if(Oe.tag===7){a(F,Oe.sibling),A=h(Oe,$.props.children),A.return=F,F=A;break e}}else if(Oe.elementType===Me||typeof Me=="object"&&Me!==null&&Me.$$typeof===ve&&Mm(Me)===Oe.type){a(F,Oe.sibling),A=h(Oe,$.props),A.ref=Fs(F,Oe,$),A.return=F,F=A;break e}a(F,Oe);break}else o(F,Oe);Oe=Oe.sibling}$.type===R?(A=qo($.props.children,F.mode,ie,$.key),A.return=F,F=A):(ie=$l($.type,$.key,$.props,null,F.mode,ie),ie.ref=Fs(F,A,$),ie.return=F,F=ie)}return w(F);case re:e:{for(Oe=$.key;A!==null;){if(A.key===Oe)if(A.tag===4&&A.stateNode.containerInfo===$.containerInfo&&A.stateNode.implementation===$.implementation){a(F,A.sibling),A=h(A,$.children||[]),A.return=F,F=A;break e}else{a(F,A);break}else o(F,A);A=A.sibling}A=Bd($,F.mode,ie),A.return=F,F=A}return w(F);case ve:return Oe=$._init,jt(F,A,Oe($._payload),ie)}if(P($))return Ce(F,A,$,ie);if(fe($))return De(F,A,$,ie);vl(F,$)}return typeof $=="string"&&$!==""||typeof $=="number"?($=""+$,A!==null&&A.tag===6?(a(F,A.sibling),A=h(A,$),A.return=F,F=A):(a(F,A),A=Ud($,F.mode,ie),A.return=F,F=A),w(F)):a(F,A)}return jt}var Li=jm(!0),Lm=jm(!1),yl=po(null),wl=null,Oi=null,Jc=null;function qc(){Jc=Oi=wl=null}function ed(r){var o=yl.current;vt(yl),r._currentValue=o}function td(r,o,a){for(;r!==null;){var c=r.alternate;if((r.childLanes&o)!==o?(r.childLanes|=o,c!==null&&(c.childLanes|=o)):c!==null&&(c.childLanes&o)!==o&&(c.childLanes|=o),r===a)break;r=r.return}}function zi(r,o){wl=r,Jc=Oi=null,r=r.dependencies,r!==null&&r.firstContext!==null&&((r.lanes&o)!==0&&(_n=!0),r.firstContext=null)}function qn(r){var o=r._currentValue;if(Jc!==r)if(r={context:r,memoizedValue:o,next:null},Oi===null){if(wl===null)throw Error(n(308));Oi=r,wl.dependencies={lanes:0,firstContext:r}}else Oi=Oi.next=r;return o}var Ho=null;function nd(r){Ho===null?Ho=[r]:Ho.push(r)}function Om(r,o,a,c){var h=o.interleaved;return h===null?(a.next=a,nd(o)):(a.next=h.next,h.next=a),o.interleaved=a,Wr(r,c)}function Wr(r,o){r.lanes|=o;var a=r.alternate;for(a!==null&&(a.lanes|=o),a=r,r=r.return;r!==null;)r.childLanes|=o,a=r.alternate,a!==null&&(a.childLanes|=o),a=r,r=r.return;return a.tag===3?a.stateNode:null}var vo=!1;function rd(r){r.updateQueue={baseState:r.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function zm(r,o){r=r.updateQueue,o.updateQueue===r&&(o.updateQueue={baseState:r.baseState,firstBaseUpdate:r.firstBaseUpdate,lastBaseUpdate:r.lastBaseUpdate,shared:r.shared,effects:r.effects})}function Zr(r,o){return{eventTime:r,lane:o,tag:0,payload:null,callback:null,next:null}}function yo(r,o,a){var c=r.updateQueue;if(c===null)return null;if(c=c.shared,(tt&2)!==0){var h=c.pending;return h===null?o.next=o:(o.next=h.next,h.next=o),c.pending=o,Wr(r,a)}return h=c.interleaved,h===null?(o.next=o,nd(c)):(o.next=h.next,h.next=o),c.interleaved=o,Wr(r,a)}function xl(r,o,a){if(o=o.updateQueue,o!==null&&(o=o.shared,(a&4194240)!==0)){var c=o.lanes;c&=r.pendingLanes,a|=c,o.lanes=a,vc(r,a)}}function Im(r,o){var a=r.updateQueue,c=r.alternate;if(c!==null&&(c=c.updateQueue,a===c)){var h=null,v=null;if(a=a.firstBaseUpdate,a!==null){do{var w={eventTime:a.eventTime,lane:a.lane,tag:a.tag,payload:a.payload,callback:a.callback,next:null};v===null?h=v=w:v=v.next=w,a=a.next}while(a!==null);v===null?h=v=o:v=v.next=o}else h=v=o;a={baseState:c.baseState,firstBaseUpdate:h,lastBaseUpdate:v,shared:c.shared,effects:c.effects},r.updateQueue=a;return}r=a.lastBaseUpdate,r===null?a.firstBaseUpdate=o:r.next=o,a.lastBaseUpdate=o}function Sl(r,o,a,c){var h=r.updateQueue;vo=!1;var v=h.firstBaseUpdate,w=h.lastBaseUpdate,E=h.shared.pending;if(E!==null){h.shared.pending=null;var D=E,W=D.next;D.next=null,w===null?v=W:w.next=W,w=D;var J=r.alternate;J!==null&&(J=J.updateQueue,E=J.lastBaseUpdate,E!==w&&(E===null?J.firstBaseUpdate=W:E.next=W,J.lastBaseUpdate=D))}if(v!==null){var ne=h.baseState;w=0,J=W=D=null,E=v;do{var X=E.lane,ye=E.eventTime;if((c&X)===X){J!==null&&(J=J.next={eventTime:ye,lane:0,tag:E.tag,payload:E.payload,callback:E.callback,next:null});e:{var Ce=r,De=E;switch(X=o,ye=a,De.tag){case 1:if(Ce=De.payload,typeof Ce=="function"){ne=Ce.call(ye,ne,X);break e}ne=Ce;break e;case 3:Ce.flags=Ce.flags&-65537|128;case 0:if(Ce=De.payload,X=typeof Ce=="function"?Ce.call(ye,ne,X):Ce,X==null)break e;ne=ee({},ne,X);break e;case 2:vo=!0}}E.callback!==null&&E.lane!==0&&(r.flags|=64,X=h.effects,X===null?h.effects=[E]:X.push(E))}else ye={eventTime:ye,lane:X,tag:E.tag,payload:E.payload,callback:E.callback,next:null},J===null?(W=J=ye,D=ne):J=J.next=ye,w|=X;if(E=E.next,E===null){if(E=h.shared.pending,E===null)break;X=E,E=X.next,X.next=null,h.lastBaseUpdate=X,h.shared.pending=null}}while(!0);if(J===null&&(D=ne),h.baseState=D,h.firstBaseUpdate=W,h.lastBaseUpdate=J,o=h.shared.interleaved,o!==null){h=o;do w|=h.lane,h=h.next;while(h!==o)}else v===null&&(h.shared.lanes=0);Yo|=w,r.lanes=w,r.memoizedState=ne}}function Fm(r,o,a){if(r=o.effects,o.effects=null,r!==null)for(o=0;o<r.length;o++){var c=r[o],h=c.callback;if(h!==null){if(c.callback=null,c=a,typeof h!="function")throw Error(n(191,h));h.call(c)}}}var Vs={},_r=po(Vs),$s=po(Vs),Us=po(Vs);function Ko(r){if(r===Vs)throw Error(n(174));return r}function od(r,o){switch(ht(Us,o),ht($s,r),ht(_r,Vs),r=o.nodeType,r){case 9:case 11:o=(o=o.documentElement)?o.namespaceURI:Ke(null,"");break;default:r=r===8?o.parentNode:o,o=r.namespaceURI||null,r=r.tagName,o=Ke(o,r)}vt(_r),ht(_r,o)}function Ii(){vt(_r),vt($s),vt(Us)}function Vm(r){Ko(Us.current);var o=Ko(_r.current),a=Ke(o,r.type);o!==a&&(ht($s,r),ht(_r,a))}function id(r){$s.current===r&&(vt(_r),vt($s))}var kt=po(0);function bl(r){for(var o=r;o!==null;){if(o.tag===13){var a=o.memoizedState;if(a!==null&&(a=a.dehydrated,a===null||a.data==="$?"||a.data==="$!"))return o}else if(o.tag===19&&o.memoizedProps.revealOrder!==void 0){if((o.flags&128)!==0)return o}else if(o.child!==null){o.child.return=o,o=o.child;continue}if(o===r)break;for(;o.sibling===null;){if(o.return===null||o.return===r)return null;o=o.return}o.sibling.return=o.return,o=o.sibling}return null}var sd=[];function ad(){for(var r=0;r<sd.length;r++)sd[r]._workInProgressVersionPrimary=null;sd.length=0}var kl=B.ReactCurrentDispatcher,ld=B.ReactCurrentBatchConfig,Go=0,Et=null,Ht=null,Jt=null,El=!1,Bs=!1,Ws=0,nk=0;function hn(){throw Error(n(321))}function ud(r,o){if(o===null)return!1;for(var a=0;a<o.length&&a<r.length;a++)if(!dr(r[a],o[a]))return!1;return!0}function cd(r,o,a,c,h,v){if(Go=v,Et=o,o.memoizedState=null,o.updateQueue=null,o.lanes=0,kl.current=r===null||r.memoizedState===null?sk:ak,r=a(c,h),Bs){v=0;do{if(Bs=!1,Ws=0,25<=v)throw Error(n(301));v+=1,Jt=Ht=null,o.updateQueue=null,kl.current=lk,r=a(c,h)}while(Bs)}if(kl.current=Pl,o=Ht!==null&&Ht.next!==null,Go=0,Jt=Ht=Et=null,El=!1,o)throw Error(n(300));return r}function dd(){var r=Ws!==0;return Ws=0,r}function Cr(){var r={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return Jt===null?Et.memoizedState=Jt=r:Jt=Jt.next=r,Jt}function er(){if(Ht===null){var r=Et.alternate;r=r!==null?r.memoizedState:null}else r=Ht.next;var o=Jt===null?Et.memoizedState:Jt.next;if(o!==null)Jt=o,Ht=r;else{if(r===null)throw Error(n(310));Ht=r,r={memoizedState:Ht.memoizedState,baseState:Ht.baseState,baseQueue:Ht.baseQueue,queue:Ht.queue,next:null},Jt===null?Et.memoizedState=Jt=r:Jt=Jt.next=r}return Jt}function Zs(r,o){return typeof o=="function"?o(r):o}function fd(r){var o=er(),a=o.queue;if(a===null)throw Error(n(311));a.lastRenderedReducer=r;var c=Ht,h=c.baseQueue,v=a.pending;if(v!==null){if(h!==null){var w=h.next;h.next=v.next,v.next=w}c.baseQueue=h=v,a.pending=null}if(h!==null){v=h.next,c=c.baseState;var E=w=null,D=null,W=v;do{var J=W.lane;if((Go&J)===J)D!==null&&(D=D.next={lane:0,action:W.action,hasEagerState:W.hasEagerState,eagerState:W.eagerState,next:null}),c=W.hasEagerState?W.eagerState:r(c,W.action);else{var ne={lane:J,action:W.action,hasEagerState:W.hasEagerState,eagerState:W.eagerState,next:null};D===null?(E=D=ne,w=c):D=D.next=ne,Et.lanes|=J,Yo|=J}W=W.next}while(W!==null&&W!==v);D===null?w=c:D.next=E,dr(c,o.memoizedState)||(_n=!0),o.memoizedState=c,o.baseState=w,o.baseQueue=D,a.lastRenderedState=c}if(r=a.interleaved,r!==null){h=r;do v=h.lane,Et.lanes|=v,Yo|=v,h=h.next;while(h!==r)}else h===null&&(a.lanes=0);return[o.memoizedState,a.dispatch]}function hd(r){var o=er(),a=o.queue;if(a===null)throw Error(n(311));a.lastRenderedReducer=r;var c=a.dispatch,h=a.pending,v=o.memoizedState;if(h!==null){a.pending=null;var w=h=h.next;do v=r(v,w.action),w=w.next;while(w!==h);dr(v,o.memoizedState)||(_n=!0),o.memoizedState=v,o.baseQueue===null&&(o.baseState=v),a.lastRenderedState=v}return[v,c]}function $m(){}function Um(r,o){var a=Et,c=er(),h=o(),v=!dr(c.memoizedState,h);if(v&&(c.memoizedState=h,_n=!0),c=c.queue,pd(Zm.bind(null,a,c,r),[r]),c.getSnapshot!==o||v||Jt!==null&&Jt.memoizedState.tag&1){if(a.flags|=2048,Hs(9,Wm.bind(null,a,c,h,o),void 0,null),qt===null)throw Error(n(349));(Go&30)!==0||Bm(a,o,h)}return h}function Bm(r,o,a){r.flags|=16384,r={getSnapshot:o,value:a},o=Et.updateQueue,o===null?(o={lastEffect:null,stores:null},Et.updateQueue=o,o.stores=[r]):(a=o.stores,a===null?o.stores=[r]:a.push(r))}function Wm(r,o,a,c){o.value=a,o.getSnapshot=c,Hm(o)&&Km(r)}function Zm(r,o,a){return a(function(){Hm(o)&&Km(r)})}function Hm(r){var o=r.getSnapshot;r=r.value;try{var a=o();return!dr(r,a)}catch{return!0}}function Km(r){var o=Wr(r,1);o!==null&&gr(o,r,1,-1)}function Gm(r){var o=Cr();return typeof r=="function"&&(r=r()),o.memoizedState=o.baseState=r,r={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Zs,lastRenderedState:r},o.queue=r,r=r.dispatch=ik.bind(null,Et,r),[o.memoizedState,r]}function Hs(r,o,a,c){return r={tag:r,create:o,destroy:a,deps:c,next:null},o=Et.updateQueue,o===null?(o={lastEffect:null,stores:null},Et.updateQueue=o,o.lastEffect=r.next=r):(a=o.lastEffect,a===null?o.lastEffect=r.next=r:(c=a.next,a.next=r,r.next=c,o.lastEffect=r)),r}function Ym(){return er().memoizedState}function _l(r,o,a,c){var h=Cr();Et.flags|=r,h.memoizedState=Hs(1|o,a,void 0,c===void 0?null:c)}function Cl(r,o,a,c){var h=er();c=c===void 0?null:c;var v=void 0;if(Ht!==null){var w=Ht.memoizedState;if(v=w.destroy,c!==null&&ud(c,w.deps)){h.memoizedState=Hs(o,a,v,c);return}}Et.flags|=r,h.memoizedState=Hs(1|o,a,v,c)}function Xm(r,o){return _l(8390656,8,r,o)}function pd(r,o){return Cl(2048,8,r,o)}function Qm(r,o){return Cl(4,2,r,o)}function Jm(r,o){return Cl(4,4,r,o)}function qm(r,o){if(typeof o=="function")return r=r(),o(r),function(){o(null)};if(o!=null)return r=r(),o.current=r,function(){o.current=null}}function eg(r,o,a){return a=a!=null?a.concat([r]):null,Cl(4,4,qm.bind(null,o,r),a)}function md(){}function tg(r,o){var a=er();o=o===void 0?null:o;var c=a.memoizedState;return c!==null&&o!==null&&ud(o,c[1])?c[0]:(a.memoizedState=[r,o],r)}function ng(r,o){var a=er();o=o===void 0?null:o;var c=a.memoizedState;return c!==null&&o!==null&&ud(o,c[1])?c[0]:(r=r(),a.memoizedState=[r,o],r)}function rg(r,o,a){return(Go&21)===0?(r.baseState&&(r.baseState=!1,_n=!0),r.memoizedState=a):(dr(a,o)||(a=Mp(),Et.lanes|=a,Yo|=a,r.baseState=!0),o)}function rk(r,o){var a=ut;ut=a!==0&&4>a?a:4,r(!0);var c=ld.transition;ld.transition={};try{r(!1),o()}finally{ut=a,ld.transition=c}}function og(){return er().memoizedState}function ok(r,o,a){var c=bo(r);if(a={lane:c,action:a,hasEagerState:!1,eagerState:null,next:null},ig(r))sg(o,a);else if(a=Om(r,o,a,c),a!==null){var h=xn();gr(a,r,c,h),ag(a,o,c)}}function ik(r,o,a){var c=bo(r),h={lane:c,action:a,hasEagerState:!1,eagerState:null,next:null};if(ig(r))sg(o,h);else{var v=r.alternate;if(r.lanes===0&&(v===null||v.lanes===0)&&(v=o.lastRenderedReducer,v!==null))try{var w=o.lastRenderedState,E=v(w,a);if(h.hasEagerState=!0,h.eagerState=E,dr(E,w)){var D=o.interleaved;D===null?(h.next=h,nd(o)):(h.next=D.next,D.next=h),o.interleaved=h;return}}catch{}finally{}a=Om(r,o,h,c),a!==null&&(h=xn(),gr(a,r,c,h),ag(a,o,c))}}function ig(r){var o=r.alternate;return r===Et||o!==null&&o===Et}function sg(r,o){Bs=El=!0;var a=r.pending;a===null?o.next=o:(o.next=a.next,a.next=o),r.pending=o}function ag(r,o,a){if((a&4194240)!==0){var c=o.lanes;c&=r.pendingLanes,a|=c,o.lanes=a,vc(r,a)}}var Pl={readContext:qn,useCallback:hn,useContext:hn,useEffect:hn,useImperativeHandle:hn,useInsertionEffect:hn,useLayoutEffect:hn,useMemo:hn,useReducer:hn,useRef:hn,useState:hn,useDebugValue:hn,useDeferredValue:hn,useTransition:hn,useMutableSource:hn,useSyncExternalStore:hn,useId:hn,unstable_isNewReconciler:!1},sk={readContext:qn,useCallback:function(r,o){return Cr().memoizedState=[r,o===void 0?null:o],r},useContext:qn,useEffect:Xm,useImperativeHandle:function(r,o,a){return a=a!=null?a.concat([r]):null,_l(4194308,4,qm.bind(null,o,r),a)},useLayoutEffect:function(r,o){return _l(4194308,4,r,o)},useInsertionEffect:function(r,o){return _l(4,2,r,o)},useMemo:function(r,o){var a=Cr();return o=o===void 0?null:o,r=r(),a.memoizedState=[r,o],r},useReducer:function(r,o,a){var c=Cr();return o=a!==void 0?a(o):o,c.memoizedState=c.baseState=o,r={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:r,lastRenderedState:o},c.queue=r,r=r.dispatch=ok.bind(null,Et,r),[c.memoizedState,r]},useRef:function(r){var o=Cr();return r={current:r},o.memoizedState=r},useState:Gm,useDebugValue:md,useDeferredValue:function(r){return Cr().memoizedState=r},useTransition:function(){var r=Gm(!1),o=r[0];return r=rk.bind(null,r[1]),Cr().memoizedState=r,[o,r]},useMutableSource:function(){},useSyncExternalStore:function(r,o,a){var c=Et,h=Cr();if(yt){if(a===void 0)throw Error(n(407));a=a()}else{if(a=o(),qt===null)throw Error(n(349));(Go&30)!==0||Bm(c,o,a)}h.memoizedState=a;var v={value:a,getSnapshot:o};return h.queue=v,Xm(Zm.bind(null,c,v,r),[r]),c.flags|=2048,Hs(9,Wm.bind(null,c,v,a,o),void 0,null),a},useId:function(){var r=Cr(),o=qt.identifierPrefix;if(yt){var a=Br,c=Ur;a=(c&~(1<<32-rt(c)-1)).toString(32)+a,o=":"+o+"R"+a,a=Ws++,0<a&&(o+="H"+a.toString(32)),o+=":"}else a=nk++,o=":"+o+"r"+a.toString(32)+":";return r.memoizedState=o},unstable_isNewReconciler:!1},ak={readContext:qn,useCallback:tg,useContext:qn,useEffect:pd,useImperativeHandle:eg,useInsertionEffect:Qm,useLayoutEffect:Jm,useMemo:ng,useReducer:fd,useRef:Ym,useState:function(){return fd(Zs)},useDebugValue:md,useDeferredValue:function(r){var o=er();return rg(o,Ht.memoizedState,r)},useTransition:function(){var r=fd(Zs)[0],o=er().memoizedState;return[r,o]},useMutableSource:$m,useSyncExternalStore:Um,useId:og,unstable_isNewReconciler:!1},lk={readContext:qn,useCallback:tg,useContext:qn,useEffect:pd,useImperativeHandle:eg,useInsertionEffect:Qm,useLayoutEffect:Jm,useMemo:ng,useReducer:hd,useRef:Ym,useState:function(){return hd(Zs)},useDebugValue:md,useDeferredValue:function(r){var o=er();return Ht===null?o.memoizedState=r:rg(o,Ht.memoizedState,r)},useTransition:function(){var r=hd(Zs)[0],o=er().memoizedState;return[r,o]},useMutableSource:$m,useSyncExternalStore:Um,useId:og,unstable_isNewReconciler:!1};function hr(r,o){if(r&&r.defaultProps){o=ee({},o),r=r.defaultProps;for(var a in r)o[a]===void 0&&(o[a]=r[a]);return o}return o}function gd(r,o,a,c){o=r.memoizedState,a=a(c,o),a=a==null?o:ee({},o,a),r.memoizedState=a,r.lanes===0&&(r.updateQueue.baseState=a)}var Tl={isMounted:function(r){return(r=r._reactInternals)?ke(r)===r:!1},enqueueSetState:function(r,o,a){r=r._reactInternals;var c=xn(),h=bo(r),v=Zr(c,h);v.payload=o,a!=null&&(v.callback=a),o=yo(r,v,h),o!==null&&(gr(o,r,h,c),xl(o,r,h))},enqueueReplaceState:function(r,o,a){r=r._reactInternals;var c=xn(),h=bo(r),v=Zr(c,h);v.tag=1,v.payload=o,a!=null&&(v.callback=a),o=yo(r,v,h),o!==null&&(gr(o,r,h,c),xl(o,r,h))},enqueueForceUpdate:function(r,o){r=r._reactInternals;var a=xn(),c=bo(r),h=Zr(a,c);h.tag=2,o!=null&&(h.callback=o),o=yo(r,h,c),o!==null&&(gr(o,r,c,a),xl(o,r,c))}};function lg(r,o,a,c,h,v,w){return r=r.stateNode,typeof r.shouldComponentUpdate=="function"?r.shouldComponentUpdate(c,v,w):o.prototype&&o.prototype.isPureReactComponent?!As(a,c)||!As(h,v):!0}function ug(r,o,a){var c=!1,h=mo,v=o.contextType;return typeof v=="object"&&v!==null?v=qn(v):(h=En(o)?Bo:fn.current,c=o.contextTypes,v=(c=c!=null)?Ni(r,h):mo),o=new o(a,v),r.memoizedState=o.state!==null&&o.state!==void 0?o.state:null,o.updater=Tl,r.stateNode=o,o._reactInternals=r,c&&(r=r.stateNode,r.__reactInternalMemoizedUnmaskedChildContext=h,r.__reactInternalMemoizedMaskedChildContext=v),o}function cg(r,o,a,c){r=o.state,typeof o.componentWillReceiveProps=="function"&&o.componentWillReceiveProps(a,c),typeof o.UNSAFE_componentWillReceiveProps=="function"&&o.UNSAFE_componentWillReceiveProps(a,c),o.state!==r&&Tl.enqueueReplaceState(o,o.state,null)}function vd(r,o,a,c){var h=r.stateNode;h.props=a,h.state=r.memoizedState,h.refs={},rd(r);var v=o.contextType;typeof v=="object"&&v!==null?h.context=qn(v):(v=En(o)?Bo:fn.current,h.context=Ni(r,v)),h.state=r.memoizedState,v=o.getDerivedStateFromProps,typeof v=="function"&&(gd(r,o,v,a),h.state=r.memoizedState),typeof o.getDerivedStateFromProps=="function"||typeof h.getSnapshotBeforeUpdate=="function"||typeof h.UNSAFE_componentWillMount!="function"&&typeof h.componentWillMount!="function"||(o=h.state,typeof h.componentWillMount=="function"&&h.componentWillMount(),typeof h.UNSAFE_componentWillMount=="function"&&h.UNSAFE_componentWillMount(),o!==h.state&&Tl.enqueueReplaceState(h,h.state,null),Sl(r,a,h,c),h.state=r.memoizedState),typeof h.componentDidMount=="function"&&(r.flags|=4194308)}function Fi(r,o){try{var a="",c=o;do a+=me(c),c=c.return;while(c);var h=a}catch(v){h=`
Error generating stack: `+v.message+`
`+v.stack}return{value:r,source:o,stack:h,digest:null}}function yd(r,o,a){return{value:r,source:null,stack:a??null,digest:o??null}}function wd(r,o){try{console.error(o.value)}catch(a){setTimeout(function(){throw a})}}var uk=typeof WeakMap=="function"?WeakMap:Map;function dg(r,o,a){a=Zr(-1,a),a.tag=3,a.payload={element:null};var c=o.value;return a.callback=function(){Ll||(Ll=!0,jd=c),wd(r,o)},a}function fg(r,o,a){a=Zr(-1,a),a.tag=3;var c=r.type.getDerivedStateFromError;if(typeof c=="function"){var h=o.value;a.payload=function(){return c(h)},a.callback=function(){wd(r,o)}}var v=r.stateNode;return v!==null&&typeof v.componentDidCatch=="function"&&(a.callback=function(){wd(r,o),typeof c!="function"&&(xo===null?xo=new Set([this]):xo.add(this));var w=o.stack;this.componentDidCatch(o.value,{componentStack:w!==null?w:""})}),a}function hg(r,o,a){var c=r.pingCache;if(c===null){c=r.pingCache=new uk;var h=new Set;c.set(o,h)}else h=c.get(o),h===void 0&&(h=new Set,c.set(o,h));h.has(a)||(h.add(a),r=kk.bind(null,r,o,a),o.then(r,r))}function pg(r){do{var o;if((o=r.tag===13)&&(o=r.memoizedState,o=o!==null?o.dehydrated!==null:!0),o)return r;r=r.return}while(r!==null);return null}function mg(r,o,a,c,h){return(r.mode&1)===0?(r===o?r.flags|=65536:(r.flags|=128,a.flags|=131072,a.flags&=-52805,a.tag===1&&(a.alternate===null?a.tag=17:(o=Zr(-1,1),o.tag=2,yo(a,o,1))),a.lanes|=1),r):(r.flags|=65536,r.lanes=h,r)}var ck=B.ReactCurrentOwner,_n=!1;function wn(r,o,a,c){o.child=r===null?Lm(o,null,a,c):Li(o,r.child,a,c)}function gg(r,o,a,c,h){a=a.render;var v=o.ref;return zi(o,h),c=cd(r,o,a,c,v,h),a=dd(),r!==null&&!_n?(o.updateQueue=r.updateQueue,o.flags&=-2053,r.lanes&=~h,Hr(r,o,h)):(yt&&a&&Kc(o),o.flags|=1,wn(r,o,c,h),o.child)}function vg(r,o,a,c,h){if(r===null){var v=a.type;return typeof v=="function"&&!$d(v)&&v.defaultProps===void 0&&a.compare===null&&a.defaultProps===void 0?(o.tag=15,o.type=v,yg(r,o,v,c,h)):(r=$l(a.type,null,c,o,o.mode,h),r.ref=o.ref,r.return=o,o.child=r)}if(v=r.child,(r.lanes&h)===0){var w=v.memoizedProps;if(a=a.compare,a=a!==null?a:As,a(w,c)&&r.ref===o.ref)return Hr(r,o,h)}return o.flags|=1,r=Eo(v,c),r.ref=o.ref,r.return=o,o.child=r}function yg(r,o,a,c,h){if(r!==null){var v=r.memoizedProps;if(As(v,c)&&r.ref===o.ref)if(_n=!1,o.pendingProps=c=v,(r.lanes&h)!==0)(r.flags&131072)!==0&&(_n=!0);else return o.lanes=r.lanes,Hr(r,o,h)}return xd(r,o,a,c,h)}function wg(r,o,a){var c=o.pendingProps,h=c.children,v=r!==null?r.memoizedState:null;if(c.mode==="hidden")if((o.mode&1)===0)o.memoizedState={baseLanes:0,cachePool:null,transitions:null},ht($i,Wn),Wn|=a;else{if((a&1073741824)===0)return r=v!==null?v.baseLanes|a:a,o.lanes=o.childLanes=1073741824,o.memoizedState={baseLanes:r,cachePool:null,transitions:null},o.updateQueue=null,ht($i,Wn),Wn|=r,null;o.memoizedState={baseLanes:0,cachePool:null,transitions:null},c=v!==null?v.baseLanes:a,ht($i,Wn),Wn|=c}else v!==null?(c=v.baseLanes|a,o.memoizedState=null):c=a,ht($i,Wn),Wn|=c;return wn(r,o,h,a),o.child}function xg(r,o){var a=o.ref;(r===null&&a!==null||r!==null&&r.ref!==a)&&(o.flags|=512,o.flags|=2097152)}function xd(r,o,a,c,h){var v=En(a)?Bo:fn.current;return v=Ni(o,v),zi(o,h),a=cd(r,o,a,c,v,h),c=dd(),r!==null&&!_n?(o.updateQueue=r.updateQueue,o.flags&=-2053,r.lanes&=~h,Hr(r,o,h)):(yt&&c&&Kc(o),o.flags|=1,wn(r,o,a,h),o.child)}function Sg(r,o,a,c,h){if(En(a)){var v=!0;fl(o)}else v=!1;if(zi(o,h),o.stateNode===null)Dl(r,o),ug(o,a,c),vd(o,a,c,h),c=!0;else if(r===null){var w=o.stateNode,E=o.memoizedProps;w.props=E;var D=w.context,W=a.contextType;typeof W=="object"&&W!==null?W=qn(W):(W=En(a)?Bo:fn.current,W=Ni(o,W));var J=a.getDerivedStateFromProps,ne=typeof J=="function"||typeof w.getSnapshotBeforeUpdate=="function";ne||typeof w.UNSAFE_componentWillReceiveProps!="function"&&typeof w.componentWillReceiveProps!="function"||(E!==c||D!==W)&&cg(o,w,c,W),vo=!1;var X=o.memoizedState;w.state=X,Sl(o,c,w,h),D=o.memoizedState,E!==c||X!==D||kn.current||vo?(typeof J=="function"&&(gd(o,a,J,c),D=o.memoizedState),(E=vo||lg(o,a,E,c,X,D,W))?(ne||typeof w.UNSAFE_componentWillMount!="function"&&typeof w.componentWillMount!="function"||(typeof w.componentWillMount=="function"&&w.componentWillMount(),typeof w.UNSAFE_componentWillMount=="function"&&w.UNSAFE_componentWillMount()),typeof w.componentDidMount=="function"&&(o.flags|=4194308)):(typeof w.componentDidMount=="function"&&(o.flags|=4194308),o.memoizedProps=c,o.memoizedState=D),w.props=c,w.state=D,w.context=W,c=E):(typeof w.componentDidMount=="function"&&(o.flags|=4194308),c=!1)}else{w=o.stateNode,zm(r,o),E=o.memoizedProps,W=o.type===o.elementType?E:hr(o.type,E),w.props=W,ne=o.pendingProps,X=w.context,D=a.contextType,typeof D=="object"&&D!==null?D=qn(D):(D=En(a)?Bo:fn.current,D=Ni(o,D));var ye=a.getDerivedStateFromProps;(J=typeof ye=="function"||typeof w.getSnapshotBeforeUpdate=="function")||typeof w.UNSAFE_componentWillReceiveProps!="function"&&typeof w.componentWillReceiveProps!="function"||(E!==ne||X!==D)&&cg(o,w,c,D),vo=!1,X=o.memoizedState,w.state=X,Sl(o,c,w,h);var Ce=o.memoizedState;E!==ne||X!==Ce||kn.current||vo?(typeof ye=="function"&&(gd(o,a,ye,c),Ce=o.memoizedState),(W=vo||lg(o,a,W,c,X,Ce,D)||!1)?(J||typeof w.UNSAFE_componentWillUpdate!="function"&&typeof w.componentWillUpdate!="function"||(typeof w.componentWillUpdate=="function"&&w.componentWillUpdate(c,Ce,D),typeof w.UNSAFE_componentWillUpdate=="function"&&w.UNSAFE_componentWillUpdate(c,Ce,D)),typeof w.componentDidUpdate=="function"&&(o.flags|=4),typeof w.getSnapshotBeforeUpdate=="function"&&(o.flags|=1024)):(typeof w.componentDidUpdate!="function"||E===r.memoizedProps&&X===r.memoizedState||(o.flags|=4),typeof w.getSnapshotBeforeUpdate!="function"||E===r.memoizedProps&&X===r.memoizedState||(o.flags|=1024),o.memoizedProps=c,o.memoizedState=Ce),w.props=c,w.state=Ce,w.context=D,c=W):(typeof w.componentDidUpdate!="function"||E===r.memoizedProps&&X===r.memoizedState||(o.flags|=4),typeof w.getSnapshotBeforeUpdate!="function"||E===r.memoizedProps&&X===r.memoizedState||(o.flags|=1024),c=!1)}return Sd(r,o,a,c,v,h)}function Sd(r,o,a,c,h,v){xg(r,o);var w=(o.flags&128)!==0;if(!c&&!w)return h&&Cm(o,a,!1),Hr(r,o,v);c=o.stateNode,ck.current=o;var E=w&&typeof a.getDerivedStateFromError!="function"?null:c.render();return o.flags|=1,r!==null&&w?(o.child=Li(o,r.child,null,v),o.child=Li(o,null,E,v)):wn(r,o,E,v),o.memoizedState=c.state,h&&Cm(o,a,!0),o.child}function bg(r){var o=r.stateNode;o.pendingContext?Em(r,o.pendingContext,o.pendingContext!==o.context):o.context&&Em(r,o.context,!1),od(r,o.containerInfo)}function kg(r,o,a,c,h){return ji(),Qc(h),o.flags|=256,wn(r,o,a,c),o.child}var bd={dehydrated:null,treeContext:null,retryLane:0};function kd(r){return{baseLanes:r,cachePool:null,transitions:null}}function Eg(r,o,a){var c=o.pendingProps,h=kt.current,v=!1,w=(o.flags&128)!==0,E;if((E=w)||(E=r!==null&&r.memoizedState===null?!1:(h&2)!==0),E?(v=!0,o.flags&=-129):(r===null||r.memoizedState!==null)&&(h|=1),ht(kt,h&1),r===null)return Xc(o),r=o.memoizedState,r!==null&&(r=r.dehydrated,r!==null)?((o.mode&1)===0?o.lanes=1:r.data==="$!"?o.lanes=8:o.lanes=1073741824,null):(w=c.children,r=c.fallback,v?(c=o.mode,v=o.child,w={mode:"hidden",children:w},(c&1)===0&&v!==null?(v.childLanes=0,v.pendingProps=w):v=Ul(w,c,0,null),r=qo(r,c,a,null),v.return=o,r.return=o,v.sibling=r,o.child=v,o.child.memoizedState=kd(a),o.memoizedState=bd,r):Ed(o,w));if(h=r.memoizedState,h!==null&&(E=h.dehydrated,E!==null))return dk(r,o,w,c,E,h,a);if(v){v=c.fallback,w=o.mode,h=r.child,E=h.sibling;var D={mode:"hidden",children:c.children};return(w&1)===0&&o.child!==h?(c=o.child,c.childLanes=0,c.pendingProps=D,o.deletions=null):(c=Eo(h,D),c.subtreeFlags=h.subtreeFlags&14680064),E!==null?v=Eo(E,v):(v=qo(v,w,a,null),v.flags|=2),v.return=o,c.return=o,c.sibling=v,o.child=c,c=v,v=o.child,w=r.child.memoizedState,w=w===null?kd(a):{baseLanes:w.baseLanes|a,cachePool:null,transitions:w.transitions},v.memoizedState=w,v.childLanes=r.childLanes&~a,o.memoizedState=bd,c}return v=r.child,r=v.sibling,c=Eo(v,{mode:"visible",children:c.children}),(o.mode&1)===0&&(c.lanes=a),c.return=o,c.sibling=null,r!==null&&(a=o.deletions,a===null?(o.deletions=[r],o.flags|=16):a.push(r)),o.child=c,o.memoizedState=null,c}function Ed(r,o){return o=Ul({mode:"visible",children:o},r.mode,0,null),o.return=r,r.child=o}function Rl(r,o,a,c){return c!==null&&Qc(c),Li(o,r.child,null,a),r=Ed(o,o.pendingProps.children),r.flags|=2,o.memoizedState=null,r}function dk(r,o,a,c,h,v,w){if(a)return o.flags&256?(o.flags&=-257,c=yd(Error(n(422))),Rl(r,o,w,c)):o.memoizedState!==null?(o.child=r.child,o.flags|=128,null):(v=c.fallback,h=o.mode,c=Ul({mode:"visible",children:c.children},h,0,null),v=qo(v,h,w,null),v.flags|=2,c.return=o,v.return=o,c.sibling=v,o.child=c,(o.mode&1)!==0&&Li(o,r.child,null,w),o.child.memoizedState=kd(w),o.memoizedState=bd,v);if((o.mode&1)===0)return Rl(r,o,w,null);if(h.data==="$!"){if(c=h.nextSibling&&h.nextSibling.dataset,c)var E=c.dgst;return c=E,v=Error(n(419)),c=yd(v,c,void 0),Rl(r,o,w,c)}if(E=(w&r.childLanes)!==0,_n||E){if(c=qt,c!==null){switch(w&-w){case 4:h=2;break;case 16:h=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:h=32;break;case 536870912:h=268435456;break;default:h=0}h=(h&(c.suspendedLanes|w))!==0?0:h,h!==0&&h!==v.retryLane&&(v.retryLane=h,Wr(r,h),gr(c,r,h,-1))}return Vd(),c=yd(Error(n(421))),Rl(r,o,w,c)}return h.data==="$?"?(o.flags|=128,o.child=r.child,o=Ek.bind(null,r),h._reactRetry=o,null):(r=v.treeContext,Bn=ho(h.nextSibling),Un=o,yt=!0,fr=null,r!==null&&(Qn[Jn++]=Ur,Qn[Jn++]=Br,Qn[Jn++]=Wo,Ur=r.id,Br=r.overflow,Wo=o),o=Ed(o,c.children),o.flags|=4096,o)}function _g(r,o,a){r.lanes|=o;var c=r.alternate;c!==null&&(c.lanes|=o),td(r.return,o,a)}function _d(r,o,a,c,h){var v=r.memoizedState;v===null?r.memoizedState={isBackwards:o,rendering:null,renderingStartTime:0,last:c,tail:a,tailMode:h}:(v.isBackwards=o,v.rendering=null,v.renderingStartTime=0,v.last=c,v.tail=a,v.tailMode=h)}function Cg(r,o,a){var c=o.pendingProps,h=c.revealOrder,v=c.tail;if(wn(r,o,c.children,a),c=kt.current,(c&2)!==0)c=c&1|2,o.flags|=128;else{if(r!==null&&(r.flags&128)!==0)e:for(r=o.child;r!==null;){if(r.tag===13)r.memoizedState!==null&&_g(r,a,o);else if(r.tag===19)_g(r,a,o);else if(r.child!==null){r.child.return=r,r=r.child;continue}if(r===o)break e;for(;r.sibling===null;){if(r.return===null||r.return===o)break e;r=r.return}r.sibling.return=r.return,r=r.sibling}c&=1}if(ht(kt,c),(o.mode&1)===0)o.memoizedState=null;else switch(h){case"forwards":for(a=o.child,h=null;a!==null;)r=a.alternate,r!==null&&bl(r)===null&&(h=a),a=a.sibling;a=h,a===null?(h=o.child,o.child=null):(h=a.sibling,a.sibling=null),_d(o,!1,h,a,v);break;case"backwards":for(a=null,h=o.child,o.child=null;h!==null;){if(r=h.alternate,r!==null&&bl(r)===null){o.child=h;break}r=h.sibling,h.sibling=a,a=h,h=r}_d(o,!0,a,null,v);break;case"together":_d(o,!1,null,null,void 0);break;default:o.memoizedState=null}return o.child}function Dl(r,o){(o.mode&1)===0&&r!==null&&(r.alternate=null,o.alternate=null,o.flags|=2)}function Hr(r,o,a){if(r!==null&&(o.dependencies=r.dependencies),Yo|=o.lanes,(a&o.childLanes)===0)return null;if(r!==null&&o.child!==r.child)throw Error(n(153));if(o.child!==null){for(r=o.child,a=Eo(r,r.pendingProps),o.child=a,a.return=o;r.sibling!==null;)r=r.sibling,a=a.sibling=Eo(r,r.pendingProps),a.return=o;a.sibling=null}return o.child}function fk(r,o,a){switch(o.tag){case 3:bg(o),ji();break;case 5:Vm(o);break;case 1:En(o.type)&&fl(o);break;case 4:od(o,o.stateNode.containerInfo);break;case 10:var c=o.type._context,h=o.memoizedProps.value;ht(yl,c._currentValue),c._currentValue=h;break;case 13:if(c=o.memoizedState,c!==null)return c.dehydrated!==null?(ht(kt,kt.current&1),o.flags|=128,null):(a&o.child.childLanes)!==0?Eg(r,o,a):(ht(kt,kt.current&1),r=Hr(r,o,a),r!==null?r.sibling:null);ht(kt,kt.current&1);break;case 19:if(c=(a&o.childLanes)!==0,(r.flags&128)!==0){if(c)return Cg(r,o,a);o.flags|=128}if(h=o.memoizedState,h!==null&&(h.rendering=null,h.tail=null,h.lastEffect=null),ht(kt,kt.current),c)break;return null;case 22:case 23:return o.lanes=0,wg(r,o,a)}return Hr(r,o,a)}var Pg,Cd,Tg,Rg;Pg=function(r,o){for(var a=o.child;a!==null;){if(a.tag===5||a.tag===6)r.appendChild(a.stateNode);else if(a.tag!==4&&a.child!==null){a.child.return=a,a=a.child;continue}if(a===o)break;for(;a.sibling===null;){if(a.return===null||a.return===o)return;a=a.return}a.sibling.return=a.return,a=a.sibling}},Cd=function(){},Tg=function(r,o,a,c){var h=r.memoizedProps;if(h!==c){r=o.stateNode,Ko(_r.current);var v=null;switch(a){case"input":h=On(r,h),c=On(r,c),v=[];break;case"select":h=ee({},h,{value:void 0}),c=ee({},c,{value:void 0}),v=[];break;case"textarea":h=H(r,h),c=H(r,c),v=[];break;default:typeof h.onClick!="function"&&typeof c.onClick=="function"&&(r.onclick=ul)}Yn(a,c);var w;a=null;for(W in h)if(!c.hasOwnProperty(W)&&h.hasOwnProperty(W)&&h[W]!=null)if(W==="style"){var E=h[W];for(w in E)E.hasOwnProperty(w)&&(a||(a={}),a[w]="")}else W!=="dangerouslySetInnerHTML"&&W!=="children"&&W!=="suppressContentEditableWarning"&&W!=="suppressHydrationWarning"&&W!=="autoFocus"&&(s.hasOwnProperty(W)?v||(v=[]):(v=v||[]).push(W,null));for(W in c){var D=c[W];if(E=h!=null?h[W]:void 0,c.hasOwnProperty(W)&&D!==E&&(D!=null||E!=null))if(W==="style")if(E){for(w in E)!E.hasOwnProperty(w)||D&&D.hasOwnProperty(w)||(a||(a={}),a[w]="");for(w in D)D.hasOwnProperty(w)&&E[w]!==D[w]&&(a||(a={}),a[w]=D[w])}else a||(v||(v=[]),v.push(W,a)),a=D;else W==="dangerouslySetInnerHTML"?(D=D?D.__html:void 0,E=E?E.__html:void 0,D!=null&&E!==D&&(v=v||[]).push(W,D)):W==="children"?typeof D!="string"&&typeof D!="number"||(v=v||[]).push(W,""+D):W!=="suppressContentEditableWarning"&&W!=="suppressHydrationWarning"&&(s.hasOwnProperty(W)?(D!=null&&W==="onScroll"&&gt("scroll",r),v||E===D||(v=[])):(v=v||[]).push(W,D))}a&&(v=v||[]).push("style",a);var W=v;(o.updateQueue=W)&&(o.flags|=4)}},Rg=function(r,o,a,c){a!==c&&(o.flags|=4)};function Ks(r,o){if(!yt)switch(r.tailMode){case"hidden":o=r.tail;for(var a=null;o!==null;)o.alternate!==null&&(a=o),o=o.sibling;a===null?r.tail=null:a.sibling=null;break;case"collapsed":a=r.tail;for(var c=null;a!==null;)a.alternate!==null&&(c=a),a=a.sibling;c===null?o||r.tail===null?r.tail=null:r.tail.sibling=null:c.sibling=null}}function pn(r){var o=r.alternate!==null&&r.alternate.child===r.child,a=0,c=0;if(o)for(var h=r.child;h!==null;)a|=h.lanes|h.childLanes,c|=h.subtreeFlags&14680064,c|=h.flags&14680064,h.return=r,h=h.sibling;else for(h=r.child;h!==null;)a|=h.lanes|h.childLanes,c|=h.subtreeFlags,c|=h.flags,h.return=r,h=h.sibling;return r.subtreeFlags|=c,r.childLanes=a,o}function hk(r,o,a){var c=o.pendingProps;switch(Gc(o),o.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return pn(o),null;case 1:return En(o.type)&&dl(),pn(o),null;case 3:return c=o.stateNode,Ii(),vt(kn),vt(fn),ad(),c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),(r===null||r.child===null)&&(gl(o)?o.flags|=4:r===null||r.memoizedState.isDehydrated&&(o.flags&256)===0||(o.flags|=1024,fr!==null&&(zd(fr),fr=null))),Cd(r,o),pn(o),null;case 5:id(o);var h=Ko(Us.current);if(a=o.type,r!==null&&o.stateNode!=null)Tg(r,o,a,c,h),r.ref!==o.ref&&(o.flags|=512,o.flags|=2097152);else{if(!c){if(o.stateNode===null)throw Error(n(166));return pn(o),null}if(r=Ko(_r.current),gl(o)){c=o.stateNode,a=o.type;var v=o.memoizedProps;switch(c[Er]=o,c[zs]=v,r=(o.mode&1)!==0,a){case"dialog":gt("cancel",c),gt("close",c);break;case"iframe":case"object":case"embed":gt("load",c);break;case"video":case"audio":for(h=0;h<js.length;h++)gt(js[h],c);break;case"source":gt("error",c);break;case"img":case"image":case"link":gt("error",c),gt("load",c);break;case"details":gt("toggle",c);break;case"input":jr(c,v),gt("invalid",c);break;case"select":c._wrapperState={wasMultiple:!!v.multiple},gt("invalid",c);break;case"textarea":de(c,v),gt("invalid",c)}Yn(a,v),h=null;for(var w in v)if(v.hasOwnProperty(w)){var E=v[w];w==="children"?typeof E=="string"?c.textContent!==E&&(v.suppressHydrationWarning!==!0&&ll(c.textContent,E,r),h=["children",E]):typeof E=="number"&&c.textContent!==""+E&&(v.suppressHydrationWarning!==!0&&ll(c.textContent,E,r),h=["children",""+E]):s.hasOwnProperty(w)&&E!=null&&w==="onScroll"&&gt("scroll",c)}switch(a){case"input":on(c),ro(c,v,!0);break;case"textarea":on(c),te(c);break;case"select":case"option":break;default:typeof v.onClick=="function"&&(c.onclick=ul)}c=h,o.updateQueue=c,c!==null&&(o.flags|=4)}else{w=h.nodeType===9?h:h.ownerDocument,r==="http://www.w3.org/1999/xhtml"&&(r=be(a)),r==="http://www.w3.org/1999/xhtml"?a==="script"?(r=w.createElement("div"),r.innerHTML="<script><\/script>",r=r.removeChild(r.firstChild)):typeof c.is=="string"?r=w.createElement(a,{is:c.is}):(r=w.createElement(a),a==="select"&&(w=r,c.multiple?w.multiple=!0:c.size&&(w.size=c.size))):r=w.createElementNS(r,a),r[Er]=o,r[zs]=c,Pg(r,o,!1,!1),o.stateNode=r;e:{switch(w=Or(a,c),a){case"dialog":gt("cancel",r),gt("close",r),h=c;break;case"iframe":case"object":case"embed":gt("load",r),h=c;break;case"video":case"audio":for(h=0;h<js.length;h++)gt(js[h],r);h=c;break;case"source":gt("error",r),h=c;break;case"img":case"image":case"link":gt("error",r),gt("load",r),h=c;break;case"details":gt("toggle",r),h=c;break;case"input":jr(r,c),h=On(r,c),gt("invalid",r);break;case"option":h=c;break;case"select":r._wrapperState={wasMultiple:!!c.multiple},h=ee({},c,{value:void 0}),gt("invalid",r);break;case"textarea":de(r,c),h=H(r,c),gt("invalid",r);break;default:h=c}Yn(a,h),E=h;for(v in E)if(E.hasOwnProperty(v)){var D=E[v];v==="style"?ur(r,D):v==="dangerouslySetInnerHTML"?(D=D?D.__html:void 0,D!=null&&at(r,D)):v==="children"?typeof D=="string"?(a!=="textarea"||D!=="")&&zt(r,D):typeof D=="number"&&zt(r,""+D):v!=="suppressContentEditableWarning"&&v!=="suppressHydrationWarning"&&v!=="autoFocus"&&(s.hasOwnProperty(v)?D!=null&&v==="onScroll"&&gt("scroll",r):D!=null&&O(r,v,D,w))}switch(a){case"input":on(r),ro(r,c,!1);break;case"textarea":on(r),te(r);break;case"option":c.value!=null&&r.setAttribute("value",""+Se(c.value));break;case"select":r.multiple=!!c.multiple,v=c.value,v!=null?V(r,!!c.multiple,v,!1):c.defaultValue!=null&&V(r,!!c.multiple,c.defaultValue,!0);break;default:typeof h.onClick=="function"&&(r.onclick=ul)}switch(a){case"button":case"input":case"select":case"textarea":c=!!c.autoFocus;break e;case"img":c=!0;break e;default:c=!1}}c&&(o.flags|=4)}o.ref!==null&&(o.flags|=512,o.flags|=2097152)}return pn(o),null;case 6:if(r&&o.stateNode!=null)Rg(r,o,r.memoizedProps,c);else{if(typeof c!="string"&&o.stateNode===null)throw Error(n(166));if(a=Ko(Us.current),Ko(_r.current),gl(o)){if(c=o.stateNode,a=o.memoizedProps,c[Er]=o,(v=c.nodeValue!==a)&&(r=Un,r!==null))switch(r.tag){case 3:ll(c.nodeValue,a,(r.mode&1)!==0);break;case 5:r.memoizedProps.suppressHydrationWarning!==!0&&ll(c.nodeValue,a,(r.mode&1)!==0)}v&&(o.flags|=4)}else c=(a.nodeType===9?a:a.ownerDocument).createTextNode(c),c[Er]=o,o.stateNode=c}return pn(o),null;case 13:if(vt(kt),c=o.memoizedState,r===null||r.memoizedState!==null&&r.memoizedState.dehydrated!==null){if(yt&&Bn!==null&&(o.mode&1)!==0&&(o.flags&128)===0)Am(),ji(),o.flags|=98560,v=!1;else if(v=gl(o),c!==null&&c.dehydrated!==null){if(r===null){if(!v)throw Error(n(318));if(v=o.memoizedState,v=v!==null?v.dehydrated:null,!v)throw Error(n(317));v[Er]=o}else ji(),(o.flags&128)===0&&(o.memoizedState=null),o.flags|=4;pn(o),v=!1}else fr!==null&&(zd(fr),fr=null),v=!0;if(!v)return o.flags&65536?o:null}return(o.flags&128)!==0?(o.lanes=a,o):(c=c!==null,c!==(r!==null&&r.memoizedState!==null)&&c&&(o.child.flags|=8192,(o.mode&1)!==0&&(r===null||(kt.current&1)!==0?Kt===0&&(Kt=3):Vd())),o.updateQueue!==null&&(o.flags|=4),pn(o),null);case 4:return Ii(),Cd(r,o),r===null&&Ls(o.stateNode.containerInfo),pn(o),null;case 10:return ed(o.type._context),pn(o),null;case 17:return En(o.type)&&dl(),pn(o),null;case 19:if(vt(kt),v=o.memoizedState,v===null)return pn(o),null;if(c=(o.flags&128)!==0,w=v.rendering,w===null)if(c)Ks(v,!1);else{if(Kt!==0||r!==null&&(r.flags&128)!==0)for(r=o.child;r!==null;){if(w=bl(r),w!==null){for(o.flags|=128,Ks(v,!1),c=w.updateQueue,c!==null&&(o.updateQueue=c,o.flags|=4),o.subtreeFlags=0,c=a,a=o.child;a!==null;)v=a,r=c,v.flags&=14680066,w=v.alternate,w===null?(v.childLanes=0,v.lanes=r,v.child=null,v.subtreeFlags=0,v.memoizedProps=null,v.memoizedState=null,v.updateQueue=null,v.dependencies=null,v.stateNode=null):(v.childLanes=w.childLanes,v.lanes=w.lanes,v.child=w.child,v.subtreeFlags=0,v.deletions=null,v.memoizedProps=w.memoizedProps,v.memoizedState=w.memoizedState,v.updateQueue=w.updateQueue,v.type=w.type,r=w.dependencies,v.dependencies=r===null?null:{lanes:r.lanes,firstContext:r.firstContext}),a=a.sibling;return ht(kt,kt.current&1|2),o.child}r=r.sibling}v.tail!==null&&nt()>Ui&&(o.flags|=128,c=!0,Ks(v,!1),o.lanes=4194304)}else{if(!c)if(r=bl(w),r!==null){if(o.flags|=128,c=!0,a=r.updateQueue,a!==null&&(o.updateQueue=a,o.flags|=4),Ks(v,!0),v.tail===null&&v.tailMode==="hidden"&&!w.alternate&&!yt)return pn(o),null}else 2*nt()-v.renderingStartTime>Ui&&a!==1073741824&&(o.flags|=128,c=!0,Ks(v,!1),o.lanes=4194304);v.isBackwards?(w.sibling=o.child,o.child=w):(a=v.last,a!==null?a.sibling=w:o.child=w,v.last=w)}return v.tail!==null?(o=v.tail,v.rendering=o,v.tail=o.sibling,v.renderingStartTime=nt(),o.sibling=null,a=kt.current,ht(kt,c?a&1|2:a&1),o):(pn(o),null);case 22:case 23:return Fd(),c=o.memoizedState!==null,r!==null&&r.memoizedState!==null!==c&&(o.flags|=8192),c&&(o.mode&1)!==0?(Wn&1073741824)!==0&&(pn(o),o.subtreeFlags&6&&(o.flags|=8192)):pn(o),null;case 24:return null;case 25:return null}throw Error(n(156,o.tag))}function pk(r,o){switch(Gc(o),o.tag){case 1:return En(o.type)&&dl(),r=o.flags,r&65536?(o.flags=r&-65537|128,o):null;case 3:return Ii(),vt(kn),vt(fn),ad(),r=o.flags,(r&65536)!==0&&(r&128)===0?(o.flags=r&-65537|128,o):null;case 5:return id(o),null;case 13:if(vt(kt),r=o.memoizedState,r!==null&&r.dehydrated!==null){if(o.alternate===null)throw Error(n(340));ji()}return r=o.flags,r&65536?(o.flags=r&-65537|128,o):null;case 19:return vt(kt),null;case 4:return Ii(),null;case 10:return ed(o.type._context),null;case 22:case 23:return Fd(),null;case 24:return null;default:return null}}var Nl=!1,mn=!1,mk=typeof WeakSet=="function"?WeakSet:Set,xe=null;function Vi(r,o){var a=r.ref;if(a!==null)if(typeof a=="function")try{a(null)}catch(c){Dt(r,o,c)}else a.current=null}function Pd(r,o,a){try{a()}catch(c){Dt(r,o,c)}}var Dg=!1;function gk(r,o){if(Fc=Qa,r=lm(),Nc(r)){if("selectionStart"in r)var a={start:r.selectionStart,end:r.selectionEnd};else e:{a=(a=r.ownerDocument)&&a.defaultView||window;var c=a.getSelection&&a.getSelection();if(c&&c.rangeCount!==0){a=c.anchorNode;var h=c.anchorOffset,v=c.focusNode;c=c.focusOffset;try{a.nodeType,v.nodeType}catch{a=null;break e}var w=0,E=-1,D=-1,W=0,J=0,ne=r,X=null;t:for(;;){for(var ye;ne!==a||h!==0&&ne.nodeType!==3||(E=w+h),ne!==v||c!==0&&ne.nodeType!==3||(D=w+c),ne.nodeType===3&&(w+=ne.nodeValue.length),(ye=ne.firstChild)!==null;)X=ne,ne=ye;for(;;){if(ne===r)break t;if(X===a&&++W===h&&(E=w),X===v&&++J===c&&(D=w),(ye=ne.nextSibling)!==null)break;ne=X,X=ne.parentNode}ne=ye}a=E===-1||D===-1?null:{start:E,end:D}}else a=null}a=a||{start:0,end:0}}else a=null;for(Vc={focusedElem:r,selectionRange:a},Qa=!1,xe=o;xe!==null;)if(o=xe,r=o.child,(o.subtreeFlags&1028)!==0&&r!==null)r.return=o,xe=r;else for(;xe!==null;){o=xe;try{var Ce=o.alternate;if((o.flags&1024)!==0)switch(o.tag){case 0:case 11:case 15:break;case 1:if(Ce!==null){var De=Ce.memoizedProps,jt=Ce.memoizedState,F=o.stateNode,A=F.getSnapshotBeforeUpdate(o.elementType===o.type?De:hr(o.type,De),jt);F.__reactInternalSnapshotBeforeUpdate=A}break;case 3:var $=o.stateNode.containerInfo;$.nodeType===1?$.textContent="":$.nodeType===9&&$.documentElement&&$.removeChild($.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(n(163))}}catch(ie){Dt(o,o.return,ie)}if(r=o.sibling,r!==null){r.return=o.return,xe=r;break}xe=o.return}return Ce=Dg,Dg=!1,Ce}function Gs(r,o,a){var c=o.updateQueue;if(c=c!==null?c.lastEffect:null,c!==null){var h=c=c.next;do{if((h.tag&r)===r){var v=h.destroy;h.destroy=void 0,v!==void 0&&Pd(o,a,v)}h=h.next}while(h!==c)}}function Al(r,o){if(o=o.updateQueue,o=o!==null?o.lastEffect:null,o!==null){var a=o=o.next;do{if((a.tag&r)===r){var c=a.create;a.destroy=c()}a=a.next}while(a!==o)}}function Td(r){var o=r.ref;if(o!==null){var a=r.stateNode;switch(r.tag){case 5:r=a;break;default:r=a}typeof o=="function"?o(r):o.current=r}}function Ng(r){var o=r.alternate;o!==null&&(r.alternate=null,Ng(o)),r.child=null,r.deletions=null,r.sibling=null,r.tag===5&&(o=r.stateNode,o!==null&&(delete o[Er],delete o[zs],delete o[Wc],delete o[Jb],delete o[qb])),r.stateNode=null,r.return=null,r.dependencies=null,r.memoizedProps=null,r.memoizedState=null,r.pendingProps=null,r.stateNode=null,r.updateQueue=null}function Ag(r){return r.tag===5||r.tag===3||r.tag===4}function Mg(r){e:for(;;){for(;r.sibling===null;){if(r.return===null||Ag(r.return))return null;r=r.return}for(r.sibling.return=r.return,r=r.sibling;r.tag!==5&&r.tag!==6&&r.tag!==18;){if(r.flags&2||r.child===null||r.tag===4)continue e;r.child.return=r,r=r.child}if(!(r.flags&2))return r.stateNode}}function Rd(r,o,a){var c=r.tag;if(c===5||c===6)r=r.stateNode,o?a.nodeType===8?a.parentNode.insertBefore(r,o):a.insertBefore(r,o):(a.nodeType===8?(o=a.parentNode,o.insertBefore(r,a)):(o=a,o.appendChild(r)),a=a._reactRootContainer,a!=null||o.onclick!==null||(o.onclick=ul));else if(c!==4&&(r=r.child,r!==null))for(Rd(r,o,a),r=r.sibling;r!==null;)Rd(r,o,a),r=r.sibling}function Dd(r,o,a){var c=r.tag;if(c===5||c===6)r=r.stateNode,o?a.insertBefore(r,o):a.appendChild(r);else if(c!==4&&(r=r.child,r!==null))for(Dd(r,o,a),r=r.sibling;r!==null;)Dd(r,o,a),r=r.sibling}var un=null,pr=!1;function wo(r,o,a){for(a=a.child;a!==null;)jg(r,o,a),a=a.sibling}function jg(r,o,a){if(ln&&typeof ln.onCommitFiberUnmount=="function")try{ln.onCommitFiberUnmount(ft,a)}catch{}switch(a.tag){case 5:mn||Vi(a,o);case 6:var c=un,h=pr;un=null,wo(r,o,a),un=c,pr=h,un!==null&&(pr?(r=un,a=a.stateNode,r.nodeType===8?r.parentNode.removeChild(a):r.removeChild(a)):un.removeChild(a.stateNode));break;case 18:un!==null&&(pr?(r=un,a=a.stateNode,r.nodeType===8?Bc(r.parentNode,a):r.nodeType===1&&Bc(r,a),Cs(r)):Bc(un,a.stateNode));break;case 4:c=un,h=pr,un=a.stateNode.containerInfo,pr=!0,wo(r,o,a),un=c,pr=h;break;case 0:case 11:case 14:case 15:if(!mn&&(c=a.updateQueue,c!==null&&(c=c.lastEffect,c!==null))){h=c=c.next;do{var v=h,w=v.destroy;v=v.tag,w!==void 0&&((v&2)!==0||(v&4)!==0)&&Pd(a,o,w),h=h.next}while(h!==c)}wo(r,o,a);break;case 1:if(!mn&&(Vi(a,o),c=a.stateNode,typeof c.componentWillUnmount=="function"))try{c.props=a.memoizedProps,c.state=a.memoizedState,c.componentWillUnmount()}catch(E){Dt(a,o,E)}wo(r,o,a);break;case 21:wo(r,o,a);break;case 22:a.mode&1?(mn=(c=mn)||a.memoizedState!==null,wo(r,o,a),mn=c):wo(r,o,a);break;default:wo(r,o,a)}}function Lg(r){var o=r.updateQueue;if(o!==null){r.updateQueue=null;var a=r.stateNode;a===null&&(a=r.stateNode=new mk),o.forEach(function(c){var h=_k.bind(null,r,c);a.has(c)||(a.add(c),c.then(h,h))})}}function mr(r,o){var a=o.deletions;if(a!==null)for(var c=0;c<a.length;c++){var h=a[c];try{var v=r,w=o,E=w;e:for(;E!==null;){switch(E.tag){case 5:un=E.stateNode,pr=!1;break e;case 3:un=E.stateNode.containerInfo,pr=!0;break e;case 4:un=E.stateNode.containerInfo,pr=!0;break e}E=E.return}if(un===null)throw Error(n(160));jg(v,w,h),un=null,pr=!1;var D=h.alternate;D!==null&&(D.return=null),h.return=null}catch(W){Dt(h,o,W)}}if(o.subtreeFlags&12854)for(o=o.child;o!==null;)Og(o,r),o=o.sibling}function Og(r,o){var a=r.alternate,c=r.flags;switch(r.tag){case 0:case 11:case 14:case 15:if(mr(o,r),Pr(r),c&4){try{Gs(3,r,r.return),Al(3,r)}catch(De){Dt(r,r.return,De)}try{Gs(5,r,r.return)}catch(De){Dt(r,r.return,De)}}break;case 1:mr(o,r),Pr(r),c&512&&a!==null&&Vi(a,a.return);break;case 5:if(mr(o,r),Pr(r),c&512&&a!==null&&Vi(a,a.return),r.flags&32){var h=r.stateNode;try{zt(h,"")}catch(De){Dt(r,r.return,De)}}if(c&4&&(h=r.stateNode,h!=null)){var v=r.memoizedProps,w=a!==null?a.memoizedProps:v,E=r.type,D=r.updateQueue;if(r.updateQueue=null,D!==null)try{E==="input"&&v.type==="radio"&&v.name!=null&&yn(h,v),Or(E,w);var W=Or(E,v);for(w=0;w<D.length;w+=2){var J=D[w],ne=D[w+1];J==="style"?ur(h,ne):J==="dangerouslySetInnerHTML"?at(h,ne):J==="children"?zt(h,ne):O(h,J,ne,W)}switch(E){case"input":zn(h,v);break;case"textarea":oe(h,v);break;case"select":var X=h._wrapperState.wasMultiple;h._wrapperState.wasMultiple=!!v.multiple;var ye=v.value;ye!=null?V(h,!!v.multiple,ye,!1):X!==!!v.multiple&&(v.defaultValue!=null?V(h,!!v.multiple,v.defaultValue,!0):V(h,!!v.multiple,v.multiple?[]:"",!1))}h[zs]=v}catch(De){Dt(r,r.return,De)}}break;case 6:if(mr(o,r),Pr(r),c&4){if(r.stateNode===null)throw Error(n(162));h=r.stateNode,v=r.memoizedProps;try{h.nodeValue=v}catch(De){Dt(r,r.return,De)}}break;case 3:if(mr(o,r),Pr(r),c&4&&a!==null&&a.memoizedState.isDehydrated)try{Cs(o.containerInfo)}catch(De){Dt(r,r.return,De)}break;case 4:mr(o,r),Pr(r);break;case 13:mr(o,r),Pr(r),h=r.child,h.flags&8192&&(v=h.memoizedState!==null,h.stateNode.isHidden=v,!v||h.alternate!==null&&h.alternate.memoizedState!==null||(Md=nt())),c&4&&Lg(r);break;case 22:if(J=a!==null&&a.memoizedState!==null,r.mode&1?(mn=(W=mn)||J,mr(o,r),mn=W):mr(o,r),Pr(r),c&8192){if(W=r.memoizedState!==null,(r.stateNode.isHidden=W)&&!J&&(r.mode&1)!==0)for(xe=r,J=r.child;J!==null;){for(ne=xe=J;xe!==null;){switch(X=xe,ye=X.child,X.tag){case 0:case 11:case 14:case 15:Gs(4,X,X.return);break;case 1:Vi(X,X.return);var Ce=X.stateNode;if(typeof Ce.componentWillUnmount=="function"){c=X,a=X.return;try{o=c,Ce.props=o.memoizedProps,Ce.state=o.memoizedState,Ce.componentWillUnmount()}catch(De){Dt(c,a,De)}}break;case 5:Vi(X,X.return);break;case 22:if(X.memoizedState!==null){Fg(ne);continue}}ye!==null?(ye.return=X,xe=ye):Fg(ne)}J=J.sibling}e:for(J=null,ne=r;;){if(ne.tag===5){if(J===null){J=ne;try{h=ne.stateNode,W?(v=h.style,typeof v.setProperty=="function"?v.setProperty("display","none","important"):v.display="none"):(E=ne.stateNode,D=ne.memoizedProps.style,w=D!=null&&D.hasOwnProperty("display")?D.display:null,E.style.display=sn("display",w))}catch(De){Dt(r,r.return,De)}}}else if(ne.tag===6){if(J===null)try{ne.stateNode.nodeValue=W?"":ne.memoizedProps}catch(De){Dt(r,r.return,De)}}else if((ne.tag!==22&&ne.tag!==23||ne.memoizedState===null||ne===r)&&ne.child!==null){ne.child.return=ne,ne=ne.child;continue}if(ne===r)break e;for(;ne.sibling===null;){if(ne.return===null||ne.return===r)break e;J===ne&&(J=null),ne=ne.return}J===ne&&(J=null),ne.sibling.return=ne.return,ne=ne.sibling}}break;case 19:mr(o,r),Pr(r),c&4&&Lg(r);break;case 21:break;default:mr(o,r),Pr(r)}}function Pr(r){var o=r.flags;if(o&2){try{e:{for(var a=r.return;a!==null;){if(Ag(a)){var c=a;break e}a=a.return}throw Error(n(160))}switch(c.tag){case 5:var h=c.stateNode;c.flags&32&&(zt(h,""),c.flags&=-33);var v=Mg(r);Dd(r,v,h);break;case 3:case 4:var w=c.stateNode.containerInfo,E=Mg(r);Rd(r,E,w);break;default:throw Error(n(161))}}catch(D){Dt(r,r.return,D)}r.flags&=-3}o&4096&&(r.flags&=-4097)}function vk(r,o,a){xe=r,zg(r)}function zg(r,o,a){for(var c=(r.mode&1)!==0;xe!==null;){var h=xe,v=h.child;if(h.tag===22&&c){var w=h.memoizedState!==null||Nl;if(!w){var E=h.alternate,D=E!==null&&E.memoizedState!==null||mn;E=Nl;var W=mn;if(Nl=w,(mn=D)&&!W)for(xe=h;xe!==null;)w=xe,D=w.child,w.tag===22&&w.memoizedState!==null?Vg(h):D!==null?(D.return=w,xe=D):Vg(h);for(;v!==null;)xe=v,zg(v),v=v.sibling;xe=h,Nl=E,mn=W}Ig(r)}else(h.subtreeFlags&8772)!==0&&v!==null?(v.return=h,xe=v):Ig(r)}}function Ig(r){for(;xe!==null;){var o=xe;if((o.flags&8772)!==0){var a=o.alternate;try{if((o.flags&8772)!==0)switch(o.tag){case 0:case 11:case 15:mn||Al(5,o);break;case 1:var c=o.stateNode;if(o.flags&4&&!mn)if(a===null)c.componentDidMount();else{var h=o.elementType===o.type?a.memoizedProps:hr(o.type,a.memoizedProps);c.componentDidUpdate(h,a.memoizedState,c.__reactInternalSnapshotBeforeUpdate)}var v=o.updateQueue;v!==null&&Fm(o,v,c);break;case 3:var w=o.updateQueue;if(w!==null){if(a=null,o.child!==null)switch(o.child.tag){case 5:a=o.child.stateNode;break;case 1:a=o.child.stateNode}Fm(o,w,a)}break;case 5:var E=o.stateNode;if(a===null&&o.flags&4){a=E;var D=o.memoizedProps;switch(o.type){case"button":case"input":case"select":case"textarea":D.autoFocus&&a.focus();break;case"img":D.src&&(a.src=D.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(o.memoizedState===null){var W=o.alternate;if(W!==null){var J=W.memoizedState;if(J!==null){var ne=J.dehydrated;ne!==null&&Cs(ne)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(n(163))}mn||o.flags&512&&Td(o)}catch(X){Dt(o,o.return,X)}}if(o===r){xe=null;break}if(a=o.sibling,a!==null){a.return=o.return,xe=a;break}xe=o.return}}function Fg(r){for(;xe!==null;){var o=xe;if(o===r){xe=null;break}var a=o.sibling;if(a!==null){a.return=o.return,xe=a;break}xe=o.return}}function Vg(r){for(;xe!==null;){var o=xe;try{switch(o.tag){case 0:case 11:case 15:var a=o.return;try{Al(4,o)}catch(D){Dt(o,a,D)}break;case 1:var c=o.stateNode;if(typeof c.componentDidMount=="function"){var h=o.return;try{c.componentDidMount()}catch(D){Dt(o,h,D)}}var v=o.return;try{Td(o)}catch(D){Dt(o,v,D)}break;case 5:var w=o.return;try{Td(o)}catch(D){Dt(o,w,D)}}}catch(D){Dt(o,o.return,D)}if(o===r){xe=null;break}var E=o.sibling;if(E!==null){E.return=o.return,xe=E;break}xe=o.return}}var yk=Math.ceil,Ml=B.ReactCurrentDispatcher,Nd=B.ReactCurrentOwner,tr=B.ReactCurrentBatchConfig,tt=0,qt=null,Ft=null,cn=0,Wn=0,$i=po(0),Kt=0,Ys=null,Yo=0,jl=0,Ad=0,Xs=null,Cn=null,Md=0,Ui=1/0,Kr=null,Ll=!1,jd=null,xo=null,Ol=!1,So=null,zl=0,Qs=0,Ld=null,Il=-1,Fl=0;function xn(){return(tt&6)!==0?nt():Il!==-1?Il:Il=nt()}function bo(r){return(r.mode&1)===0?1:(tt&2)!==0&&cn!==0?cn&-cn:tk.transition!==null?(Fl===0&&(Fl=Mp()),Fl):(r=ut,r!==0||(r=window.event,r=r===void 0?16:Up(r.type)),r)}function gr(r,o,a,c){if(50<Qs)throw Qs=0,Ld=null,Error(n(185));Ss(r,a,c),((tt&2)===0||r!==qt)&&(r===qt&&((tt&2)===0&&(jl|=a),Kt===4&&ko(r,cn)),Pn(r,c),a===1&&tt===0&&(o.mode&1)===0&&(Ui=nt()+500,hl&&go()))}function Pn(r,o){var a=r.callbackNode;tb(r,o);var c=Ga(r,r===qt?cn:0);if(c===0)a!==null&&zr(a),r.callbackNode=null,r.callbackPriority=0;else if(o=c&-c,r.callbackPriority!==o){if(a!=null&&zr(a),o===1)r.tag===0?ek(Ug.bind(null,r)):Pm(Ug.bind(null,r)),Xb(function(){(tt&6)===0&&go()}),a=null;else{switch(jp(c)){case 1:a=Ir;break;case 4:a=kr;break;case 16:a=Fr;break;case 536870912:a=Je;break;default:a=Fr}a=Xg(a,$g.bind(null,r))}r.callbackPriority=o,r.callbackNode=a}}function $g(r,o){if(Il=-1,Fl=0,(tt&6)!==0)throw Error(n(327));var a=r.callbackNode;if(Bi()&&r.callbackNode!==a)return null;var c=Ga(r,r===qt?cn:0);if(c===0)return null;if((c&30)!==0||(c&r.expiredLanes)!==0||o)o=Vl(r,c);else{o=c;var h=tt;tt|=2;var v=Wg();(qt!==r||cn!==o)&&(Kr=null,Ui=nt()+500,Qo(r,o));do try{Sk();break}catch(E){Bg(r,E)}while(!0);qc(),Ml.current=v,tt=h,Ft!==null?o=0:(qt=null,cn=0,o=Kt)}if(o!==0){if(o===2&&(h=mc(r),h!==0&&(c=h,o=Od(r,h))),o===1)throw a=Ys,Qo(r,0),ko(r,c),Pn(r,nt()),a;if(o===6)ko(r,c);else{if(h=r.current.alternate,(c&30)===0&&!wk(h)&&(o=Vl(r,c),o===2&&(v=mc(r),v!==0&&(c=v,o=Od(r,v))),o===1))throw a=Ys,Qo(r,0),ko(r,c),Pn(r,nt()),a;switch(r.finishedWork=h,r.finishedLanes=c,o){case 0:case 1:throw Error(n(345));case 2:Jo(r,Cn,Kr);break;case 3:if(ko(r,c),(c&130023424)===c&&(o=Md+500-nt(),10<o)){if(Ga(r,0)!==0)break;if(h=r.suspendedLanes,(h&c)!==c){xn(),r.pingedLanes|=r.suspendedLanes&h;break}r.timeoutHandle=Uc(Jo.bind(null,r,Cn,Kr),o);break}Jo(r,Cn,Kr);break;case 4:if(ko(r,c),(c&4194240)===c)break;for(o=r.eventTimes,h=-1;0<c;){var w=31-rt(c);v=1<<w,w=o[w],w>h&&(h=w),c&=~v}if(c=h,c=nt()-c,c=(120>c?120:480>c?480:1080>c?1080:1920>c?1920:3e3>c?3e3:4320>c?4320:1960*yk(c/1960))-c,10<c){r.timeoutHandle=Uc(Jo.bind(null,r,Cn,Kr),c);break}Jo(r,Cn,Kr);break;case 5:Jo(r,Cn,Kr);break;default:throw Error(n(329))}}}return Pn(r,nt()),r.callbackNode===a?$g.bind(null,r):null}function Od(r,o){var a=Xs;return r.current.memoizedState.isDehydrated&&(Qo(r,o).flags|=256),r=Vl(r,o),r!==2&&(o=Cn,Cn=a,o!==null&&zd(o)),r}function zd(r){Cn===null?Cn=r:Cn.push.apply(Cn,r)}function wk(r){for(var o=r;;){if(o.flags&16384){var a=o.updateQueue;if(a!==null&&(a=a.stores,a!==null))for(var c=0;c<a.length;c++){var h=a[c],v=h.getSnapshot;h=h.value;try{if(!dr(v(),h))return!1}catch{return!1}}}if(a=o.child,o.subtreeFlags&16384&&a!==null)a.return=o,o=a;else{if(o===r)break;for(;o.sibling===null;){if(o.return===null||o.return===r)return!0;o=o.return}o.sibling.return=o.return,o=o.sibling}}return!0}function ko(r,o){for(o&=~Ad,o&=~jl,r.suspendedLanes|=o,r.pingedLanes&=~o,r=r.expirationTimes;0<o;){var a=31-rt(o),c=1<<a;r[a]=-1,o&=~c}}function Ug(r){if((tt&6)!==0)throw Error(n(327));Bi();var o=Ga(r,0);if((o&1)===0)return Pn(r,nt()),null;var a=Vl(r,o);if(r.tag!==0&&a===2){var c=mc(r);c!==0&&(o=c,a=Od(r,c))}if(a===1)throw a=Ys,Qo(r,0),ko(r,o),Pn(r,nt()),a;if(a===6)throw Error(n(345));return r.finishedWork=r.current.alternate,r.finishedLanes=o,Jo(r,Cn,Kr),Pn(r,nt()),null}function Id(r,o){var a=tt;tt|=1;try{return r(o)}finally{tt=a,tt===0&&(Ui=nt()+500,hl&&go())}}function Xo(r){So!==null&&So.tag===0&&(tt&6)===0&&Bi();var o=tt;tt|=1;var a=tr.transition,c=ut;try{if(tr.transition=null,ut=1,r)return r()}finally{ut=c,tr.transition=a,tt=o,(tt&6)===0&&go()}}function Fd(){Wn=$i.current,vt($i)}function Qo(r,o){r.finishedWork=null,r.finishedLanes=0;var a=r.timeoutHandle;if(a!==-1&&(r.timeoutHandle=-1,Yb(a)),Ft!==null)for(a=Ft.return;a!==null;){var c=a;switch(Gc(c),c.tag){case 1:c=c.type.childContextTypes,c!=null&&dl();break;case 3:Ii(),vt(kn),vt(fn),ad();break;case 5:id(c);break;case 4:Ii();break;case 13:vt(kt);break;case 19:vt(kt);break;case 10:ed(c.type._context);break;case 22:case 23:Fd()}a=a.return}if(qt=r,Ft=r=Eo(r.current,null),cn=Wn=o,Kt=0,Ys=null,Ad=jl=Yo=0,Cn=Xs=null,Ho!==null){for(o=0;o<Ho.length;o++)if(a=Ho[o],c=a.interleaved,c!==null){a.interleaved=null;var h=c.next,v=a.pending;if(v!==null){var w=v.next;v.next=h,c.next=w}a.pending=c}Ho=null}return r}function Bg(r,o){do{var a=Ft;try{if(qc(),kl.current=Pl,El){for(var c=Et.memoizedState;c!==null;){var h=c.queue;h!==null&&(h.pending=null),c=c.next}El=!1}if(Go=0,Jt=Ht=Et=null,Bs=!1,Ws=0,Nd.current=null,a===null||a.return===null){Kt=1,Ys=o,Ft=null;break}e:{var v=r,w=a.return,E=a,D=o;if(o=cn,E.flags|=32768,D!==null&&typeof D=="object"&&typeof D.then=="function"){var W=D,J=E,ne=J.tag;if((J.mode&1)===0&&(ne===0||ne===11||ne===15)){var X=J.alternate;X?(J.updateQueue=X.updateQueue,J.memoizedState=X.memoizedState,J.lanes=X.lanes):(J.updateQueue=null,J.memoizedState=null)}var ye=pg(w);if(ye!==null){ye.flags&=-257,mg(ye,w,E,v,o),ye.mode&1&&hg(v,W,o),o=ye,D=W;var Ce=o.updateQueue;if(Ce===null){var De=new Set;De.add(D),o.updateQueue=De}else Ce.add(D);break e}else{if((o&1)===0){hg(v,W,o),Vd();break e}D=Error(n(426))}}else if(yt&&E.mode&1){var jt=pg(w);if(jt!==null){(jt.flags&65536)===0&&(jt.flags|=256),mg(jt,w,E,v,o),Qc(Fi(D,E));break e}}v=D=Fi(D,E),Kt!==4&&(Kt=2),Xs===null?Xs=[v]:Xs.push(v),v=w;do{switch(v.tag){case 3:v.flags|=65536,o&=-o,v.lanes|=o;var F=dg(v,D,o);Im(v,F);break e;case 1:E=D;var A=v.type,$=v.stateNode;if((v.flags&128)===0&&(typeof A.getDerivedStateFromError=="function"||$!==null&&typeof $.componentDidCatch=="function"&&(xo===null||!xo.has($)))){v.flags|=65536,o&=-o,v.lanes|=o;var ie=fg(v,E,o);Im(v,ie);break e}}v=v.return}while(v!==null)}Hg(a)}catch(Me){o=Me,Ft===a&&a!==null&&(Ft=a=a.return);continue}break}while(!0)}function Wg(){var r=Ml.current;return Ml.current=Pl,r===null?Pl:r}function Vd(){(Kt===0||Kt===3||Kt===2)&&(Kt=4),qt===null||(Yo&268435455)===0&&(jl&268435455)===0||ko(qt,cn)}function Vl(r,o){var a=tt;tt|=2;var c=Wg();(qt!==r||cn!==o)&&(Kr=null,Qo(r,o));do try{xk();break}catch(h){Bg(r,h)}while(!0);if(qc(),tt=a,Ml.current=c,Ft!==null)throw Error(n(261));return qt=null,cn=0,Kt}function xk(){for(;Ft!==null;)Zg(Ft)}function Sk(){for(;Ft!==null&&!Vo();)Zg(Ft)}function Zg(r){var o=Yg(r.alternate,r,Wn);r.memoizedProps=r.pendingProps,o===null?Hg(r):Ft=o,Nd.current=null}function Hg(r){var o=r;do{var a=o.alternate;if(r=o.return,(o.flags&32768)===0){if(a=hk(a,o,Wn),a!==null){Ft=a;return}}else{if(a=pk(a,o),a!==null){a.flags&=32767,Ft=a;return}if(r!==null)r.flags|=32768,r.subtreeFlags=0,r.deletions=null;else{Kt=6,Ft=null;return}}if(o=o.sibling,o!==null){Ft=o;return}Ft=o=r}while(o!==null);Kt===0&&(Kt=5)}function Jo(r,o,a){var c=ut,h=tr.transition;try{tr.transition=null,ut=1,bk(r,o,a,c)}finally{tr.transition=h,ut=c}return null}function bk(r,o,a,c){do Bi();while(So!==null);if((tt&6)!==0)throw Error(n(327));a=r.finishedWork;var h=r.finishedLanes;if(a===null)return null;if(r.finishedWork=null,r.finishedLanes=0,a===r.current)throw Error(n(177));r.callbackNode=null,r.callbackPriority=0;var v=a.lanes|a.childLanes;if(nb(r,v),r===qt&&(Ft=qt=null,cn=0),(a.subtreeFlags&2064)===0&&(a.flags&2064)===0||Ol||(Ol=!0,Xg(Fr,function(){return Bi(),null})),v=(a.flags&15990)!==0,(a.subtreeFlags&15990)!==0||v){v=tr.transition,tr.transition=null;var w=ut;ut=1;var E=tt;tt|=4,Nd.current=null,gk(r,a),Og(a,r),Ub(Vc),Qa=!!Fc,Vc=Fc=null,r.current=a,vk(a),cr(),tt=E,ut=w,tr.transition=v}else r.current=a;if(Ol&&(Ol=!1,So=r,zl=h),v=r.pendingLanes,v===0&&(xo=null),$o(a.stateNode),Pn(r,nt()),o!==null)for(c=r.onRecoverableError,a=0;a<o.length;a++)h=o[a],c(h.value,{componentStack:h.stack,digest:h.digest});if(Ll)throw Ll=!1,r=jd,jd=null,r;return(zl&1)!==0&&r.tag!==0&&Bi(),v=r.pendingLanes,(v&1)!==0?r===Ld?Qs++:(Qs=0,Ld=r):Qs=0,go(),null}function Bi(){if(So!==null){var r=jp(zl),o=tr.transition,a=ut;try{if(tr.transition=null,ut=16>r?16:r,So===null)var c=!1;else{if(r=So,So=null,zl=0,(tt&6)!==0)throw Error(n(331));var h=tt;for(tt|=4,xe=r.current;xe!==null;){var v=xe,w=v.child;if((xe.flags&16)!==0){var E=v.deletions;if(E!==null){for(var D=0;D<E.length;D++){var W=E[D];for(xe=W;xe!==null;){var J=xe;switch(J.tag){case 0:case 11:case 15:Gs(8,J,v)}var ne=J.child;if(ne!==null)ne.return=J,xe=ne;else for(;xe!==null;){J=xe;var X=J.sibling,ye=J.return;if(Ng(J),J===W){xe=null;break}if(X!==null){X.return=ye,xe=X;break}xe=ye}}}var Ce=v.alternate;if(Ce!==null){var De=Ce.child;if(De!==null){Ce.child=null;do{var jt=De.sibling;De.sibling=null,De=jt}while(De!==null)}}xe=v}}if((v.subtreeFlags&2064)!==0&&w!==null)w.return=v,xe=w;else e:for(;xe!==null;){if(v=xe,(v.flags&2048)!==0)switch(v.tag){case 0:case 11:case 15:Gs(9,v,v.return)}var F=v.sibling;if(F!==null){F.return=v.return,xe=F;break e}xe=v.return}}var A=r.current;for(xe=A;xe!==null;){w=xe;var $=w.child;if((w.subtreeFlags&2064)!==0&&$!==null)$.return=w,xe=$;else e:for(w=A;xe!==null;){if(E=xe,(E.flags&2048)!==0)try{switch(E.tag){case 0:case 11:case 15:Al(9,E)}}catch(Me){Dt(E,E.return,Me)}if(E===w){xe=null;break e}var ie=E.sibling;if(ie!==null){ie.return=E.return,xe=ie;break e}xe=E.return}}if(tt=h,go(),ln&&typeof ln.onPostCommitFiberRoot=="function")try{ln.onPostCommitFiberRoot(ft,r)}catch{}c=!0}return c}finally{ut=a,tr.transition=o}}return!1}function Kg(r,o,a){o=Fi(a,o),o=dg(r,o,1),r=yo(r,o,1),o=xn(),r!==null&&(Ss(r,1,o),Pn(r,o))}function Dt(r,o,a){if(r.tag===3)Kg(r,r,a);else for(;o!==null;){if(o.tag===3){Kg(o,r,a);break}else if(o.tag===1){var c=o.stateNode;if(typeof o.type.getDerivedStateFromError=="function"||typeof c.componentDidCatch=="function"&&(xo===null||!xo.has(c))){r=Fi(a,r),r=fg(o,r,1),o=yo(o,r,1),r=xn(),o!==null&&(Ss(o,1,r),Pn(o,r));break}}o=o.return}}function kk(r,o,a){var c=r.pingCache;c!==null&&c.delete(o),o=xn(),r.pingedLanes|=r.suspendedLanes&a,qt===r&&(cn&a)===a&&(Kt===4||Kt===3&&(cn&130023424)===cn&&500>nt()-Md?Qo(r,0):Ad|=a),Pn(r,o)}function Gg(r,o){o===0&&((r.mode&1)===0?o=1:(o=Ka,Ka<<=1,(Ka&130023424)===0&&(Ka=4194304)));var a=xn();r=Wr(r,o),r!==null&&(Ss(r,o,a),Pn(r,a))}function Ek(r){var o=r.memoizedState,a=0;o!==null&&(a=o.retryLane),Gg(r,a)}function _k(r,o){var a=0;switch(r.tag){case 13:var c=r.stateNode,h=r.memoizedState;h!==null&&(a=h.retryLane);break;case 19:c=r.stateNode;break;default:throw Error(n(314))}c!==null&&c.delete(o),Gg(r,a)}var Yg;Yg=function(r,o,a){if(r!==null)if(r.memoizedProps!==o.pendingProps||kn.current)_n=!0;else{if((r.lanes&a)===0&&(o.flags&128)===0)return _n=!1,fk(r,o,a);_n=(r.flags&131072)!==0}else _n=!1,yt&&(o.flags&1048576)!==0&&Tm(o,ml,o.index);switch(o.lanes=0,o.tag){case 2:var c=o.type;Dl(r,o),r=o.pendingProps;var h=Ni(o,fn.current);zi(o,a),h=cd(null,o,c,r,h,a);var v=dd();return o.flags|=1,typeof h=="object"&&h!==null&&typeof h.render=="function"&&h.$$typeof===void 0?(o.tag=1,o.memoizedState=null,o.updateQueue=null,En(c)?(v=!0,fl(o)):v=!1,o.memoizedState=h.state!==null&&h.state!==void 0?h.state:null,rd(o),h.updater=Tl,o.stateNode=h,h._reactInternals=o,vd(o,c,r,a),o=Sd(null,o,c,!0,v,a)):(o.tag=0,yt&&v&&Kc(o),wn(null,o,h,a),o=o.child),o;case 16:c=o.elementType;e:{switch(Dl(r,o),r=o.pendingProps,h=c._init,c=h(c._payload),o.type=c,h=o.tag=Pk(c),r=hr(c,r),h){case 0:o=xd(null,o,c,r,a);break e;case 1:o=Sg(null,o,c,r,a);break e;case 11:o=gg(null,o,c,r,a);break e;case 14:o=vg(null,o,c,hr(c.type,r),a);break e}throw Error(n(306,c,""))}return o;case 0:return c=o.type,h=o.pendingProps,h=o.elementType===c?h:hr(c,h),xd(r,o,c,h,a);case 1:return c=o.type,h=o.pendingProps,h=o.elementType===c?h:hr(c,h),Sg(r,o,c,h,a);case 3:e:{if(bg(o),r===null)throw Error(n(387));c=o.pendingProps,v=o.memoizedState,h=v.element,zm(r,o),Sl(o,c,null,a);var w=o.memoizedState;if(c=w.element,v.isDehydrated)if(v={element:c,isDehydrated:!1,cache:w.cache,pendingSuspenseBoundaries:w.pendingSuspenseBoundaries,transitions:w.transitions},o.updateQueue.baseState=v,o.memoizedState=v,o.flags&256){h=Fi(Error(n(423)),o),o=kg(r,o,c,a,h);break e}else if(c!==h){h=Fi(Error(n(424)),o),o=kg(r,o,c,a,h);break e}else for(Bn=ho(o.stateNode.containerInfo.firstChild),Un=o,yt=!0,fr=null,a=Lm(o,null,c,a),o.child=a;a;)a.flags=a.flags&-3|4096,a=a.sibling;else{if(ji(),c===h){o=Hr(r,o,a);break e}wn(r,o,c,a)}o=o.child}return o;case 5:return Vm(o),r===null&&Xc(o),c=o.type,h=o.pendingProps,v=r!==null?r.memoizedProps:null,w=h.children,$c(c,h)?w=null:v!==null&&$c(c,v)&&(o.flags|=32),xg(r,o),wn(r,o,w,a),o.child;case 6:return r===null&&Xc(o),null;case 13:return Eg(r,o,a);case 4:return od(o,o.stateNode.containerInfo),c=o.pendingProps,r===null?o.child=Li(o,null,c,a):wn(r,o,c,a),o.child;case 11:return c=o.type,h=o.pendingProps,h=o.elementType===c?h:hr(c,h),gg(r,o,c,h,a);case 7:return wn(r,o,o.pendingProps,a),o.child;case 8:return wn(r,o,o.pendingProps.children,a),o.child;case 12:return wn(r,o,o.pendingProps.children,a),o.child;case 10:e:{if(c=o.type._context,h=o.pendingProps,v=o.memoizedProps,w=h.value,ht(yl,c._currentValue),c._currentValue=w,v!==null)if(dr(v.value,w)){if(v.children===h.children&&!kn.current){o=Hr(r,o,a);break e}}else for(v=o.child,v!==null&&(v.return=o);v!==null;){var E=v.dependencies;if(E!==null){w=v.child;for(var D=E.firstContext;D!==null;){if(D.context===c){if(v.tag===1){D=Zr(-1,a&-a),D.tag=2;var W=v.updateQueue;if(W!==null){W=W.shared;var J=W.pending;J===null?D.next=D:(D.next=J.next,J.next=D),W.pending=D}}v.lanes|=a,D=v.alternate,D!==null&&(D.lanes|=a),td(v.return,a,o),E.lanes|=a;break}D=D.next}}else if(v.tag===10)w=v.type===o.type?null:v.child;else if(v.tag===18){if(w=v.return,w===null)throw Error(n(341));w.lanes|=a,E=w.alternate,E!==null&&(E.lanes|=a),td(w,a,o),w=v.sibling}else w=v.child;if(w!==null)w.return=v;else for(w=v;w!==null;){if(w===o){w=null;break}if(v=w.sibling,v!==null){v.return=w.return,w=v;break}w=w.return}v=w}wn(r,o,h.children,a),o=o.child}return o;case 9:return h=o.type,c=o.pendingProps.children,zi(o,a),h=qn(h),c=c(h),o.flags|=1,wn(r,o,c,a),o.child;case 14:return c=o.type,h=hr(c,o.pendingProps),h=hr(c.type,h),vg(r,o,c,h,a);case 15:return yg(r,o,o.type,o.pendingProps,a);case 17:return c=o.type,h=o.pendingProps,h=o.elementType===c?h:hr(c,h),Dl(r,o),o.tag=1,En(c)?(r=!0,fl(o)):r=!1,zi(o,a),ug(o,c,h),vd(o,c,h,a),Sd(null,o,c,!0,r,a);case 19:return Cg(r,o,a);case 22:return wg(r,o,a)}throw Error(n(156,o.tag))};function Xg(r,o){return mt(r,o)}function Ck(r,o,a,c){this.tag=r,this.key=a,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=o,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=c,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function nr(r,o,a,c){return new Ck(r,o,a,c)}function $d(r){return r=r.prototype,!(!r||!r.isReactComponent)}function Pk(r){if(typeof r=="function")return $d(r)?1:0;if(r!=null){if(r=r.$$typeof,r===he)return 11;if(r===Le)return 14}return 2}function Eo(r,o){var a=r.alternate;return a===null?(a=nr(r.tag,o,r.key,r.mode),a.elementType=r.elementType,a.type=r.type,a.stateNode=r.stateNode,a.alternate=r,r.alternate=a):(a.pendingProps=o,a.type=r.type,a.flags=0,a.subtreeFlags=0,a.deletions=null),a.flags=r.flags&14680064,a.childLanes=r.childLanes,a.lanes=r.lanes,a.child=r.child,a.memoizedProps=r.memoizedProps,a.memoizedState=r.memoizedState,a.updateQueue=r.updateQueue,o=r.dependencies,a.dependencies=o===null?null:{lanes:o.lanes,firstContext:o.firstContext},a.sibling=r.sibling,a.index=r.index,a.ref=r.ref,a}function $l(r,o,a,c,h,v){var w=2;if(c=r,typeof r=="function")$d(r)&&(w=1);else if(typeof r=="string")w=5;else e:switch(r){case R:return qo(a.children,h,v,o);case I:w=8,h|=8;break;case ae:return r=nr(12,a,o,h|2),r.elementType=ae,r.lanes=v,r;case ge:return r=nr(13,a,o,h),r.elementType=ge,r.lanes=v,r;case Ne:return r=nr(19,a,o,h),r.elementType=Ne,r.lanes=v,r;case ue:return Ul(a,h,v,o);default:if(typeof r=="object"&&r!==null)switch(r.$$typeof){case le:w=10;break e;case Ie:w=9;break e;case he:w=11;break e;case Le:w=14;break e;case ve:w=16,c=null;break e}throw Error(n(130,r==null?r:typeof r,""))}return o=nr(w,a,o,h),o.elementType=r,o.type=c,o.lanes=v,o}function qo(r,o,a,c){return r=nr(7,r,c,o),r.lanes=a,r}function Ul(r,o,a,c){return r=nr(22,r,c,o),r.elementType=ue,r.lanes=a,r.stateNode={isHidden:!1},r}function Ud(r,o,a){return r=nr(6,r,null,o),r.lanes=a,r}function Bd(r,o,a){return o=nr(4,r.children!==null?r.children:[],r.key,o),o.lanes=a,o.stateNode={containerInfo:r.containerInfo,pendingChildren:null,implementation:r.implementation},o}function Tk(r,o,a,c,h){this.tag=o,this.containerInfo=r,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gc(0),this.expirationTimes=gc(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gc(0),this.identifierPrefix=c,this.onRecoverableError=h,this.mutableSourceEagerHydrationData=null}function Wd(r,o,a,c,h,v,w,E,D){return r=new Tk(r,o,a,E,D),o===1?(o=1,v===!0&&(o|=8)):o=0,v=nr(3,null,null,o),r.current=v,v.stateNode=r,v.memoizedState={element:c,isDehydrated:a,cache:null,transitions:null,pendingSuspenseBoundaries:null},rd(v),r}function Rk(r,o,a){var c=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:re,key:c==null?null:""+c,children:r,containerInfo:o,implementation:a}}function Qg(r){if(!r)return mo;r=r._reactInternals;e:{if(ke(r)!==r||r.tag!==1)throw Error(n(170));var o=r;do{switch(o.tag){case 3:o=o.stateNode.context;break e;case 1:if(En(o.type)){o=o.stateNode.__reactInternalMemoizedMergedChildContext;break e}}o=o.return}while(o!==null);throw Error(n(171))}if(r.tag===1){var a=r.type;if(En(a))return _m(r,a,o)}return o}function Jg(r,o,a,c,h,v,w,E,D){return r=Wd(a,c,!0,r,h,v,w,E,D),r.context=Qg(null),a=r.current,c=xn(),h=bo(a),v=Zr(c,h),v.callback=o??null,yo(a,v,h),r.current.lanes=h,Ss(r,h,c),Pn(r,c),r}function Bl(r,o,a,c){var h=o.current,v=xn(),w=bo(h);return a=Qg(a),o.context===null?o.context=a:o.pendingContext=a,o=Zr(v,w),o.payload={element:r},c=c===void 0?null:c,c!==null&&(o.callback=c),r=yo(h,o,w),r!==null&&(gr(r,h,w,v),xl(r,h,w)),w}function Wl(r){if(r=r.current,!r.child)return null;switch(r.child.tag){case 5:return r.child.stateNode;default:return r.child.stateNode}}function qg(r,o){if(r=r.memoizedState,r!==null&&r.dehydrated!==null){var a=r.retryLane;r.retryLane=a!==0&&a<o?a:o}}function Zd(r,o){qg(r,o),(r=r.alternate)&&qg(r,o)}function Dk(){return null}var ev=typeof reportError=="function"?reportError:function(r){console.error(r)};function Hd(r){this._internalRoot=r}Zl.prototype.render=Hd.prototype.render=function(r){var o=this._internalRoot;if(o===null)throw Error(n(409));Bl(r,o,null,null)},Zl.prototype.unmount=Hd.prototype.unmount=function(){var r=this._internalRoot;if(r!==null){this._internalRoot=null;var o=r.containerInfo;Xo(function(){Bl(null,r,null,null)}),o[Vr]=null}};function Zl(r){this._internalRoot=r}Zl.prototype.unstable_scheduleHydration=function(r){if(r){var o=zp();r={blockedOn:null,target:r,priority:o};for(var a=0;a<uo.length&&o!==0&&o<uo[a].priority;a++);uo.splice(a,0,r),a===0&&Vp(r)}};function Kd(r){return!(!r||r.nodeType!==1&&r.nodeType!==9&&r.nodeType!==11)}function Hl(r){return!(!r||r.nodeType!==1&&r.nodeType!==9&&r.nodeType!==11&&(r.nodeType!==8||r.nodeValue!==" react-mount-point-unstable "))}function tv(){}function Nk(r,o,a,c,h){if(h){if(typeof c=="function"){var v=c;c=function(){var W=Wl(w);v.call(W)}}var w=Jg(o,c,r,0,null,!1,!1,"",tv);return r._reactRootContainer=w,r[Vr]=w.current,Ls(r.nodeType===8?r.parentNode:r),Xo(),w}for(;h=r.lastChild;)r.removeChild(h);if(typeof c=="function"){var E=c;c=function(){var W=Wl(D);E.call(W)}}var D=Wd(r,0,!1,null,null,!1,!1,"",tv);return r._reactRootContainer=D,r[Vr]=D.current,Ls(r.nodeType===8?r.parentNode:r),Xo(function(){Bl(o,D,a,c)}),D}function Kl(r,o,a,c,h){var v=a._reactRootContainer;if(v){var w=v;if(typeof h=="function"){var E=h;h=function(){var D=Wl(w);E.call(D)}}Bl(o,w,r,h)}else w=Nk(a,o,r,h,c);return Wl(w)}Lp=function(r){switch(r.tag){case 3:var o=r.stateNode;if(o.current.memoizedState.isDehydrated){var a=xs(o.pendingLanes);a!==0&&(vc(o,a|1),Pn(o,nt()),(tt&6)===0&&(Ui=nt()+500,go()))}break;case 13:Xo(function(){var c=Wr(r,1);if(c!==null){var h=xn();gr(c,r,1,h)}}),Zd(r,1)}},yc=function(r){if(r.tag===13){var o=Wr(r,134217728);if(o!==null){var a=xn();gr(o,r,134217728,a)}Zd(r,134217728)}},Op=function(r){if(r.tag===13){var o=bo(r),a=Wr(r,o);if(a!==null){var c=xn();gr(a,r,o,c)}Zd(r,o)}},zp=function(){return ut},Ip=function(r,o){var a=ut;try{return ut=r,o()}finally{ut=a}},oo=function(r,o,a){switch(o){case"input":if(zn(r,a),o=a.name,a.type==="radio"&&o!=null){for(a=r;a.parentNode;)a=a.parentNode;for(a=a.querySelectorAll("input[name="+JSON.stringify(""+o)+'][type="radio"]'),o=0;o<a.length;o++){var c=a[o];if(c!==r&&c.form===r.form){var h=cl(c);if(!h)throw Error(n(90));et(c),zn(c,h)}}}break;case"textarea":oe(r,a);break;case"select":o=a.value,o!=null&&V(r,!!a.multiple,o,!1)}},Tt=Id,Mt=Xo;var Ak={usingClientEntryPoint:!1,Events:[Is,Ri,cl,$e,bt,Id]},Js={findFiberByHostInstance:Uo,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},Mk={bundleType:Js.bundleType,version:Js.version,rendererPackageName:Js.rendererPackageName,rendererConfig:Js.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:B.ReactCurrentDispatcher,findHostInstanceByFiber:function(r){return r=lt(r),r===null?null:r.stateNode},findFiberByHostInstance:Js.findFiberByHostInstance||Dk,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Gl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Gl.isDisabled&&Gl.supportsFiber)try{ft=Gl.inject(Mk),ln=Gl}catch{}}return Tn.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Ak,Tn.createPortal=function(r,o){var a=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Kd(o))throw Error(n(200));return Rk(r,o,null,a)},Tn.createRoot=function(r,o){if(!Kd(r))throw Error(n(299));var a=!1,c="",h=ev;return o!=null&&(o.unstable_strictMode===!0&&(a=!0),o.identifierPrefix!==void 0&&(c=o.identifierPrefix),o.onRecoverableError!==void 0&&(h=o.onRecoverableError)),o=Wd(r,1,!1,null,null,a,!1,c,h),r[Vr]=o.current,Ls(r.nodeType===8?r.parentNode:r),new Hd(o)},Tn.findDOMNode=function(r){if(r==null)return null;if(r.nodeType===1)return r;var o=r._reactInternals;if(o===void 0)throw typeof r.render=="function"?Error(n(188)):(r=Object.keys(r).join(","),Error(n(268,r)));return r=lt(o),r=r===null?null:r.stateNode,r},Tn.flushSync=function(r){return Xo(r)},Tn.hydrate=function(r,o,a){if(!Hl(o))throw Error(n(200));return Kl(null,r,o,!0,a)},Tn.hydrateRoot=function(r,o,a){if(!Kd(r))throw Error(n(405));var c=a!=null&&a.hydratedSources||null,h=!1,v="",w=ev;if(a!=null&&(a.unstable_strictMode===!0&&(h=!0),a.identifierPrefix!==void 0&&(v=a.identifierPrefix),a.onRecoverableError!==void 0&&(w=a.onRecoverableError)),o=Jg(o,null,r,1,a??null,h,!1,v,w),r[Vr]=o.current,Ls(r),c)for(r=0;r<c.length;r++)a=c[r],h=a._getVersion,h=h(a._source),o.mutableSourceEagerHydrationData==null?o.mutableSourceEagerHydrationData=[a,h]:o.mutableSourceEagerHydrationData.push(a,h);return new Zl(o)},Tn.render=function(r,o,a){if(!Hl(o))throw Error(n(200));return Kl(null,r,o,!1,a)},Tn.unmountComponentAtNode=function(r){if(!Hl(r))throw Error(n(40));return r._reactRootContainer?(Xo(function(){Kl(null,null,r,!1,function(){r._reactRootContainer=null,r[Vr]=null})}),!0):!1},Tn.unstable_batchedUpdates=Id,Tn.unstable_renderSubtreeIntoContainer=function(r,o,a,c){if(!Hl(a))throw Error(n(200));if(r==null||r._reactInternals===void 0)throw Error(n(38));return Kl(r,o,a,!1,c)},Tn.version="18.3.1-next-f1338f8080-20240426",Tn}var mv;function mw(){if(mv)return Jd.exports;mv=1;function e(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(t){console.error(t)}}return e(),Jd.exports=cE(),Jd.exports}var gv;function dE(){if(gv)return Xl;gv=1;var e=mw();return Xl.createRoot=e.createRoot,Xl.hydrateRoot=e.hydrateRoot,Xl}var fE=dE(),Ph=mw();const Th=iw(Ph),hE=ow({__proto__:null,default:Th},[Ph]);/**
 * @remix-run/router v1.23.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function wt(){return wt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},wt.apply(this,arguments)}var $t;(function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"})($t||($t={}));const vv="popstate";function pE(e){e===void 0&&(e={});function t(i,s){let{pathname:l,search:u,hash:d}=i.location;return Ea("",{pathname:l,search:u,hash:d},s.state&&s.state.usr||null,s.state&&s.state.key||"default")}function n(i,s){return typeof s=="string"?s:fi(s)}return gE(t,n,null,e)}function Ye(e,t){if(e===!1||e===null||typeof e>"u")throw new Error(t)}function ls(e,t){if(!e){typeof console<"u"&&console.warn(t);try{throw new Error(t)}catch{}}}function mE(){return Math.random().toString(36).substr(2,8)}function yv(e,t){return{usr:e.state,key:e.key,idx:t}}function Ea(e,t,n,i){return n===void 0&&(n=null),wt({pathname:typeof e=="string"?e:e.pathname,search:"",hash:""},typeof t=="string"?Lo(t):t,{state:n,key:t&&t.key||i||mE()})}function fi(e){let{pathname:t="/",search:n="",hash:i=""}=e;return n&&n!=="?"&&(t+=n.charAt(0)==="?"?n:"?"+n),i&&i!=="#"&&(t+=i.charAt(0)==="#"?i:"#"+i),t}function Lo(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let i=e.indexOf("?");i>=0&&(t.search=e.substr(i),e=e.substr(0,i)),e&&(t.pathname=e)}return t}function gE(e,t,n,i){i===void 0&&(i={});let{window:s=document.defaultView,v5Compat:l=!1}=i,u=s.history,d=$t.Pop,f=null,p=m();p==null&&(p=0,u.replaceState(wt({},u.state,{idx:p}),""));function m(){return(u.state||{idx:null}).idx}function g(){d=$t.Pop;let C=m(),N=C==null?null:C-p;p=C,f&&f({action:d,location:k.location,delta:N})}function y(C,N){d=$t.Push;let M=Ea(k.location,C,N);p=m()+1;let O=yv(M,p),B=k.createHref(M);try{u.pushState(O,"",B)}catch(Z){if(Z instanceof DOMException&&Z.name==="DataCloneError")throw Z;s.location.assign(B)}l&&f&&f({action:d,location:k.location,delta:1})}function b(C,N){d=$t.Replace;let M=Ea(k.location,C,N);p=m();let O=yv(M,p),B=k.createHref(M);u.replaceState(O,"",B),l&&f&&f({action:d,location:k.location,delta:0})}function _(C){let N=s.location.origin!=="null"?s.location.origin:s.location.href,M=typeof C=="string"?C:fi(C);return M=M.replace(/ $/,"%20"),Ye(N,"No window.location.(origin|href) available to create URL for href: "+M),new URL(M,N)}let k={get action(){return d},get location(){return e(s,u)},listen(C){if(f)throw new Error("A history only accepts one active listener");return s.addEventListener(vv,g),f=C,()=>{s.removeEventListener(vv,g),f=null}},createHref(C){return t(s,C)},createURL:_,encodeLocation(C){let N=_(C);return{pathname:N.pathname,search:N.search,hash:N.hash}},push:y,replace:b,go(C){return u.go(C)}};return k}var dt;(function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"})(dt||(dt={}));const vE=new Set(["lazy","caseSensitive","path","id","index","children"]);function yE(e){return e.index===!0}function Pu(e,t,n,i){return n===void 0&&(n=[]),i===void 0&&(i={}),e.map((s,l)=>{let u=[...n,String(l)],d=typeof s.id=="string"?s.id:u.join("-");if(Ye(s.index!==!0||!s.children,"Cannot specify children on an index route"),Ye(!i[d],'Found a route id collision on id "'+d+`".  Route id's must be globally unique within Data Router usages`),yE(s)){let f=wt({},s,t(s),{id:d});return i[d]=f,f}else{let f=wt({},s,t(s),{id:d,children:void 0});return i[d]=f,s.children&&(f.children=Pu(s.children,t,u,i)),f}})}function ri(e,t,n){return n===void 0&&(n="/"),gu(e,t,n,!1)}function gu(e,t,n,i){let s=typeof t=="string"?Lo(t):t,l=Ar(s.pathname||"/",n);if(l==null)return null;let u=vw(e);wE(u);let d=null;for(let f=0;d==null&&f<u.length;++f){let p=DE(l);d=TE(u[f],p,i)}return d}function gw(e,t){let{route:n,pathname:i,params:s}=e;return{id:n.id,pathname:i,params:s,data:t[n.id],handle:n.handle}}function vw(e,t,n,i){t===void 0&&(t=[]),n===void 0&&(n=[]),i===void 0&&(i="");let s=(l,u,d)=>{let f={relativePath:d===void 0?l.path||"":d,caseSensitive:l.caseSensitive===!0,childrenIndex:u,route:l};f.relativePath.startsWith("/")&&(Ye(f.relativePath.startsWith(i),'Absolute route path "'+f.relativePath+'" nested under path '+('"'+i+'" is not valid. An absolute child route path ')+"must start with the combined path of all its parent routes."),f.relativePath=f.relativePath.slice(i.length));let p=Jr([i,f.relativePath]),m=n.concat(f);l.children&&l.children.length>0&&(Ye(l.index!==!0,"Index routes must not have child routes. Please remove "+('all child routes from route path "'+p+'".')),vw(l.children,t,m,p)),!(l.path==null&&!l.index)&&t.push({path:p,score:CE(p,l.index),routesMeta:m})};return e.forEach((l,u)=>{var d;if(l.path===""||!((d=l.path)!=null&&d.includes("?")))s(l,u);else for(let f of yw(l.path))s(l,u,f)}),t}function yw(e){let t=e.split("/");if(t.length===0)return[];let[n,...i]=t,s=n.endsWith("?"),l=n.replace(/\?$/,"");if(i.length===0)return s?[l,""]:[l];let u=yw(i.join("/")),d=[];return d.push(...u.map(f=>f===""?l:[l,f].join("/"))),s&&d.push(...u),d.map(f=>e.startsWith("/")&&f===""?"/":f)}function wE(e){e.sort((t,n)=>t.score!==n.score?n.score-t.score:PE(t.routesMeta.map(i=>i.childrenIndex),n.routesMeta.map(i=>i.childrenIndex)))}const xE=/^:[\w-]+$/,SE=3,bE=2,kE=1,EE=10,_E=-2,wv=e=>e==="*";function CE(e,t){let n=e.split("/"),i=n.length;return n.some(wv)&&(i+=_E),t&&(i+=bE),n.filter(s=>!wv(s)).reduce((s,l)=>s+(xE.test(l)?SE:l===""?kE:EE),i)}function PE(e,t){return e.length===t.length&&e.slice(0,-1).every((i,s)=>i===t[s])?e[e.length-1]-t[t.length-1]:0}function TE(e,t,n){n===void 0&&(n=!1);let{routesMeta:i}=e,s={},l="/",u=[];for(let d=0;d<i.length;++d){let f=i[d],p=d===i.length-1,m=l==="/"?t:t.slice(l.length)||"/",g=Tu({path:f.relativePath,caseSensitive:f.caseSensitive,end:p},m),y=f.route;if(!g&&p&&n&&!i[i.length-1].route.index&&(g=Tu({path:f.relativePath,caseSensitive:f.caseSensitive,end:!1},m)),!g)return null;Object.assign(s,g.params),u.push({params:s,pathname:Jr([l,g.pathname]),pathnameBase:ME(Jr([l,g.pathnameBase])),route:y}),g.pathnameBase!=="/"&&(l=Jr([l,g.pathnameBase]))}return u}function Tu(e,t){typeof e=="string"&&(e={path:e,caseSensitive:!1,end:!0});let[n,i]=RE(e.path,e.caseSensitive,e.end),s=t.match(n);if(!s)return null;let l=s[0],u=l.replace(/(.)\/+$/,"$1"),d=s.slice(1);return{params:i.reduce((p,m,g)=>{let{paramName:y,isOptional:b}=m;if(y==="*"){let k=d[g]||"";u=l.slice(0,l.length-k.length).replace(/(.)\/+$/,"$1")}const _=d[g];return b&&!_?p[y]=void 0:p[y]=(_||"").replace(/%2F/g,"/"),p},{}),pathname:l,pathnameBase:u,pattern:e}}function RE(e,t,n){t===void 0&&(t=!1),n===void 0&&(n=!0),ls(e==="*"||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were '+('"'+e.replace(/\*$/,"/*")+'" because the `*` character must ')+"always follow a `/` in the pattern. To get rid of this warning, "+('please change the route path to "'+e.replace(/\*$/,"/*")+'".'));let i=[],s="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(u,d,f)=>(i.push({paramName:d,isOptional:f!=null}),f?"/?([^\\/]+)?":"/([^\\/]+)"));return e.endsWith("*")?(i.push({paramName:"*"}),s+=e==="*"||e==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?s+="\\/*$":e!==""&&e!=="/"&&(s+="(?:(?=\\/|$))"),[new RegExp(s,t?void 0:"i"),i]}function DE(e){try{return e.split("/").map(t=>decodeURIComponent(t).replace(/\//g,"%2F")).join("/")}catch(t){return ls(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent '+("encoding ("+t+").")),e}}function Ar(e,t){if(t==="/")return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,i=e.charAt(n);return i&&i!=="/"?null:e.slice(n)||"/"}function NE(e,t){t===void 0&&(t="/");let{pathname:n,search:i="",hash:s=""}=typeof e=="string"?Lo(e):e;return{pathname:n?n.startsWith("/")?n:AE(n,t):t,search:jE(i),hash:LE(s)}}function AE(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach(s=>{s===".."?n.length>1&&n.pop():s!=="."&&n.push(s)}),n.length>1?n.join("/"):"/"}function tf(e,t,n,i){return"Cannot include a '"+e+"' character in a manually specified "+("`to."+t+"` field ["+JSON.stringify(i)+"].  Please separate it out to the ")+("`to."+n+"` field. Alternatively you may provide the full path as ")+'a string in <Link to="..."> and the router will parse it for you.'}function ww(e){return e.filter((t,n)=>n===0||t.route.path&&t.route.path.length>0)}function Rh(e,t){let n=ww(e);return t?n.map((i,s)=>s===n.length-1?i.pathname:i.pathnameBase):n.map(i=>i.pathnameBase)}function Dh(e,t,n,i){i===void 0&&(i=!1);let s;typeof e=="string"?s=Lo(e):(s=wt({},e),Ye(!s.pathname||!s.pathname.includes("?"),tf("?","pathname","search",s)),Ye(!s.pathname||!s.pathname.includes("#"),tf("#","pathname","hash",s)),Ye(!s.search||!s.search.includes("#"),tf("#","search","hash",s)));let l=e===""||s.pathname==="",u=l?"/":s.pathname,d;if(u==null)d=n;else{let g=t.length-1;if(!i&&u.startsWith("..")){let y=u.split("/");for(;y[0]==="..";)y.shift(),g-=1;s.pathname=y.join("/")}d=g>=0?t[g]:"/"}let f=NE(s,d),p=u&&u!=="/"&&u.endsWith("/"),m=(l||u===".")&&n.endsWith("/");return!f.pathname.endsWith("/")&&(p||m)&&(f.pathname+="/"),f}const Jr=e=>e.join("/").replace(/\/\/+/g,"/"),ME=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),jE=e=>!e||e==="?"?"":e.startsWith("?")?e:"?"+e,LE=e=>!e||e==="#"?"":e.startsWith("#")?e:"#"+e;class Ru{constructor(t,n,i,s){s===void 0&&(s=!1),this.status=t,this.statusText=n||"",this.internal=s,i instanceof Error?(this.data=i.toString(),this.error=i):this.data=i}}function hi(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.internal=="boolean"&&"data"in e}const xw=["post","put","patch","delete"],OE=new Set(xw),zE=["get",...xw],IE=new Set(zE),FE=new Set([301,302,303,307,308]),VE=new Set([307,308]),nf={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},$E={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},ea={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},Nh=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,UE=e=>({hasErrorBoundary:!!e.hasErrorBoundary}),Sw="remix-router-transitions";function BE(e){const t=e.window?e.window:typeof window<"u"?window:void 0,n=typeof t<"u"&&typeof t.document<"u"&&typeof t.document.createElement<"u",i=!n;Ye(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let s;if(e.mapRouteProperties)s=e.mapRouteProperties;else if(e.detectErrorBoundary){let T=e.detectErrorBoundary;s=L=>({hasErrorBoundary:T(L)})}else s=UE;let l={},u=Pu(e.routes,s,void 0,l),d,f=e.basename||"/",p=e.dataStrategy||KE,m=e.patchRoutesOnNavigation,g=wt({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1,v7_skipActionErrorRevalidation:!1},e.future),y=null,b=new Set,_=null,k=null,C=null,N=e.hydrationData!=null,M=ri(u,e.history.location,f),O=!1,B=null;if(M==null&&!m){let T=Rn(404,{pathname:e.history.location.pathname}),{matches:L,route:U}=Dv(u);M=L,B={[U.id]:T}}M&&!e.hydrationData&&Mt(M,u,e.history.location.pathname).active&&(M=null);let Z;if(M)if(M.some(T=>T.route.lazy))Z=!1;else if(!M.some(T=>T.route.loader))Z=!0;else if(g.v7_partialHydration){let T=e.hydrationData?e.hydrationData.loaderData:null,L=e.hydrationData?e.hydrationData.errors:null;if(L){let U=M.findIndex(Y=>L[Y.route.id]!==void 0);Z=M.slice(0,U+1).every(Y=>!zf(Y.route,T,L))}else Z=M.every(U=>!zf(U.route,T,L))}else Z=e.hydrationData!=null;else if(Z=!1,M=[],g.v7_partialHydration){let T=Mt(null,u,e.history.location.pathname);T.active&&T.matches&&(O=!0,M=T.matches)}let re,R={historyAction:e.history.action,location:e.history.location,matches:M,initialized:Z,navigation:nf,restoreScrollPosition:e.hydrationData!=null?!1:null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||B,fetchers:new Map,blockers:new Map},I=$t.Pop,ae=!1,le,Ie=!1,he=new Map,ge=null,Ne=!1,Le=!1,ve=[],ue=new Set,z=new Map,fe=0,ee=-1,j=new Map,K=new Set,q=new Map,ce=new Map,me=new Set,je=new Map,Ee=new Map,Se;function He(){if(y=e.history.listen(T=>{let{action:L,location:U,delta:Y}=T;if(Se){Se(),Se=void 0;return}ls(Ee.size===0||Y!=null,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let se=oo({currentLocation:R.location,nextLocation:U,historyAction:L});if(se&&Y!=null){let Ae=new Promise(Fe=>{Se=Fe});e.history.go(Y*-1),an(se,{state:"blocked",location:U,proceed(){an(se,{state:"proceeding",proceed:void 0,reset:void 0,location:U}),Ae.then(()=>e.history.go(Y))},reset(){let Fe=new Map(R.blockers);Fe.set(se,ea),et({blockers:Fe})}});return}return yn(L,U)}),n){a_(t,he);let T=()=>l_(t,he);t.addEventListener("pagehide",T),ge=()=>t.removeEventListener("pagehide",T)}return R.initialized||yn($t.Pop,R.location,{initialHydration:!0}),re}function st(){y&&y(),ge&&ge(),b.clear(),le&&le.abort(),R.fetchers.forEach((T,L)=>Pt(L)),R.blockers.forEach((T,L)=>In(L))}function on(T){return b.add(T),()=>b.delete(T)}function et(T,L){L===void 0&&(L={}),R=wt({},R,T);let U=[],Y=[];g.v7_fetcherPersist&&R.fetchers.forEach((se,Ae)=>{se.state==="idle"&&(me.has(Ae)?Y.push(Ae):U.push(Ae))}),me.forEach(se=>{!R.fetchers.has(se)&&!z.has(se)&&Y.push(se)}),[...b].forEach(se=>se(R,{deletedFetchers:Y,viewTransitionOpts:L.viewTransitionOpts,flushSync:L.flushSync===!0})),g.v7_fetcherPersist?(U.forEach(se=>R.fetchers.delete(se)),Y.forEach(se=>Pt(se))):Y.forEach(se=>me.delete(se))}function vn(T,L,U){var Y,se;let{flushSync:Ae}=U===void 0?{}:U,Fe=R.actionData!=null&&R.navigation.formMethod!=null&&yr(R.navigation.formMethod)&&R.navigation.state==="loading"&&((Y=T.state)==null?void 0:Y._isRedirect)!==!0,_e;L.actionData?Object.keys(L.actionData).length>0?_e=L.actionData:_e=null:Fe?_e=R.actionData:_e=null;let Re=L.loaderData?Tv(R.loaderData,L.loaderData,L.matches||[],L.errors):R.loaderData,we=R.blockers;we.size>0&&(we=new Map(we),we.forEach((Qe,Zt)=>we.set(Zt,ea)));let ke=ae===!0||R.navigation.formMethod!=null&&yr(R.navigation.formMethod)&&((se=T.state)==null?void 0:se._isRedirect)!==!0;d&&(u=d,d=void 0),Ne||I===$t.Pop||(I===$t.Push?e.history.push(T,T.state):I===$t.Replace&&e.history.replace(T,T.state));let We;if(I===$t.Pop){let Qe=he.get(R.location.pathname);Qe&&Qe.has(T.pathname)?We={currentLocation:R.location,nextLocation:T}:he.has(T.pathname)&&(We={currentLocation:T,nextLocation:R.location})}else if(Ie){let Qe=he.get(R.location.pathname);Qe?Qe.add(T.pathname):(Qe=new Set([T.pathname]),he.set(R.location.pathname,Qe)),We={currentLocation:R.location,nextLocation:T}}et(wt({},L,{actionData:_e,loaderData:Re,historyAction:I,location:T,initialized:!0,navigation:nf,revalidation:"idle",restoreScrollPosition:Tt(T,L.matches||R.matches),preventScrollReset:ke,blockers:we}),{viewTransitionOpts:We,flushSync:Ae===!0}),I=$t.Pop,ae=!1,Ie=!1,Ne=!1,Le=!1,ve=[]}async function On(T,L){if(typeof T=="number"){e.history.go(T);return}let U=Of(R.location,R.matches,f,g.v7_prependBasename,T,g.v7_relativeSplatPath,L==null?void 0:L.fromRouteId,L==null?void 0:L.relative),{path:Y,submission:se,error:Ae}=xv(g.v7_normalizeFormMethod,!1,U,L),Fe=R.location,_e=Ea(R.location,Y,L&&L.state);_e=wt({},_e,e.history.encodeLocation(_e));let Re=L&&L.replace!=null?L.replace:void 0,we=$t.Push;Re===!0?we=$t.Replace:Re===!1||se!=null&&yr(se.formMethod)&&se.formAction===R.location.pathname+R.location.search&&(we=$t.Replace);let ke=L&&"preventScrollReset"in L?L.preventScrollReset===!0:void 0,We=(L&&L.flushSync)===!0,Qe=oo({currentLocation:Fe,nextLocation:_e,historyAction:we});if(Qe){an(Qe,{state:"blocked",location:_e,proceed(){an(Qe,{state:"proceeding",proceed:void 0,reset:void 0,location:_e}),On(T,L)},reset(){let Zt=new Map(R.blockers);Zt.set(Qe,ea),et({blockers:Zt})}});return}return await yn(we,_e,{submission:se,pendingError:Ae,preventScrollReset:ke,replace:L&&L.replace,enableViewTransition:L&&L.viewTransition,flushSync:We})}function jr(){if(Ke(),et({revalidation:"loading"}),R.navigation.state!=="submitting"){if(R.navigation.state==="idle"){yn(R.historyAction,R.location,{startUninterruptedRevalidation:!0});return}yn(I||R.historyAction,R.navigation.location,{overrideNavigation:R.navigation,enableViewTransition:Ie===!0})}}async function yn(T,L,U){le&&le.abort(),le=null,I=T,Ne=(U&&U.startUninterruptedRevalidation)===!0,bt(R.location,R.matches),ae=(U&&U.preventScrollReset)===!0,Ie=(U&&U.enableViewTransition)===!0;let Y=d||u,se=U&&U.overrideNavigation,Ae=U!=null&&U.initialHydration&&R.matches&&R.matches.length>0&&!O?R.matches:ri(Y,L,f),Fe=(U&&U.flushSync)===!0;if(Ae&&R.initialized&&!Le&&qE(R.location,L)&&!(U&&U.submission&&yr(U.submission.formMethod))){vn(L,{matches:Ae},{flushSync:Fe});return}let _e=Mt(Ae,Y,L.pathname);if(_e.active&&_e.matches&&(Ae=_e.matches),!Ae){let{error:lt,notFoundMatches:qe,route:mt}=Xn(L.pathname);vn(L,{matches:qe,loaderData:{},errors:{[mt.id]:lt}},{flushSync:Fe});return}le=new AbortController;let Re=Wi(e.history,L,le.signal,U&&U.submission),we;if(U&&U.pendingError)we=[oi(Ae).route.id,{type:dt.error,error:U.pendingError}];else if(U&&U.submission&&yr(U.submission.formMethod)){let lt=await zn(Re,L,U.submission,Ae,_e.active,{replace:U.replace,flushSync:Fe});if(lt.shortCircuited)return;if(lt.pendingActionResult){let[qe,mt]=lt.pendingActionResult;if(Zn(mt)&&hi(mt.error)&&mt.error.status===404){le=null,vn(L,{matches:lt.matches,loaderData:{},errors:{[qe]:mt.error}});return}}Ae=lt.matches||Ae,we=lt.pendingActionResult,se=rf(L,U.submission),Fe=!1,_e.active=!1,Re=Wi(e.history,Re.url,Re.signal)}let{shortCircuited:ke,matches:We,loaderData:Qe,errors:Zt}=await ro(Re,L,Ae,_e.active,se,U&&U.submission,U&&U.fetcherSubmission,U&&U.replace,U&&U.initialHydration===!0,Fe,we);ke||(le=null,vn(L,wt({matches:We||Ae},Rv(we),{loaderData:Qe,errors:Zt})))}async function zn(T,L,U,Y,se,Ae){Ae===void 0&&(Ae={}),Ke();let Fe=i_(L,U);if(et({navigation:Fe},{flushSync:Ae.flushSync===!0}),se){let we=await Vn(Y,L.pathname,T.signal);if(we.type==="aborted")return{shortCircuited:!0};if(we.type==="error"){let ke=oi(we.partialMatches).route.id;return{matches:we.partialMatches,pendingActionResult:[ke,{type:dt.error,error:we.error}]}}else if(we.matches)Y=we.matches;else{let{notFoundMatches:ke,error:We,route:Qe}=Xn(L.pathname);return{matches:ke,pendingActionResult:[Qe.id,{type:dt.error,error:We}]}}}let _e,Re=aa(Y,L);if(!Re.route.action&&!Re.route.lazy)_e={type:dt.error,error:Rn(405,{method:T.method,pathname:L.pathname,routeId:Re.route.id})};else if(_e=(await te("action",R,T,[Re],Y,null))[Re.route.id],T.signal.aborted)return{shortCircuited:!0};if(ii(_e)){let we;return Ae&&Ae.replace!=null?we=Ae.replace:we=_v(_e.response.headers.get("Location"),new URL(T.url),f)===R.location.pathname+R.location.search,await oe(T,_e,!0,{submission:U,replace:we}),{shortCircuited:!0}}if(Do(_e))throw Rn(400,{type:"defer-action"});if(Zn(_e)){let we=oi(Y,Re.route.id);return(Ae&&Ae.replace)!==!0&&(I=$t.Push),{matches:Y,pendingActionResult:[we.route.id,_e]}}return{matches:Y,pendingActionResult:[Re.route.id,_e]}}async function ro(T,L,U,Y,se,Ae,Fe,_e,Re,we,ke){let We=se||rf(L,Ae),Qe=Ae||Fe||Av(We),Zt=!Ne&&(!g.v7_partialHydration||!Re);if(Y){if(Zt){let ft=Wt(ke);et(wt({navigation:We},ft!==void 0?{actionData:ft}:{}),{flushSync:we})}let Je=await Vn(U,L.pathname,T.signal);if(Je.type==="aborted")return{shortCircuited:!0};if(Je.type==="error"){let ft=oi(Je.partialMatches).route.id;return{matches:Je.partialMatches,loaderData:{},errors:{[ft]:Je.error}}}else if(Je.matches)U=Je.matches;else{let{error:ft,notFoundMatches:ln,route:$o}=Xn(L.pathname);return{matches:ln,loaderData:{},errors:{[$o.id]:ft}}}}let lt=d||u,[qe,mt]=bv(e.history,R,U,Qe,L,g.v7_partialHydration&&Re===!0,g.v7_skipActionErrorRevalidation,Le,ve,ue,me,q,K,lt,f,ke);if(Fn(Je=>!(U&&U.some(ft=>ft.route.id===Je))||qe&&qe.some(ft=>ft.route.id===Je)),ee=++fe,qe.length===0&&mt.length===0){let Je=Lr();return vn(L,wt({matches:U,loaderData:{},errors:ke&&Zn(ke[1])?{[ke[0]]:ke[1].error}:null},Rv(ke),Je?{fetchers:new Map(R.fetchers)}:{}),{flushSync:we}),{shortCircuited:!0}}if(Zt){let Je={};if(!Y){Je.navigation=We;let ft=Wt(ke);ft!==void 0&&(Je.actionData=ft)}mt.length>0&&(Je.fetchers=P(mt)),et(Je,{flushSync:we})}mt.forEach(Je=>{sn(Je.key),Je.controller&&z.set(Je.key,Je.controller)});let zr=()=>mt.forEach(Je=>sn(Je.key));le&&le.signal.addEventListener("abort",zr);let{loaderResults:Vo,fetcherResults:cr}=await be(R,U,qe,mt,T);if(T.signal.aborted)return{shortCircuited:!0};le&&le.signal.removeEventListener("abort",zr),mt.forEach(Je=>z.delete(Je.key));let nt=Ql(Vo);if(nt)return await oe(T,nt.result,!0,{replace:_e}),{shortCircuited:!0};if(nt=Ql(cr),nt)return K.add(nt.key),await oe(T,nt.result,!0,{replace:_e}),{shortCircuited:!0};let{loaderData:ws,errors:Ir}=Pv(R,U,Vo,ke,mt,cr,je);je.forEach((Je,ft)=>{Je.subscribe(ln=>{(ln||Je.done)&&je.delete(ft)})}),g.v7_partialHydration&&Re&&R.errors&&(Ir=wt({},R.errors,Ir));let kr=Lr(),Fr=Yn(ee),Si=kr||Fr||mt.length>0;return wt({matches:U,loaderData:ws,errors:Ir},Si?{fetchers:new Map(R.fetchers)}:{})}function Wt(T){if(T&&!Zn(T[1]))return{[T[0]]:T[1].data};if(R.actionData)return Object.keys(R.actionData).length===0?null:R.actionData}function P(T){return T.forEach(L=>{let U=R.fetchers.get(L.key),Y=ta(void 0,U?U.data:void 0);R.fetchers.set(L.key,Y)}),new Map(R.fetchers)}function V(T,L,U,Y){if(i)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");sn(T);let se=(Y&&Y.flushSync)===!0,Ae=d||u,Fe=Of(R.location,R.matches,f,g.v7_prependBasename,U,g.v7_relativeSplatPath,L,Y==null?void 0:Y.relative),_e=ri(Ae,Fe,f),Re=Mt(_e,Ae,Fe);if(Re.active&&Re.matches&&(_e=Re.matches),!_e){at(T,L,Rn(404,{pathname:Fe}),{flushSync:se});return}let{path:we,submission:ke,error:We}=xv(g.v7_normalizeFormMethod,!0,Fe,Y);if(We){at(T,L,We,{flushSync:se});return}let Qe=aa(_e,we),Zt=(Y&&Y.preventScrollReset)===!0;if(ke&&yr(ke.formMethod)){H(T,L,we,Qe,_e,Re.active,se,Zt,ke);return}q.set(T,{routeId:L,path:we}),de(T,L,we,Qe,_e,Re.active,se,Zt,ke)}async function H(T,L,U,Y,se,Ae,Fe,_e,Re){Ke(),q.delete(T);function we(rt){if(!rt.route.action&&!rt.route.lazy){let io=Rn(405,{method:Re.formMethod,pathname:U,routeId:L});return at(T,L,io,{flushSync:Fe}),!0}return!1}if(!Ae&&we(Y))return;let ke=R.fetchers.get(T);Ze(T,s_(Re,ke),{flushSync:Fe});let We=new AbortController,Qe=Wi(e.history,U,We.signal,Re);if(Ae){let rt=await Vn(se,new URL(Qe.url).pathname,Qe.signal,T);if(rt.type==="aborted")return;if(rt.type==="error"){at(T,L,rt.error,{flushSync:Fe});return}else if(rt.matches){if(se=rt.matches,Y=aa(se,U),we(Y))return}else{at(T,L,Rn(404,{pathname:U}),{flushSync:Fe});return}}z.set(T,We);let Zt=fe,qe=(await te("action",R,Qe,[Y],se,T))[Y.route.id];if(Qe.signal.aborted){z.get(T)===We&&z.delete(T);return}if(g.v7_fetcherPersist&&me.has(T)){if(ii(qe)||Zn(qe)){Ze(T,Po(void 0));return}}else{if(ii(qe))if(z.delete(T),ee>Zt){Ze(T,Po(void 0));return}else return K.add(T),Ze(T,ta(Re)),oe(Qe,qe,!1,{fetcherSubmission:Re,preventScrollReset:_e});if(Zn(qe)){at(T,L,qe.error);return}}if(Do(qe))throw Rn(400,{type:"defer-action"});let mt=R.navigation.location||R.location,zr=Wi(e.history,mt,We.signal),Vo=d||u,cr=R.navigation.state!=="idle"?ri(Vo,R.navigation.location,f):R.matches;Ye(cr,"Didn't find any matches after fetcher action");let nt=++fe;j.set(T,nt);let ws=ta(Re,qe.data);R.fetchers.set(T,ws);let[Ir,kr]=bv(e.history,R,cr,Re,mt,!1,g.v7_skipActionErrorRevalidation,Le,ve,ue,me,q,K,Vo,f,[Y.route.id,qe]);kr.filter(rt=>rt.key!==T).forEach(rt=>{let io=rt.key,Za=R.fetchers.get(io),pc=ta(void 0,Za?Za.data:void 0);R.fetchers.set(io,pc),sn(io),rt.controller&&z.set(io,rt.controller)}),et({fetchers:new Map(R.fetchers)});let Fr=()=>kr.forEach(rt=>sn(rt.key));We.signal.addEventListener("abort",Fr);let{loaderResults:Si,fetcherResults:Je}=await be(R,cr,Ir,kr,zr);if(We.signal.aborted)return;We.signal.removeEventListener("abort",Fr),j.delete(T),z.delete(T),kr.forEach(rt=>z.delete(rt.key));let ft=Ql(Si);if(ft)return oe(zr,ft.result,!1,{preventScrollReset:_e});if(ft=Ql(Je),ft)return K.add(ft.key),oe(zr,ft.result,!1,{preventScrollReset:_e});let{loaderData:ln,errors:$o}=Pv(R,cr,Si,void 0,kr,Je,je);if(R.fetchers.has(T)){let rt=Po(qe.data);R.fetchers.set(T,rt)}Yn(nt),R.navigation.state==="loading"&&nt>ee?(Ye(I,"Expected pending action"),le&&le.abort(),vn(R.navigation.location,{matches:cr,loaderData:ln,errors:$o,fetchers:new Map(R.fetchers)})):(et({errors:$o,loaderData:Tv(R.loaderData,ln,cr,$o),fetchers:new Map(R.fetchers)}),Le=!1)}async function de(T,L,U,Y,se,Ae,Fe,_e,Re){let we=R.fetchers.get(T);Ze(T,ta(Re,we?we.data:void 0),{flushSync:Fe});let ke=new AbortController,We=Wi(e.history,U,ke.signal);if(Ae){let qe=await Vn(se,new URL(We.url).pathname,We.signal,T);if(qe.type==="aborted")return;if(qe.type==="error"){at(T,L,qe.error,{flushSync:Fe});return}else if(qe.matches)se=qe.matches,Y=aa(se,U);else{at(T,L,Rn(404,{pathname:U}),{flushSync:Fe});return}}z.set(T,ke);let Qe=fe,lt=(await te("loader",R,We,[Y],se,T))[Y.route.id];if(Do(lt)&&(lt=await Ah(lt,We.signal,!0)||lt),z.get(T)===ke&&z.delete(T),!We.signal.aborted){if(me.has(T)){Ze(T,Po(void 0));return}if(ii(lt))if(ee>Qe){Ze(T,Po(void 0));return}else{K.add(T),await oe(We,lt,!1,{preventScrollReset:_e});return}if(Zn(lt)){at(T,L,lt.error);return}Ye(!Do(lt),"Unhandled fetcher deferred data"),Ze(T,Po(lt.data))}}async function oe(T,L,U,Y){let{submission:se,fetcherSubmission:Ae,preventScrollReset:Fe,replace:_e}=Y===void 0?{}:Y;L.response.headers.has("X-Remix-Revalidate")&&(Le=!0);let Re=L.response.headers.get("Location");Ye(Re,"Expected a Location header on the redirect Response"),Re=_v(Re,new URL(T.url),f);let we=Ea(R.location,Re,{_isRedirect:!0});if(n){let qe=!1;if(L.response.headers.has("X-Remix-Reload-Document"))qe=!0;else if(Nh.test(Re)){const mt=e.history.createURL(Re);qe=mt.origin!==t.location.origin||Ar(mt.pathname,f)==null}if(qe){_e?t.location.replace(Re):t.location.assign(Re);return}}le=null;let ke=_e===!0||L.response.headers.has("X-Remix-Replace")?$t.Replace:$t.Push,{formMethod:We,formAction:Qe,formEncType:Zt}=R.navigation;!se&&!Ae&&We&&Qe&&Zt&&(se=Av(R.navigation));let lt=se||Ae;if(VE.has(L.response.status)&&lt&&yr(lt.formMethod))await yn(ke,we,{submission:wt({},lt,{formAction:Re}),preventScrollReset:Fe||ae,enableViewTransition:U?Ie:void 0});else{let qe=rf(we,se);await yn(ke,we,{overrideNavigation:qe,fetcherSubmission:Ae,preventScrollReset:Fe||ae,enableViewTransition:U?Ie:void 0})}}async function te(T,L,U,Y,se,Ae){let Fe,_e={};try{Fe=await GE(p,T,L,U,Y,se,Ae,l,s)}catch(Re){return Y.forEach(we=>{_e[we.route.id]={type:dt.error,error:Re}}),_e}for(let[Re,we]of Object.entries(Fe))if(e_(we)){let ke=we.result;_e[Re]={type:dt.redirect,response:QE(ke,U,Re,se,f,g.v7_relativeSplatPath)}}else _e[Re]=await XE(we);return _e}async function be(T,L,U,Y,se){let Ae=T.matches,Fe=te("loader",T,se,U,L,null),_e=Promise.all(Y.map(async ke=>{if(ke.matches&&ke.match&&ke.controller){let Qe=(await te("loader",T,Wi(e.history,ke.path,ke.controller.signal),[ke.match],ke.matches,ke.key))[ke.match.route.id];return{[ke.key]:Qe}}else return Promise.resolve({[ke.key]:{type:dt.error,error:Rn(404,{pathname:ke.path})}})})),Re=await Fe,we=(await _e).reduce((ke,We)=>Object.assign(ke,We),{});return await Promise.all([r_(L,Re,se.signal,Ae,T.loaderData),o_(L,we,Y)]),{loaderResults:Re,fetcherResults:we}}function Ke(){Le=!0,ve.push(...Fn()),q.forEach((T,L)=>{z.has(L)&&ue.add(L),sn(L)})}function Ze(T,L,U){U===void 0&&(U={}),R.fetchers.set(T,L),et({fetchers:new Map(R.fetchers)},{flushSync:(U&&U.flushSync)===!0})}function at(T,L,U,Y){Y===void 0&&(Y={});let se=oi(R.matches,L);Pt(T),et({errors:{[se.route.id]:U},fetchers:new Map(R.fetchers)},{flushSync:(Y&&Y.flushSync)===!0})}function zt(T){return ce.set(T,(ce.get(T)||0)+1),me.has(T)&&me.delete(T),R.fetchers.get(T)||$E}function Pt(T){let L=R.fetchers.get(T);z.has(T)&&!(L&&L.state==="loading"&&j.has(T))&&sn(T),q.delete(T),j.delete(T),K.delete(T),g.v7_fetcherPersist&&me.delete(T),ue.delete(T),R.fetchers.delete(T)}function Gn(T){let L=(ce.get(T)||0)-1;L<=0?(ce.delete(T),me.add(T),g.v7_fetcherPersist||Pt(T)):ce.set(T,L),et({fetchers:new Map(R.fetchers)})}function sn(T){let L=z.get(T);L&&(L.abort(),z.delete(T))}function ur(T){for(let L of T){let U=zt(L),Y=Po(U.data);R.fetchers.set(L,Y)}}function Lr(){let T=[],L=!1;for(let U of K){let Y=R.fetchers.get(U);Ye(Y,"Expected fetcher: "+U),Y.state==="loading"&&(K.delete(U),T.push(U),L=!0)}return ur(T),L}function Yn(T){let L=[];for(let[U,Y]of j)if(Y<T){let se=R.fetchers.get(U);Ye(se,"Expected fetcher: "+U),se.state==="loading"&&(sn(U),j.delete(U),L.push(U))}return ur(L),L.length>0}function Or(T,L){let U=R.blockers.get(T)||ea;return Ee.get(T)!==L&&Ee.set(T,L),U}function In(T){R.blockers.delete(T),Ee.delete(T)}function an(T,L){let U=R.blockers.get(T)||ea;Ye(U.state==="unblocked"&&L.state==="blocked"||U.state==="blocked"&&L.state==="blocked"||U.state==="blocked"&&L.state==="proceeding"||U.state==="blocked"&&L.state==="unblocked"||U.state==="proceeding"&&L.state==="unblocked","Invalid blocker state transition: "+U.state+" -> "+L.state);let Y=new Map(R.blockers);Y.set(T,L),et({blockers:Y})}function oo(T){let{currentLocation:L,nextLocation:U,historyAction:Y}=T;if(Ee.size===0)return;Ee.size>1&&ls(!1,"A router only supports one blocker at a time");let se=Array.from(Ee.entries()),[Ae,Fe]=se[se.length-1],_e=R.blockers.get(Ae);if(!(_e&&_e.state==="proceeding")&&Fe({currentLocation:L,nextLocation:U,historyAction:Y}))return Ae}function Xn(T){let L=Rn(404,{pathname:T}),U=d||u,{matches:Y,route:se}=Dv(U);return Fn(),{notFoundMatches:Y,route:se,error:L}}function Fn(T){let L=[];return je.forEach((U,Y)=>{(!T||T(Y))&&(U.cancel(),L.push(Y),je.delete(Y))}),L}function Fo(T,L,U){if(_=T,C=L,k=U||null,!N&&R.navigation===nf){N=!0;let Y=Tt(R.location,R.matches);Y!=null&&et({restoreScrollPosition:Y})}return()=>{_=null,C=null,k=null}}function $e(T,L){return k&&k(T,L.map(Y=>gw(Y,R.loaderData)))||T.key}function bt(T,L){if(_&&C){let U=$e(T,L);_[U]=C()}}function Tt(T,L){if(_){let U=$e(T,L),Y=_[U];if(typeof Y=="number")return Y}return null}function Mt(T,L,U){if(m)if(T){if(Object.keys(T[0].params).length>0)return{active:!0,matches:gu(L,U,f,!0)}}else return{active:!0,matches:gu(L,U,f,!0)||[]};return{active:!1,matches:null}}async function Vn(T,L,U,Y){if(!m)return{type:"success",matches:T};let se=T;for(;;){let Ae=d==null,Fe=d||u,_e=l;try{await m({signal:U,path:L,matches:se,fetcherKey:Y,patch:(ke,We)=>{U.aborted||Ev(ke,We,Fe,_e,s)}})}catch(ke){return{type:"error",error:ke,partialMatches:se}}finally{Ae&&!U.aborted&&(u=[...u])}if(U.aborted)return{type:"aborted"};let Re=ri(Fe,L,f);if(Re)return{type:"success",matches:Re};let we=gu(Fe,L,f,!0);if(!we||se.length===we.length&&se.every((ke,We)=>ke.route.id===we[We].route.id))return{type:"success",matches:null};se=we}}function Rt(T){l={},d=Pu(T,s,void 0,l)}function It(T,L){let U=d==null;Ev(T,L,d||u,l,s),U&&(u=[...u],et({}))}return re={get basename(){return f},get future(){return g},get state(){return R},get routes(){return u},get window(){return t},initialize:He,subscribe:on,enableScrollRestoration:Fo,navigate:On,fetch:V,revalidate:jr,createHref:T=>e.history.createHref(T),encodeLocation:T=>e.history.encodeLocation(T),getFetcher:zt,deleteFetcher:Gn,dispose:st,getBlocker:Or,deleteBlocker:In,patchRoutes:It,_internalFetchControllers:z,_internalActiveDeferreds:je,_internalSetRoutes:Rt},re}function WE(e){return e!=null&&("formData"in e&&e.formData!=null||"body"in e&&e.body!==void 0)}function Of(e,t,n,i,s,l,u,d){let f,p;if(u){f=[];for(let g of t)if(f.push(g),g.route.id===u){p=g;break}}else f=t,p=t[t.length-1];let m=Dh(s||".",Rh(f,l),Ar(e.pathname,n)||e.pathname,d==="path");if(s==null&&(m.search=e.search,m.hash=e.hash),(s==null||s===""||s===".")&&p){let g=Mh(m.search);if(p.route.index&&!g)m.search=m.search?m.search.replace(/^\?/,"?index&"):"?index";else if(!p.route.index&&g){let y=new URLSearchParams(m.search),b=y.getAll("index");y.delete("index"),b.filter(k=>k).forEach(k=>y.append("index",k));let _=y.toString();m.search=_?"?"+_:""}}return i&&n!=="/"&&(m.pathname=m.pathname==="/"?n:Jr([n,m.pathname])),fi(m)}function xv(e,t,n,i){if(!i||!WE(i))return{path:n};if(i.formMethod&&!n_(i.formMethod))return{path:n,error:Rn(405,{method:i.formMethod})};let s=()=>({path:n,error:Rn(400,{type:"invalid-body"})}),l=i.formMethod||"get",u=e?l.toUpperCase():l.toLowerCase(),d=Ew(n);if(i.body!==void 0){if(i.formEncType==="text/plain"){if(!yr(u))return s();let y=typeof i.body=="string"?i.body:i.body instanceof FormData||i.body instanceof URLSearchParams?Array.from(i.body.entries()).reduce((b,_)=>{let[k,C]=_;return""+b+k+"="+C+`
`},""):String(i.body);return{path:n,submission:{formMethod:u,formAction:d,formEncType:i.formEncType,formData:void 0,json:void 0,text:y}}}else if(i.formEncType==="application/json"){if(!yr(u))return s();try{let y=typeof i.body=="string"?JSON.parse(i.body):i.body;return{path:n,submission:{formMethod:u,formAction:d,formEncType:i.formEncType,formData:void 0,json:y,text:void 0}}}catch{return s()}}}Ye(typeof FormData=="function","FormData is not available in this environment");let f,p;if(i.formData)f=If(i.formData),p=i.formData;else if(i.body instanceof FormData)f=If(i.body),p=i.body;else if(i.body instanceof URLSearchParams)f=i.body,p=Cv(f);else if(i.body==null)f=new URLSearchParams,p=new FormData;else try{f=new URLSearchParams(i.body),p=Cv(f)}catch{return s()}let m={formMethod:u,formAction:d,formEncType:i&&i.formEncType||"application/x-www-form-urlencoded",formData:p,json:void 0,text:void 0};if(yr(m.formMethod))return{path:n,submission:m};let g=Lo(n);return t&&g.search&&Mh(g.search)&&f.append("index",""),g.search="?"+f,{path:fi(g),submission:m}}function Sv(e,t,n){n===void 0&&(n=!1);let i=e.findIndex(s=>s.route.id===t);return i>=0?e.slice(0,n?i+1:i):e}function bv(e,t,n,i,s,l,u,d,f,p,m,g,y,b,_,k){let C=k?Zn(k[1])?k[1].error:k[1].data:void 0,N=e.createURL(t.location),M=e.createURL(s),O=n;l&&t.errors?O=Sv(n,Object.keys(t.errors)[0],!0):k&&Zn(k[1])&&(O=Sv(n,k[0]));let B=k?k[1].statusCode:void 0,Z=u&&B&&B>=400,re=O.filter((I,ae)=>{let{route:le}=I;if(le.lazy)return!0;if(le.loader==null)return!1;if(l)return zf(le,t.loaderData,t.errors);if(ZE(t.loaderData,t.matches[ae],I)||f.some(ge=>ge===I.route.id))return!0;let Ie=t.matches[ae],he=I;return kv(I,wt({currentUrl:N,currentParams:Ie.params,nextUrl:M,nextParams:he.params},i,{actionResult:C,actionStatus:B,defaultShouldRevalidate:Z?!1:d||N.pathname+N.search===M.pathname+M.search||N.search!==M.search||bw(Ie,he)}))}),R=[];return g.forEach((I,ae)=>{if(l||!n.some(Ne=>Ne.route.id===I.routeId)||m.has(ae))return;let le=ri(b,I.path,_);if(!le){R.push({key:ae,routeId:I.routeId,path:I.path,matches:null,match:null,controller:null});return}let Ie=t.fetchers.get(ae),he=aa(le,I.path),ge=!1;y.has(ae)?ge=!1:p.has(ae)?(p.delete(ae),ge=!0):Ie&&Ie.state!=="idle"&&Ie.data===void 0?ge=d:ge=kv(he,wt({currentUrl:N,currentParams:t.matches[t.matches.length-1].params,nextUrl:M,nextParams:n[n.length-1].params},i,{actionResult:C,actionStatus:B,defaultShouldRevalidate:Z?!1:d})),ge&&R.push({key:ae,routeId:I.routeId,path:I.path,matches:le,match:he,controller:new AbortController})}),[re,R]}function zf(e,t,n){if(e.lazy)return!0;if(!e.loader)return!1;let i=t!=null&&t[e.id]!==void 0,s=n!=null&&n[e.id]!==void 0;return!i&&s?!1:typeof e.loader=="function"&&e.loader.hydrate===!0?!0:!i&&!s}function ZE(e,t,n){let i=!t||n.route.id!==t.route.id,s=e[n.route.id]===void 0;return i||s}function bw(e,t){let n=e.route.path;return e.pathname!==t.pathname||n!=null&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function kv(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if(typeof n=="boolean")return n}return t.defaultShouldRevalidate}function Ev(e,t,n,i,s){var l;let u;if(e){let p=i[e];Ye(p,"No route found to patch children into: routeId = "+e),p.children||(p.children=[]),u=p.children}else u=n;let d=t.filter(p=>!u.some(m=>kw(p,m))),f=Pu(d,s,[e||"_","patch",String(((l=u)==null?void 0:l.length)||"0")],i);u.push(...f)}function kw(e,t){return"id"in e&&"id"in t&&e.id===t.id?!0:e.index===t.index&&e.path===t.path&&e.caseSensitive===t.caseSensitive?(!e.children||e.children.length===0)&&(!t.children||t.children.length===0)?!0:e.children.every((n,i)=>{var s;return(s=t.children)==null?void 0:s.some(l=>kw(n,l))}):!1}async function HE(e,t,n){if(!e.lazy)return;let i=await e.lazy();if(!e.lazy)return;let s=n[e.id];Ye(s,"No route found in manifest");let l={};for(let u in i){let f=s[u]!==void 0&&u!=="hasErrorBoundary";ls(!f,'Route "'+s.id+'" has a static property "'+u+'" defined but its lazy function is also returning a value for this property. '+('The lazy route property "'+u+'" will be ignored.')),!f&&!vE.has(u)&&(l[u]=i[u])}Object.assign(s,l),Object.assign(s,wt({},t(s),{lazy:void 0}))}async function KE(e){let{matches:t}=e,n=t.filter(s=>s.shouldLoad);return(await Promise.all(n.map(s=>s.resolve()))).reduce((s,l,u)=>Object.assign(s,{[n[u].route.id]:l}),{})}async function GE(e,t,n,i,s,l,u,d,f,p){let m=l.map(b=>b.route.lazy?HE(b.route,f,d):void 0),g=l.map((b,_)=>{let k=m[_],C=s.some(M=>M.route.id===b.route.id);return wt({},b,{shouldLoad:C,resolve:async M=>(M&&i.method==="GET"&&(b.route.lazy||b.route.loader)&&(C=!0),C?YE(t,i,b,k,M,p):Promise.resolve({type:dt.data,result:void 0}))})}),y=await e({matches:g,request:i,params:l[0].params,fetcherKey:u,context:p});try{await Promise.all(m)}catch{}return y}async function YE(e,t,n,i,s,l){let u,d,f=p=>{let m,g=new Promise((_,k)=>m=k);d=()=>m(),t.signal.addEventListener("abort",d);let y=_=>typeof p!="function"?Promise.reject(new Error("You cannot call the handler for a route which defines a boolean "+('"'+e+'" [routeId: '+n.route.id+"]"))):p({request:t,params:n.params,context:l},..._!==void 0?[_]:[]),b=(async()=>{try{return{type:"data",result:await(s?s(k=>y(k)):y())}}catch(_){return{type:"error",result:_}}})();return Promise.race([b,g])};try{let p=n.route[e];if(i)if(p){let m,[g]=await Promise.all([f(p).catch(y=>{m=y}),i]);if(m!==void 0)throw m;u=g}else if(await i,p=n.route[e],p)u=await f(p);else if(e==="action"){let m=new URL(t.url),g=m.pathname+m.search;throw Rn(405,{method:t.method,pathname:g,routeId:n.route.id})}else return{type:dt.data,result:void 0};else if(p)u=await f(p);else{let m=new URL(t.url),g=m.pathname+m.search;throw Rn(404,{pathname:g})}Ye(u.result!==void 0,"You defined "+(e==="action"?"an action":"a loader")+" for route "+('"'+n.route.id+"\" but didn't return anything from your `"+e+"` ")+"function. Please return a value or `null`.")}catch(p){return{type:dt.error,result:p}}finally{d&&t.signal.removeEventListener("abort",d)}return u}async function XE(e){let{result:t,type:n}=e;if(_w(t)){let g;try{let y=t.headers.get("Content-Type");y&&/\bapplication\/json\b/.test(y)?t.body==null?g=null:g=await t.json():g=await t.text()}catch(y){return{type:dt.error,error:y}}return n===dt.error?{type:dt.error,error:new Ru(t.status,t.statusText,g),statusCode:t.status,headers:t.headers}:{type:dt.data,data:g,statusCode:t.status,headers:t.headers}}if(n===dt.error){if(Nv(t)){var i,s;if(t.data instanceof Error){var l,u;return{type:dt.error,error:t.data,statusCode:(l=t.init)==null?void 0:l.status,headers:(u=t.init)!=null&&u.headers?new Headers(t.init.headers):void 0}}return{type:dt.error,error:new Ru(((i=t.init)==null?void 0:i.status)||500,void 0,t.data),statusCode:hi(t)?t.status:void 0,headers:(s=t.init)!=null&&s.headers?new Headers(t.init.headers):void 0}}return{type:dt.error,error:t,statusCode:hi(t)?t.status:void 0}}if(t_(t)){var d,f;return{type:dt.deferred,deferredData:t,statusCode:(d=t.init)==null?void 0:d.status,headers:((f=t.init)==null?void 0:f.headers)&&new Headers(t.init.headers)}}if(Nv(t)){var p,m;return{type:dt.data,data:t.data,statusCode:(p=t.init)==null?void 0:p.status,headers:(m=t.init)!=null&&m.headers?new Headers(t.init.headers):void 0}}return{type:dt.data,data:t}}function QE(e,t,n,i,s,l){let u=e.headers.get("Location");if(Ye(u,"Redirects returned/thrown from loaders/actions must have a Location header"),!Nh.test(u)){let d=i.slice(0,i.findIndex(f=>f.route.id===n)+1);u=Of(new URL(t.url),d,s,!0,u,l),e.headers.set("Location",u)}return e}function _v(e,t,n){if(Nh.test(e)){let i=e,s=i.startsWith("//")?new URL(t.protocol+i):new URL(i),l=Ar(s.pathname,n)!=null;if(s.origin===t.origin&&l)return s.pathname+s.search+s.hash}return e}function Wi(e,t,n,i){let s=e.createURL(Ew(t)).toString(),l={signal:n};if(i&&yr(i.formMethod)){let{formMethod:u,formEncType:d}=i;l.method=u.toUpperCase(),d==="application/json"?(l.headers=new Headers({"Content-Type":d}),l.body=JSON.stringify(i.json)):d==="text/plain"?l.body=i.text:d==="application/x-www-form-urlencoded"&&i.formData?l.body=If(i.formData):l.body=i.formData}return new Request(s,l)}function If(e){let t=new URLSearchParams;for(let[n,i]of e.entries())t.append(n,typeof i=="string"?i:i.name);return t}function Cv(e){let t=new FormData;for(let[n,i]of e.entries())t.append(n,i);return t}function JE(e,t,n,i,s){let l={},u=null,d,f=!1,p={},m=n&&Zn(n[1])?n[1].error:void 0;return e.forEach(g=>{if(!(g.route.id in t))return;let y=g.route.id,b=t[y];if(Ye(!ii(b),"Cannot handle redirect results in processLoaderData"),Zn(b)){let _=b.error;m!==void 0&&(_=m,m=void 0),u=u||{};{let k=oi(e,y);u[k.route.id]==null&&(u[k.route.id]=_)}l[y]=void 0,f||(f=!0,d=hi(b.error)?b.error.status:500),b.headers&&(p[y]=b.headers)}else Do(b)?(i.set(y,b.deferredData),l[y]=b.deferredData.data,b.statusCode!=null&&b.statusCode!==200&&!f&&(d=b.statusCode),b.headers&&(p[y]=b.headers)):(l[y]=b.data,b.statusCode&&b.statusCode!==200&&!f&&(d=b.statusCode),b.headers&&(p[y]=b.headers))}),m!==void 0&&n&&(u={[n[0]]:m},l[n[0]]=void 0),{loaderData:l,errors:u,statusCode:d||200,loaderHeaders:p}}function Pv(e,t,n,i,s,l,u){let{loaderData:d,errors:f}=JE(t,n,i,u);return s.forEach(p=>{let{key:m,match:g,controller:y}=p,b=l[m];if(Ye(b,"Did not find corresponding fetcher result"),!(y&&y.signal.aborted))if(Zn(b)){let _=oi(e.matches,g==null?void 0:g.route.id);f&&f[_.route.id]||(f=wt({},f,{[_.route.id]:b.error})),e.fetchers.delete(m)}else if(ii(b))Ye(!1,"Unhandled fetcher revalidation redirect");else if(Do(b))Ye(!1,"Unhandled fetcher deferred data");else{let _=Po(b.data);e.fetchers.set(m,_)}}),{loaderData:d,errors:f}}function Tv(e,t,n,i){let s=wt({},t);for(let l of n){let u=l.route.id;if(t.hasOwnProperty(u)?t[u]!==void 0&&(s[u]=t[u]):e[u]!==void 0&&l.route.loader&&(s[u]=e[u]),i&&i.hasOwnProperty(u))break}return s}function Rv(e){return e?Zn(e[1])?{actionData:{}}:{actionData:{[e[0]]:e[1].data}}:{}}function oi(e,t){return(t?e.slice(0,e.findIndex(i=>i.route.id===t)+1):[...e]).reverse().find(i=>i.route.hasErrorBoundary===!0)||e[0]}function Dv(e){let t=e.length===1?e[0]:e.find(n=>n.index||!n.path||n.path==="/")||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function Rn(e,t){let{pathname:n,routeId:i,method:s,type:l,message:u}=t===void 0?{}:t,d="Unknown Server Error",f="Unknown @remix-run/router error";return e===400?(d="Bad Request",s&&n&&i?f="You made a "+s+' request to "'+n+'" but '+('did not provide a `loader` for route "'+i+'", ')+"so there is no way to handle the request.":l==="defer-action"?f="defer() is not supported in actions":l==="invalid-body"&&(f="Unable to encode submission body")):e===403?(d="Forbidden",f='Route "'+i+'" does not match URL "'+n+'"'):e===404?(d="Not Found",f='No route matches URL "'+n+'"'):e===405&&(d="Method Not Allowed",s&&n&&i?f="You made a "+s.toUpperCase()+' request to "'+n+'" but '+('did not provide an `action` for route "'+i+'", ')+"so there is no way to handle the request.":s&&(f='Invalid request method "'+s.toUpperCase()+'"')),new Ru(e||500,d,new Error(f),!0)}function Ql(e){let t=Object.entries(e);for(let n=t.length-1;n>=0;n--){let[i,s]=t[n];if(ii(s))return{key:i,result:s}}}function Ew(e){let t=typeof e=="string"?Lo(e):e;return fi(wt({},t,{hash:""}))}function qE(e,t){return e.pathname!==t.pathname||e.search!==t.search?!1:e.hash===""?t.hash!=="":e.hash===t.hash?!0:t.hash!==""}function e_(e){return _w(e.result)&&FE.has(e.result.status)}function Do(e){return e.type===dt.deferred}function Zn(e){return e.type===dt.error}function ii(e){return(e&&e.type)===dt.redirect}function Nv(e){return typeof e=="object"&&e!=null&&"type"in e&&"data"in e&&"init"in e&&e.type==="DataWithResponseInit"}function t_(e){let t=e;return t&&typeof t=="object"&&typeof t.data=="object"&&typeof t.subscribe=="function"&&typeof t.cancel=="function"&&typeof t.resolveData=="function"}function _w(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.headers=="object"&&typeof e.body<"u"}function n_(e){return IE.has(e.toLowerCase())}function yr(e){return OE.has(e.toLowerCase())}async function r_(e,t,n,i,s){let l=Object.entries(t);for(let u=0;u<l.length;u++){let[d,f]=l[u],p=e.find(y=>(y==null?void 0:y.route.id)===d);if(!p)continue;let m=i.find(y=>y.route.id===p.route.id),g=m!=null&&!bw(m,p)&&(s&&s[p.route.id])!==void 0;Do(f)&&g&&await Ah(f,n,!1).then(y=>{y&&(t[d]=y)})}}async function o_(e,t,n){for(let i=0;i<n.length;i++){let{key:s,routeId:l,controller:u}=n[i],d=t[s];e.find(p=>(p==null?void 0:p.route.id)===l)&&Do(d)&&(Ye(u,"Expected an AbortController for revalidating fetcher deferred result"),await Ah(d,u.signal,!0).then(p=>{p&&(t[s]=p)}))}}async function Ah(e,t,n){if(n===void 0&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:dt.data,data:e.deferredData.unwrappedData}}catch(s){return{type:dt.error,error:s}}return{type:dt.data,data:e.deferredData.data}}}function Mh(e){return new URLSearchParams(e).getAll("index").some(t=>t==="")}function aa(e,t){let n=typeof t=="string"?Lo(t).search:t.search;if(e[e.length-1].route.index&&Mh(n||""))return e[e.length-1];let i=ww(e);return i[i.length-1]}function Av(e){let{formMethod:t,formAction:n,formEncType:i,text:s,formData:l,json:u}=e;if(!(!t||!n||!i)){if(s!=null)return{formMethod:t,formAction:n,formEncType:i,formData:void 0,json:void 0,text:s};if(l!=null)return{formMethod:t,formAction:n,formEncType:i,formData:l,json:void 0,text:void 0};if(u!==void 0)return{formMethod:t,formAction:n,formEncType:i,formData:void 0,json:u,text:void 0}}}function rf(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function i_(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}function ta(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function s_(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}function Po(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function a_(e,t){try{let n=e.sessionStorage.getItem(Sw);if(n){let i=JSON.parse(n);for(let[s,l]of Object.entries(i||{}))l&&Array.isArray(l)&&t.set(s,new Set(l||[]))}}catch{}}function l_(e,t){if(t.size>0){let n={};for(let[i,s]of t)n[i]=[...s];try{e.sessionStorage.setItem(Sw,JSON.stringify(n))}catch(i){ls(!1,"Failed to save applied view transitions in sessionStorage ("+i+").")}}}/**
 * React Router v6.30.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function Du(){return Du=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},Du.apply(this,arguments)}const za=S.createContext(null),Gu=S.createContext(null),no=S.createContext(null),jh=S.createContext(null),Oo=S.createContext({outlet:null,matches:[],isDataRoute:!1}),Cw=S.createContext(null);function u_(e,t){let{relative:n}=t===void 0?{}:t;Ia()||Ye(!1);let{basename:i,navigator:s}=S.useContext(no),{hash:l,pathname:u,search:d}=Yu(e,{relative:n}),f=u;return i!=="/"&&(f=u==="/"?i:Jr([i,u])),s.createHref({pathname:f,search:d,hash:l})}function Ia(){return S.useContext(jh)!=null}function hs(){return Ia()||Ye(!1),S.useContext(jh).location}function Pw(e){S.useContext(no).static||S.useLayoutEffect(e)}function c_(){let{isDataRoute:e}=S.useContext(Oo);return e?E_():d_()}function d_(){Ia()||Ye(!1);let e=S.useContext(za),{basename:t,future:n,navigator:i}=S.useContext(no),{matches:s}=S.useContext(Oo),{pathname:l}=hs(),u=JSON.stringify(Rh(s,n.v7_relativeSplatPath)),d=S.useRef(!1);return Pw(()=>{d.current=!0}),S.useCallback(function(p,m){if(m===void 0&&(m={}),!d.current)return;if(typeof p=="number"){i.go(p);return}let g=Dh(p,JSON.parse(u),l,m.relative==="path");e==null&&t!=="/"&&(g.pathname=g.pathname==="/"?t:Jr([t,g.pathname])),(m.replace?i.replace:i.push)(g,m.state,m)},[t,i,u,l,e])}const f_=S.createContext(null);function h_(e){let t=S.useContext(Oo).outlet;return t&&S.createElement(f_.Provider,{value:e},t)}function Yu(e,t){let{relative:n}=t===void 0?{}:t,{future:i}=S.useContext(no),{matches:s}=S.useContext(Oo),{pathname:l}=hs(),u=JSON.stringify(Rh(s,i.v7_relativeSplatPath));return S.useMemo(()=>Dh(e,JSON.parse(u),l,n==="path"),[e,u,l,n])}function p_(e,t,n,i){Ia()||Ye(!1);let{navigator:s,static:l}=S.useContext(no),{matches:u}=S.useContext(Oo),d=u[u.length-1],f=d?d.params:{};d&&d.pathname;let p=d?d.pathnameBase:"/";d&&d.route;let m=hs(),g;g=m;let y=g.pathname||"/",b=y;if(p!=="/"){let C=p.replace(/^\//,"").split("/");b="/"+y.replace(/^\//,"").split("/").slice(C.length).join("/")}let _=!l&&n&&n.matches&&n.matches.length>0?n.matches:ri(e,{pathname:b});return w_(_&&_.map(C=>Object.assign({},C,{params:Object.assign({},f,C.params),pathname:Jr([p,s.encodeLocation?s.encodeLocation(C.pathname).pathname:C.pathname]),pathnameBase:C.pathnameBase==="/"?p:Jr([p,s.encodeLocation?s.encodeLocation(C.pathnameBase).pathname:C.pathnameBase])})),u,n,i)}function m_(){let e=Nw(),t=hi(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,s={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return S.createElement(S.Fragment,null,S.createElement("h2",null,"Unexpected Application Error!"),S.createElement("h3",{style:{fontStyle:"italic"}},t),n?S.createElement("pre",{style:s},n):null,null)}const g_=S.createElement(m_,null);class v_ extends S.Component{constructor(t){super(t),this.state={location:t.location,revalidation:t.revalidation,error:t.error}}static getDerivedStateFromError(t){return{error:t}}static getDerivedStateFromProps(t,n){return n.location!==t.location||n.revalidation!=="idle"&&t.revalidation==="idle"?{error:t.error,location:t.location,revalidation:t.revalidation}:{error:t.error!==void 0?t.error:n.error,location:n.location,revalidation:t.revalidation||n.revalidation}}componentDidCatch(t,n){console.error("React Router caught the following error during render",t,n)}render(){return this.state.error!==void 0?S.createElement(Oo.Provider,{value:this.props.routeContext},S.createElement(Cw.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function y_(e){let{routeContext:t,match:n,children:i}=e,s=S.useContext(za);return s&&s.static&&s.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(s.staticContext._deepestRenderedBoundaryId=n.route.id),S.createElement(Oo.Provider,{value:t},i)}function w_(e,t,n,i){var s;if(t===void 0&&(t=[]),n===void 0&&(n=null),i===void 0&&(i=null),e==null){var l;if(!n)return null;if(n.errors)e=n.matches;else if((l=i)!=null&&l.v7_partialHydration&&t.length===0&&!n.initialized&&n.matches.length>0)e=n.matches;else return null}let u=e,d=(s=n)==null?void 0:s.errors;if(d!=null){let m=u.findIndex(g=>g.route.id&&(d==null?void 0:d[g.route.id])!==void 0);m>=0||Ye(!1),u=u.slice(0,Math.min(u.length,m+1))}let f=!1,p=-1;if(n&&i&&i.v7_partialHydration)for(let m=0;m<u.length;m++){let g=u[m];if((g.route.HydrateFallback||g.route.hydrateFallbackElement)&&(p=m),g.route.id){let{loaderData:y,errors:b}=n,_=g.route.loader&&y[g.route.id]===void 0&&(!b||b[g.route.id]===void 0);if(g.route.lazy||_){f=!0,p>=0?u=u.slice(0,p+1):u=[u[0]];break}}}return u.reduceRight((m,g,y)=>{let b,_=!1,k=null,C=null;n&&(b=d&&g.route.id?d[g.route.id]:void 0,k=g.route.errorElement||g_,f&&(p<0&&y===0?(__("route-fallback"),_=!0,C=null):p===y&&(_=!0,C=g.route.hydrateFallbackElement||null)));let N=t.concat(u.slice(0,y+1)),M=()=>{let O;return b?O=k:_?O=C:g.route.Component?O=S.createElement(g.route.Component,null):g.route.element?O=g.route.element:O=m,S.createElement(y_,{match:g,routeContext:{outlet:m,matches:N,isDataRoute:n!=null},children:O})};return n&&(g.route.ErrorBoundary||g.route.errorElement||y===0)?S.createElement(v_,{location:n.location,revalidation:n.revalidation,component:k,error:b,children:M(),routeContext:{outlet:null,matches:N,isDataRoute:!0}}):M()},null)}var Tw=(function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e})(Tw||{}),Rw=(function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e})(Rw||{});function x_(e){let t=S.useContext(za);return t||Ye(!1),t}function Lh(e){let t=S.useContext(Gu);return t||Ye(!1),t}function S_(e){let t=S.useContext(Oo);return t||Ye(!1),t}function Dw(e){let t=S_(),n=t.matches[t.matches.length-1];return n.route.id||Ye(!1),n.route.id}function b_(){return Lh().navigation}function k_(){let{matches:e,loaderData:t}=Lh();return S.useMemo(()=>e.map(n=>gw(n,t)),[e,t])}function Nw(){var e;let t=S.useContext(Cw),n=Lh(Rw.UseRouteError),i=Dw();return t!==void 0?t:(e=n.errors)==null?void 0:e[i]}function E_(){let{router:e}=x_(Tw.UseNavigateStable),t=Dw(),n=S.useRef(!1);return Pw(()=>{n.current=!0}),S.useCallback(function(s,l){l===void 0&&(l={}),n.current&&(typeof s=="number"?e.navigate(s):e.navigate(s,Du({fromRouteId:t},l)))},[e,t])}const Mv={};function __(e,t,n){Mv[e]||(Mv[e]=!0)}function C_(e,t){e==null||e.v7_startTransition,(e==null?void 0:e.v7_relativeSplatPath)===void 0&&(!t||t.v7_relativeSplatPath),t&&(t.v7_fetcherPersist,t.v7_normalizeFormMethod,t.v7_partialHydration,t.v7_skipActionErrorRevalidation)}function P_(e){return h_(e.context)}function T_(e){let{basename:t="/",children:n=null,location:i,navigationType:s=$t.Pop,navigator:l,static:u=!1,future:d}=e;Ia()&&Ye(!1);let f=t.replace(/^\/*/,"/"),p=S.useMemo(()=>({basename:f,navigator:l,static:u,future:Du({v7_relativeSplatPath:!1},d)}),[f,d,l,u]);typeof i=="string"&&(i=Lo(i));let{pathname:m="/",search:g="",hash:y="",state:b=null,key:_="default"}=i,k=S.useMemo(()=>{let C=Ar(m,f);return C==null?null:{location:{pathname:C,search:g,hash:y,state:b,key:_},navigationType:s}},[f,m,g,y,b,_,s]);return k==null?null:S.createElement(no.Provider,{value:p},S.createElement(jh.Provider,{children:n,value:k}))}new Promise(()=>{});function R_(e){let t={hasErrorBoundary:e.ErrorBoundary!=null||e.errorElement!=null};return e.Component&&Object.assign(t,{element:S.createElement(e.Component),Component:void 0}),e.HydrateFallback&&Object.assign(t,{hydrateFallbackElement:S.createElement(e.HydrateFallback),HydrateFallback:void 0}),e.ErrorBoundary&&Object.assign(t,{errorElement:S.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),t}/**
 * React Router DOM v6.30.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function pi(){return pi=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},pi.apply(this,arguments)}function Aw(e,t){if(e==null)return{};var n={},i=Object.keys(e),s,l;for(l=0;l<i.length;l++)s=i[l],!(t.indexOf(s)>=0)&&(n[s]=e[s]);return n}function D_(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function N_(e,t){return e.button===0&&(!t||t==="_self")&&!D_(e)}const A_=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","viewTransition"],M_=["aria-current","caseSensitive","className","end","style","to","viewTransition","children"],j_="6";try{window.__reactRouterVersion=j_}catch{}function L_(e,t){return BE({basename:void 0,future:pi({},void 0,{v7_prependBasename:!0}),history:pE({window:void 0}),hydrationData:O_(),routes:e,mapRouteProperties:R_,dataStrategy:void 0,patchRoutesOnNavigation:void 0,window:void 0}).initialize()}function O_(){var e;let t=(e=window)==null?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=pi({},t,{errors:z_(t.errors)})),t}function z_(e){if(!e)return null;let t=Object.entries(e),n={};for(let[i,s]of t)if(s&&s.__type==="RouteErrorResponse")n[i]=new Ru(s.status,s.statusText,s.data,s.internal===!0);else if(s&&s.__type==="Error"){if(s.__subType){let l=window[s.__subType];if(typeof l=="function")try{let u=new l(s.message);u.stack="",n[i]=u}catch{}}if(n[i]==null){let l=new Error(s.message);l.stack="",n[i]=l}}else n[i]=s;return n}const Mw=S.createContext({isTransitioning:!1}),I_=S.createContext(new Map),F_="startTransition",jv=Ch[F_],V_="flushSync",Lv=hE[V_];function $_(e){jv?jv(e):e()}function na(e){Lv?Lv(e):e()}class U_{constructor(){this.status="pending",this.promise=new Promise((t,n)=>{this.resolve=i=>{this.status==="pending"&&(this.status="resolved",t(i))},this.reject=i=>{this.status==="pending"&&(this.status="rejected",n(i))}})}}function B_(e){let{fallbackElement:t,router:n,future:i}=e,[s,l]=S.useState(n.state),[u,d]=S.useState(),[f,p]=S.useState({isTransitioning:!1}),[m,g]=S.useState(),[y,b]=S.useState(),[_,k]=S.useState(),C=S.useRef(new Map),{v7_startTransition:N}=i||{},M=S.useCallback(I=>{N?$_(I):I()},[N]),O=S.useCallback((I,ae)=>{let{deletedFetchers:le,flushSync:Ie,viewTransitionOpts:he}=ae;I.fetchers.forEach((Ne,Le)=>{Ne.data!==void 0&&C.current.set(Le,Ne.data)}),le.forEach(Ne=>C.current.delete(Ne));let ge=n.window==null||n.window.document==null||typeof n.window.document.startViewTransition!="function";if(!he||ge){Ie?na(()=>l(I)):M(()=>l(I));return}if(Ie){na(()=>{y&&(m&&m.resolve(),y.skipTransition()),p({isTransitioning:!0,flushSync:!0,currentLocation:he.currentLocation,nextLocation:he.nextLocation})});let Ne=n.window.document.startViewTransition(()=>{na(()=>l(I))});Ne.finished.finally(()=>{na(()=>{g(void 0),b(void 0),d(void 0),p({isTransitioning:!1})})}),na(()=>b(Ne));return}y?(m&&m.resolve(),y.skipTransition(),k({state:I,currentLocation:he.currentLocation,nextLocation:he.nextLocation})):(d(I),p({isTransitioning:!0,flushSync:!1,currentLocation:he.currentLocation,nextLocation:he.nextLocation}))},[n.window,y,m,C,M]);S.useLayoutEffect(()=>n.subscribe(O),[n,O]),S.useEffect(()=>{f.isTransitioning&&!f.flushSync&&g(new U_)},[f]),S.useEffect(()=>{if(m&&u&&n.window){let I=u,ae=m.promise,le=n.window.document.startViewTransition(async()=>{M(()=>l(I)),await ae});le.finished.finally(()=>{g(void 0),b(void 0),d(void 0),p({isTransitioning:!1})}),b(le)}},[M,u,m,n.window]),S.useEffect(()=>{m&&u&&s.location.key===u.location.key&&m.resolve()},[m,y,s.location,u]),S.useEffect(()=>{!f.isTransitioning&&_&&(d(_.state),p({isTransitioning:!0,flushSync:!1,currentLocation:_.currentLocation,nextLocation:_.nextLocation}),k(void 0))},[f.isTransitioning,_]),S.useEffect(()=>{},[]);let B=S.useMemo(()=>({createHref:n.createHref,encodeLocation:n.encodeLocation,go:I=>n.navigate(I),push:(I,ae,le)=>n.navigate(I,{state:ae,preventScrollReset:le==null?void 0:le.preventScrollReset}),replace:(I,ae,le)=>n.navigate(I,{replace:!0,state:ae,preventScrollReset:le==null?void 0:le.preventScrollReset})}),[n]),Z=n.basename||"/",re=S.useMemo(()=>({router:n,navigator:B,static:!1,basename:Z}),[n,B,Z]),R=S.useMemo(()=>({v7_relativeSplatPath:n.future.v7_relativeSplatPath}),[n.future.v7_relativeSplatPath]);return S.useEffect(()=>C_(i,n.future),[i,n.future]),S.createElement(S.Fragment,null,S.createElement(za.Provider,{value:re},S.createElement(Gu.Provider,{value:s},S.createElement(I_.Provider,{value:C.current},S.createElement(Mw.Provider,{value:f},S.createElement(T_,{basename:Z,location:s.location,navigationType:s.historyAction,navigator:B,future:R},s.initialized||n.future.v7_partialHydration?S.createElement(W_,{routes:n.routes,future:n.future,state:s}):t))))),null)}const W_=S.memo(Z_);function Z_(e){let{routes:t,future:n,state:i}=e;return p_(t,void 0,i,n)}const H_=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u",K_=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,_a=S.forwardRef(function(t,n){let{onClick:i,relative:s,reloadDocument:l,replace:u,state:d,target:f,to:p,preventScrollReset:m,viewTransition:g}=t,y=Aw(t,A_),{basename:b}=S.useContext(no),_,k=!1;if(typeof p=="string"&&K_.test(p)&&(_=p,H_))try{let O=new URL(window.location.href),B=p.startsWith("//")?new URL(O.protocol+p):new URL(p),Z=Ar(B.pathname,b);B.origin===O.origin&&Z!=null?p=Z+B.search+B.hash:k=!0}catch{}let C=u_(p,{relative:s}),N=X_(p,{replace:u,state:d,target:f,preventScrollReset:m,relative:s,viewTransition:g});function M(O){i&&i(O),O.defaultPrevented||N(O)}return S.createElement("a",pi({},y,{href:_||C,onClick:k||l?i:M,ref:n,target:f}))}),Ov=S.forwardRef(function(t,n){let{"aria-current":i="page",caseSensitive:s=!1,className:l="",end:u=!1,style:d,to:f,viewTransition:p,children:m}=t,g=Aw(t,M_),y=Yu(f,{relative:g.relative}),b=hs(),_=S.useContext(Gu),{navigator:k,basename:C}=S.useContext(no),N=_!=null&&q_(y)&&p===!0,M=k.encodeLocation?k.encodeLocation(y).pathname:y.pathname,O=b.pathname,B=_&&_.navigation&&_.navigation.location?_.navigation.location.pathname:null;s||(O=O.toLowerCase(),B=B?B.toLowerCase():null,M=M.toLowerCase()),B&&C&&(B=Ar(B,C)||B);const Z=M!=="/"&&M.endsWith("/")?M.length-1:M.length;let re=O===M||!u&&O.startsWith(M)&&O.charAt(Z)==="/",R=B!=null&&(B===M||!u&&B.startsWith(M)&&B.charAt(M.length)==="/"),I={isActive:re,isPending:R,isTransitioning:N},ae=re?i:void 0,le;typeof l=="function"?le=l(I):le=[l,re?"active":null,R?"pending":null,N?"transitioning":null].filter(Boolean).join(" ");let Ie=typeof d=="function"?d(I):d;return S.createElement(_a,pi({},g,{"aria-current":ae,className:le,ref:n,style:Ie,to:f,viewTransition:p}),typeof m=="function"?m(I):m)});function G_(e){let{getKey:t,storageKey:n}=e;return Q_({getKey:t,storageKey:n}),null}var Nu;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(Nu||(Nu={}));var Ff;(function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"})(Ff||(Ff={}));function jw(e){let t=S.useContext(za);return t||Ye(!1),t}function Y_(e){let t=S.useContext(Gu);return t||Ye(!1),t}function X_(e,t){let{target:n,replace:i,state:s,preventScrollReset:l,relative:u,viewTransition:d}=t===void 0?{}:t,f=c_(),p=hs(),m=Yu(e,{relative:u});return S.useCallback(g=>{if(N_(g,n)){g.preventDefault();let y=i!==void 0?i:fi(p)===fi(m);f(e,{replace:y,state:s,preventScrollReset:l,relative:u,viewTransition:d})}},[p,f,m,i,s,n,e,l,u,d])}const zv="react-router-scroll-positions";let Jl={};function Q_(e){let{getKey:t,storageKey:n}=e===void 0?{}:e,{router:i}=jw(Nu.UseScrollRestoration),{restoreScrollPosition:s,preventScrollReset:l}=Y_(Ff.UseScrollRestoration),{basename:u}=S.useContext(no),d=hs(),f=k_(),p=b_();S.useEffect(()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"}),[]),J_(S.useCallback(()=>{if(p.state==="idle"){let m=(t?t(d,f):null)||d.key;Jl[m]=window.scrollY}try{sessionStorage.setItem(n||zv,JSON.stringify(Jl))}catch{}window.history.scrollRestoration="auto"},[n,t,p.state,d,f])),typeof document<"u"&&(S.useLayoutEffect(()=>{try{let m=sessionStorage.getItem(n||zv);m&&(Jl=JSON.parse(m))}catch{}},[n]),S.useLayoutEffect(()=>{let m=t&&u!=="/"?(y,b)=>t(pi({},y,{pathname:Ar(y.pathname,u)||y.pathname}),b):t,g=i==null?void 0:i.enableScrollRestoration(Jl,()=>window.scrollY,m);return()=>g&&g()},[i,u,t]),S.useLayoutEffect(()=>{if(s!==!1){if(typeof s=="number"){window.scrollTo(0,s);return}if(d.hash){let m=document.getElementById(decodeURIComponent(d.hash.slice(1)));if(m){m.scrollIntoView();return}}l!==!0&&window.scrollTo(0,0)}},[d,s,l]))}function J_(e,t){let{capture:n}={};S.useEffect(()=>{let i=n!=null?{capture:n}:void 0;return window.addEventListener("pagehide",e,i),()=>{window.removeEventListener("pagehide",e,i)}},[e,n])}function q_(e,t){t===void 0&&(t={});let n=S.useContext(Mw);n==null&&Ye(!1);let{basename:i}=jw(Nu.useViewTransitionState),s=Yu(e,{relative:t.relative});if(!n.isTransitioning)return!1;let l=Ar(n.currentLocation.pathname,i)||n.currentLocation.pathname,u=Ar(n.nextLocation.pathname,i)||n.nextLocation.pathname;return Tu(s.pathname,u)!=null||Tu(s.pathname,l)!=null}/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const eC=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase(),tC=e=>e.replace(/^([A-Z])|[\s-_]+(\w)/g,(t,n,i)=>i?i.toUpperCase():n.toLowerCase()),Iv=e=>{const t=tC(e);return t.charAt(0).toUpperCase()+t.slice(1)},Lw=(...e)=>e.filter((t,n,i)=>!!t&&t.trim()!==""&&i.indexOf(t)===n).join(" ").trim(),nC=e=>{for(const t in e)if(t.startsWith("aria-")||t==="role"||t==="title")return!0};/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */var rC={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const oC=S.forwardRef(({color:e="currentColor",size:t=24,strokeWidth:n=2,absoluteStrokeWidth:i,className:s="",children:l,iconNode:u,...d},f)=>S.createElement("svg",{ref:f,...rC,width:t,height:t,stroke:e,strokeWidth:i?Number(n)*24/Number(t):n,className:Lw("lucide",s),...!l&&!nC(d)&&{"aria-hidden":"true"},...d},[...u.map(([p,m])=>S.createElement(p,m)),...Array.isArray(l)?l:[l]]));/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Xt=(e,t)=>{const n=S.forwardRef(({className:i,...s},l)=>S.createElement(oC,{ref:l,iconNode:t,className:Lw(`lucide-${eC(Iv(e))}`,`lucide-${e}`,i),...s}));return n.displayName=Iv(e),n};/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const iC=[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"m12 5 7 7-7 7",key:"xquz4c"}]],Fv=Xt("arrow-right",iC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const sC=[["path",{d:"M16 20V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16",key:"jecpp"}],["rect",{width:"20",height:"14",x:"2",y:"6",rx:"2",key:"i6l2r4"}]],Vv=Xt("briefcase",sC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const aC=[["path",{d:"m16 18 6-6-6-6",key:"eg8j8"}],["path",{d:"m8 6-6 6 6 6",key:"ppft3o"}]],lC=Xt("code",aC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const uC=[["path",{d:"M12 15V3",key:"m9g1x1"}],["path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4",key:"ih7n3h"}],["path",{d:"m7 10 5 5 5-5",key:"brsn70"}]],cC=Xt("download",uC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const dC=[["path",{d:"M15 3h6v6",key:"1q9fwt"}],["path",{d:"M10 14 21 3",key:"gplh6r"}],["path",{d:"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6",key:"a6xqqp"}]],Ow=Xt("external-link",dC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const fC=[["path",{d:"M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4",key:"tonef"}],["path",{d:"M9 18c-4.51 2-5-2-7-2",key:"9comsn"}]],hC=Xt("github",fC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const pC=[["path",{d:"M21.42 10.922a1 1 0 0 0-.019-1.838L12.83 5.18a2 2 0 0 0-1.66 0L2.6 9.08a1 1 0 0 0 0 1.832l8.57 3.908a2 2 0 0 0 1.66 0z",key:"j76jl0"}],["path",{d:"M22 10v6",key:"1lu8f3"}],["path",{d:"M6 12.5V16a6 3 0 0 0 12 0v-3.5",key:"1r8lef"}]],$v=Xt("graduation-cap",pC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const mC=[["path",{d:"M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8",key:"5wwlr5"}],["path",{d:"M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z",key:"1d0kgt"}]],zw=Xt("house",mC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const gC=[["path",{d:"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z",key:"c2jq9f"}],["rect",{width:"4",height:"12",x:"2",y:"9",key:"mk3on5"}],["circle",{cx:"4",cy:"4",r:"2",key:"bt5ra8"}]],vC=Xt("linkedin",gC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const yC=[["path",{d:"M21 12a9 9 0 1 1-6.219-8.56",key:"13zald"}]],wC=Xt("loader-circle",yC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const xC=[["path",{d:"m22 7-8.991 5.727a2 2 0 0 1-2.009 0L2 7",key:"132q7q"}],["rect",{x:"2",y:"4",width:"20",height:"16",rx:"2",key:"izxlao"}]],Iw=Xt("mail",xC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const SC=[["path",{d:"M4 12h16",key:"1lakjw"}],["path",{d:"M4 18h16",key:"19g7jn"}],["path",{d:"M4 6h16",key:"1o0s65"}]],bC=Xt("menu",SC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const kC=[["path",{d:"M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z",key:"a7tn18"}]],EC=Xt("moon",kC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const _C=[["path",{d:"M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384",key:"9njp5v"}]],CC=Xt("phone",_C);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const PC=[["path",{d:"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8",key:"v9h5vc"}],["path",{d:"M21 3v5h-5",key:"1q7to0"}],["path",{d:"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16",key:"3uifl3"}],["path",{d:"M8 16H3v5",key:"1cv678"}]],TC=Xt("refresh-cw",PC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const RC=[["circle",{cx:"12",cy:"12",r:"4",key:"4exip2"}],["path",{d:"M12 2v2",key:"tus03m"}],["path",{d:"M12 20v2",key:"1lh1kg"}],["path",{d:"m4.93 4.93 1.41 1.41",key:"149t6j"}],["path",{d:"m17.66 17.66 1.41 1.41",key:"ptbguv"}],["path",{d:"M2 12h2",key:"1t8f8n"}],["path",{d:"M20 12h2",key:"1q8mjw"}],["path",{d:"m6.34 17.66-1.41 1.41",key:"1m8zz5"}],["path",{d:"m19.07 4.93-1.41 1.41",key:"1shlcs"}]],DC=Xt("sun",RC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const NC=[["path",{d:"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3",key:"wmoenq"}],["path",{d:"M12 9v4",key:"juzpu7"}],["path",{d:"M12 17h.01",key:"p32p05"}]],AC=Xt("triangle-alert",NC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const MC=[["path",{d:"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2",key:"975kel"}],["circle",{cx:"12",cy:"7",r:"4",key:"17ys0d"}]],jC=Xt("user",MC);/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const LC=[["path",{d:"M18 6 6 18",key:"1bl5f8"}],["path",{d:"m6 6 12 12",key:"d8bk6v"}]],Fw=Xt("x",LC);function Uv(e,t){if(typeof e=="function")return e(t);e!=null&&(e.current=t)}function Vw(...e){return t=>{let n=!1;const i=e.map(s=>{const l=Uv(s,t);return!n&&typeof l=="function"&&(n=!0),l});if(n)return()=>{for(let s=0;s<i.length;s++){const l=i[s];typeof l=="function"?l():Uv(e[s],null)}}}}function yi(...e){return S.useCallback(Vw(...e),e)}function Oh(e){const t=OC(e),n=S.forwardRef((i,s)=>{const{children:l,...u}=i,d=S.Children.toArray(l),f=d.find(IC);if(f){const p=f.props.children,m=d.map(g=>g===f?S.Children.count(p)>1?S.Children.only(null):S.isValidElement(p)?p.props.children:null:g);return x.jsx(t,{...u,ref:s,children:S.isValidElement(p)?S.cloneElement(p,void 0,m):null})}return x.jsx(t,{...u,ref:s,children:l})});return n.displayName=`${e}.Slot`,n}var $w=Oh("Slot");function OC(e){const t=S.forwardRef((n,i)=>{const{children:s,...l}=n;if(S.isValidElement(s)){const u=VC(s),d=FC(l,s.props);return s.type!==S.Fragment&&(d.ref=i?Vw(i,u):u),S.cloneElement(s,d)}return S.Children.count(s)>1?S.Children.only(null):null});return t.displayName=`${e}.SlotClone`,t}var zC=Symbol("radix.slottable");function IC(e){return S.isValidElement(e)&&typeof e.type=="function"&&"__radixId"in e.type&&e.type.__radixId===zC}function FC(e,t){const n={...t};for(const i in t){const s=e[i],l=t[i];/^on[A-Z]/.test(i)?s&&l?n[i]=(...d)=>{const f=l(...d);return s(...d),f}:s&&(n[i]=s):i==="style"?n[i]={...s,...l}:i==="className"&&(n[i]=[s,l].filter(Boolean).join(" "))}return{...e,...n}}function VC(e){var i,s;let t=(i=Object.getOwnPropertyDescriptor(e.props,"ref"))==null?void 0:i.get,n=t&&"isReactWarning"in t&&t.isReactWarning;return n?e.ref:(t=(s=Object.getOwnPropertyDescriptor(e,"ref"))==null?void 0:s.get,n=t&&"isReactWarning"in t&&t.isReactWarning,n?e.props.ref:e.props.ref||e.ref)}function Uw(e){var t,n,i="";if(typeof e=="string"||typeof e=="number")i+=e;else if(typeof e=="object")if(Array.isArray(e)){var s=e.length;for(t=0;t<s;t++)e[t]&&(n=Uw(e[t]))&&(i&&(i+=" "),i+=n)}else for(n in e)e[n]&&(i&&(i+=" "),i+=n);return i}function Bw(){for(var e,t,n=0,i="",s=arguments.length;n<s;n++)(e=arguments[n])&&(t=Uw(e))&&(i&&(i+=" "),i+=t);return i}const Bv=e=>typeof e=="boolean"?`${e}`:e===0?"0":e,Wv=Bw,Xu=(e,t)=>n=>{var i;if((t==null?void 0:t.variants)==null)return Wv(e,n==null?void 0:n.class,n==null?void 0:n.className);const{variants:s,defaultVariants:l}=t,u=Object.keys(s).map(p=>{const m=n==null?void 0:n[p],g=l==null?void 0:l[p];if(m===null)return null;const y=Bv(m)||Bv(g);return s[p][y]}),d=n&&Object.entries(n).reduce((p,m)=>{let[g,y]=m;return y===void 0||(p[g]=y),p},{}),f=t==null||(i=t.compoundVariants)===null||i===void 0?void 0:i.reduce((p,m)=>{let{class:g,className:y,...b}=m;return Object.entries(b).every(_=>{let[k,C]=_;return Array.isArray(C)?C.includes({...l,...d}[k]):{...l,...d}[k]===C})?[...p,g,y]:p},[]);return Wv(e,u,f,n==null?void 0:n.class,n==null?void 0:n.className)},zh="-",$C=e=>{const t=BC(e),{conflictingClassGroups:n,conflictingClassGroupModifiers:i}=e;return{getClassGroupId:u=>{const d=u.split(zh);return d[0]===""&&d.length!==1&&d.shift(),Ww(d,t)||UC(u)},getConflictingClassGroupIds:(u,d)=>{const f=n[u]||[];return d&&i[u]?[...f,...i[u]]:f}}},Ww=(e,t)=>{var u;if(e.length===0)return t.classGroupId;const n=e[0],i=t.nextPart.get(n),s=i?Ww(e.slice(1),i):void 0;if(s)return s;if(t.validators.length===0)return;const l=e.join(zh);return(u=t.validators.find(({validator:d})=>d(l)))==null?void 0:u.classGroupId},Zv=/^\[(.+)\]$/,UC=e=>{if(Zv.test(e)){const t=Zv.exec(e)[1],n=t==null?void 0:t.substring(0,t.indexOf(":"));if(n)return"arbitrary.."+n}},BC=e=>{const{theme:t,classGroups:n}=e,i={nextPart:new Map,validators:[]};for(const s in n)Vf(n[s],i,s,t);return i},Vf=(e,t,n,i)=>{e.forEach(s=>{if(typeof s=="string"){const l=s===""?t:Hv(t,s);l.classGroupId=n;return}if(typeof s=="function"){if(WC(s)){Vf(s(i),t,n,i);return}t.validators.push({validator:s,classGroupId:n});return}Object.entries(s).forEach(([l,u])=>{Vf(u,Hv(t,l),n,i)})})},Hv=(e,t)=>{let n=e;return t.split(zh).forEach(i=>{n.nextPart.has(i)||n.nextPart.set(i,{nextPart:new Map,validators:[]}),n=n.nextPart.get(i)}),n},WC=e=>e.isThemeGetter,ZC=e=>{if(e<1)return{get:()=>{},set:()=>{}};let t=0,n=new Map,i=new Map;const s=(l,u)=>{n.set(l,u),t++,t>e&&(t=0,i=n,n=new Map)};return{get(l){let u=n.get(l);if(u!==void 0)return u;if((u=i.get(l))!==void 0)return s(l,u),u},set(l,u){n.has(l)?n.set(l,u):s(l,u)}}},$f="!",Uf=":",HC=Uf.length,KC=e=>{const{prefix:t,experimentalParseClassName:n}=e;let i=s=>{const l=[];let u=0,d=0,f=0,p;for(let _=0;_<s.length;_++){let k=s[_];if(u===0&&d===0){if(k===Uf){l.push(s.slice(f,_)),f=_+HC;continue}if(k==="/"){p=_;continue}}k==="["?u++:k==="]"?u--:k==="("?d++:k===")"&&d--}const m=l.length===0?s:s.substring(f),g=GC(m),y=g!==m,b=p&&p>f?p-f:void 0;return{modifiers:l,hasImportantModifier:y,baseClassName:g,maybePostfixModifierPosition:b}};if(t){const s=t+Uf,l=i;i=u=>u.startsWith(s)?l(u.substring(s.length)):{isExternal:!0,modifiers:[],hasImportantModifier:!1,baseClassName:u,maybePostfixModifierPosition:void 0}}if(n){const s=i;i=l=>n({className:l,parseClassName:s})}return i},GC=e=>e.endsWith($f)?e.substring(0,e.length-1):e.startsWith($f)?e.substring(1):e,YC=e=>{const t=Object.fromEntries(e.orderSensitiveModifiers.map(i=>[i,!0]));return i=>{if(i.length<=1)return i;const s=[];let l=[];return i.forEach(u=>{u[0]==="["||t[u]?(s.push(...l.sort(),u),l=[]):l.push(u)}),s.push(...l.sort()),s}},XC=e=>({cache:ZC(e.cacheSize),parseClassName:KC(e),sortModifiers:YC(e),...$C(e)}),QC=/\s+/,JC=(e,t)=>{const{parseClassName:n,getClassGroupId:i,getConflictingClassGroupIds:s,sortModifiers:l}=t,u=[],d=e.trim().split(QC);let f="";for(let p=d.length-1;p>=0;p-=1){const m=d[p],{isExternal:g,modifiers:y,hasImportantModifier:b,baseClassName:_,maybePostfixModifierPosition:k}=n(m);if(g){f=m+(f.length>0?" "+f:f);continue}let C=!!k,N=i(C?_.substring(0,k):_);if(!N){if(!C){f=m+(f.length>0?" "+f:f);continue}if(N=i(_),!N){f=m+(f.length>0?" "+f:f);continue}C=!1}const M=l(y).join(":"),O=b?M+$f:M,B=O+N;if(u.includes(B))continue;u.push(B);const Z=s(N,C);for(let re=0;re<Z.length;++re){const R=Z[re];u.push(O+R)}f=m+(f.length>0?" "+f:f)}return f};function qC(){let e=0,t,n,i="";for(;e<arguments.length;)(t=arguments[e++])&&(n=Zw(t))&&(i&&(i+=" "),i+=n);return i}const Zw=e=>{if(typeof e=="string")return e;let t,n="";for(let i=0;i<e.length;i++)e[i]&&(t=Zw(e[i]))&&(n&&(n+=" "),n+=t);return n};function eP(e,...t){let n,i,s,l=u;function u(f){const p=t.reduce((m,g)=>g(m),e());return n=XC(p),i=n.cache.get,s=n.cache.set,l=d,d(f)}function d(f){const p=i(f);if(p)return p;const m=JC(f,n);return s(f,m),m}return function(){return l(qC.apply(null,arguments))}}const Gt=e=>{const t=n=>n[e]||[];return t.isThemeGetter=!0,t},Hw=/^\[(?:(\w[\w-]*):)?(.+)\]$/i,Kw=/^\((?:(\w[\w-]*):)?(.+)\)$/i,tP=/^\d+\/\d+$/,nP=/^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/,rP=/\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/,oP=/^(rgba?|hsla?|hwb|(ok)?(lab|lch)|color-mix)\(.+\)$/,iP=/^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/,sP=/^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/,Zi=e=>tP.test(e),Ge=e=>!!e&&!Number.isNaN(Number(e)),Co=e=>!!e&&Number.isInteger(Number(e)),of=e=>e.endsWith("%")&&Ge(e.slice(0,-1)),Gr=e=>nP.test(e),aP=()=>!0,lP=e=>rP.test(e)&&!oP.test(e),Gw=()=>!1,uP=e=>iP.test(e),cP=e=>sP.test(e),dP=e=>!Pe(e)&&!Te(e),fP=e=>ps(e,Qw,Gw),Pe=e=>Hw.test(e),ei=e=>ps(e,Jw,lP),sf=e=>ps(e,vP,Ge),Kv=e=>ps(e,Yw,Gw),hP=e=>ps(e,Xw,cP),ql=e=>ps(e,qw,uP),Te=e=>Kw.test(e),ra=e=>ms(e,Jw),pP=e=>ms(e,yP),Gv=e=>ms(e,Yw),mP=e=>ms(e,Qw),gP=e=>ms(e,Xw),eu=e=>ms(e,qw,!0),ps=(e,t,n)=>{const i=Hw.exec(e);return i?i[1]?t(i[1]):n(i[2]):!1},ms=(e,t,n=!1)=>{const i=Kw.exec(e);return i?i[1]?t(i[1]):n:!1},Yw=e=>e==="position"||e==="percentage",Xw=e=>e==="image"||e==="url",Qw=e=>e==="length"||e==="size"||e==="bg-size",Jw=e=>e==="length",vP=e=>e==="number",yP=e=>e==="family-name",qw=e=>e==="shadow",wP=()=>{const e=Gt("color"),t=Gt("font"),n=Gt("text"),i=Gt("font-weight"),s=Gt("tracking"),l=Gt("leading"),u=Gt("breakpoint"),d=Gt("container"),f=Gt("spacing"),p=Gt("radius"),m=Gt("shadow"),g=Gt("inset-shadow"),y=Gt("text-shadow"),b=Gt("drop-shadow"),_=Gt("blur"),k=Gt("perspective"),C=Gt("aspect"),N=Gt("ease"),M=Gt("animate"),O=()=>["auto","avoid","all","avoid-page","page","left","right","column"],B=()=>["center","top","bottom","left","right","top-left","left-top","top-right","right-top","bottom-right","right-bottom","bottom-left","left-bottom"],Z=()=>[...B(),Te,Pe],re=()=>["auto","hidden","clip","visible","scroll"],R=()=>["auto","contain","none"],I=()=>[Te,Pe,f],ae=()=>[Zi,"full","auto",...I()],le=()=>[Co,"none","subgrid",Te,Pe],Ie=()=>["auto",{span:["full",Co,Te,Pe]},Co,Te,Pe],he=()=>[Co,"auto",Te,Pe],ge=()=>["auto","min","max","fr",Te,Pe],Ne=()=>["start","end","center","between","around","evenly","stretch","baseline","center-safe","end-safe"],Le=()=>["start","end","center","stretch","center-safe","end-safe"],ve=()=>["auto",...I()],ue=()=>[Zi,"auto","full","dvw","dvh","lvw","lvh","svw","svh","min","max","fit",...I()],z=()=>[e,Te,Pe],fe=()=>[...B(),Gv,Kv,{position:[Te,Pe]}],ee=()=>["no-repeat",{repeat:["","x","y","space","round"]}],j=()=>["auto","cover","contain",mP,fP,{size:[Te,Pe]}],K=()=>[of,ra,ei],q=()=>["","none","full",p,Te,Pe],ce=()=>["",Ge,ra,ei],me=()=>["solid","dashed","dotted","double"],je=()=>["normal","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity"],Ee=()=>[Ge,of,Gv,Kv],Se=()=>["","none",_,Te,Pe],He=()=>["none",Ge,Te,Pe],st=()=>["none",Ge,Te,Pe],on=()=>[Ge,Te,Pe],et=()=>[Zi,"full",...I()];return{cacheSize:500,theme:{animate:["spin","ping","pulse","bounce"],aspect:["video"],blur:[Gr],breakpoint:[Gr],color:[aP],container:[Gr],"drop-shadow":[Gr],ease:["in","out","in-out"],font:[dP],"font-weight":["thin","extralight","light","normal","medium","semibold","bold","extrabold","black"],"inset-shadow":[Gr],leading:["none","tight","snug","normal","relaxed","loose"],perspective:["dramatic","near","normal","midrange","distant","none"],radius:[Gr],shadow:[Gr],spacing:["px",Ge],text:[Gr],"text-shadow":[Gr],tracking:["tighter","tight","normal","wide","wider","widest"]},classGroups:{aspect:[{aspect:["auto","square",Zi,Pe,Te,C]}],container:["container"],columns:[{columns:[Ge,Pe,Te,d]}],"break-after":[{"break-after":O()}],"break-before":[{"break-before":O()}],"break-inside":[{"break-inside":["auto","avoid","avoid-page","avoid-column"]}],"box-decoration":[{"box-decoration":["slice","clone"]}],box:[{box:["border","content"]}],display:["block","inline-block","inline","flex","inline-flex","table","inline-table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row-group","table-row","flow-root","grid","inline-grid","contents","list-item","hidden"],sr:["sr-only","not-sr-only"],float:[{float:["right","left","none","start","end"]}],clear:[{clear:["left","right","both","none","start","end"]}],isolation:["isolate","isolation-auto"],"object-fit":[{object:["contain","cover","fill","none","scale-down"]}],"object-position":[{object:Z()}],overflow:[{overflow:re()}],"overflow-x":[{"overflow-x":re()}],"overflow-y":[{"overflow-y":re()}],overscroll:[{overscroll:R()}],"overscroll-x":[{"overscroll-x":R()}],"overscroll-y":[{"overscroll-y":R()}],position:["static","fixed","absolute","relative","sticky"],inset:[{inset:ae()}],"inset-x":[{"inset-x":ae()}],"inset-y":[{"inset-y":ae()}],start:[{start:ae()}],end:[{end:ae()}],top:[{top:ae()}],right:[{right:ae()}],bottom:[{bottom:ae()}],left:[{left:ae()}],visibility:["visible","invisible","collapse"],z:[{z:[Co,"auto",Te,Pe]}],basis:[{basis:[Zi,"full","auto",d,...I()]}],"flex-direction":[{flex:["row","row-reverse","col","col-reverse"]}],"flex-wrap":[{flex:["nowrap","wrap","wrap-reverse"]}],flex:[{flex:[Ge,Zi,"auto","initial","none",Pe]}],grow:[{grow:["",Ge,Te,Pe]}],shrink:[{shrink:["",Ge,Te,Pe]}],order:[{order:[Co,"first","last","none",Te,Pe]}],"grid-cols":[{"grid-cols":le()}],"col-start-end":[{col:Ie()}],"col-start":[{"col-start":he()}],"col-end":[{"col-end":he()}],"grid-rows":[{"grid-rows":le()}],"row-start-end":[{row:Ie()}],"row-start":[{"row-start":he()}],"row-end":[{"row-end":he()}],"grid-flow":[{"grid-flow":["row","col","dense","row-dense","col-dense"]}],"auto-cols":[{"auto-cols":ge()}],"auto-rows":[{"auto-rows":ge()}],gap:[{gap:I()}],"gap-x":[{"gap-x":I()}],"gap-y":[{"gap-y":I()}],"justify-content":[{justify:[...Ne(),"normal"]}],"justify-items":[{"justify-items":[...Le(),"normal"]}],"justify-self":[{"justify-self":["auto",...Le()]}],"align-content":[{content:["normal",...Ne()]}],"align-items":[{items:[...Le(),{baseline:["","last"]}]}],"align-self":[{self:["auto",...Le(),{baseline:["","last"]}]}],"place-content":[{"place-content":Ne()}],"place-items":[{"place-items":[...Le(),"baseline"]}],"place-self":[{"place-self":["auto",...Le()]}],p:[{p:I()}],px:[{px:I()}],py:[{py:I()}],ps:[{ps:I()}],pe:[{pe:I()}],pt:[{pt:I()}],pr:[{pr:I()}],pb:[{pb:I()}],pl:[{pl:I()}],m:[{m:ve()}],mx:[{mx:ve()}],my:[{my:ve()}],ms:[{ms:ve()}],me:[{me:ve()}],mt:[{mt:ve()}],mr:[{mr:ve()}],mb:[{mb:ve()}],ml:[{ml:ve()}],"space-x":[{"space-x":I()}],"space-x-reverse":["space-x-reverse"],"space-y":[{"space-y":I()}],"space-y-reverse":["space-y-reverse"],size:[{size:ue()}],w:[{w:[d,"screen",...ue()]}],"min-w":[{"min-w":[d,"screen","none",...ue()]}],"max-w":[{"max-w":[d,"screen","none","prose",{screen:[u]},...ue()]}],h:[{h:["screen","lh",...ue()]}],"min-h":[{"min-h":["screen","lh","none",...ue()]}],"max-h":[{"max-h":["screen","lh",...ue()]}],"font-size":[{text:["base",n,ra,ei]}],"font-smoothing":["antialiased","subpixel-antialiased"],"font-style":["italic","not-italic"],"font-weight":[{font:[i,Te,sf]}],"font-stretch":[{"font-stretch":["ultra-condensed","extra-condensed","condensed","semi-condensed","normal","semi-expanded","expanded","extra-expanded","ultra-expanded",of,Pe]}],"font-family":[{font:[pP,Pe,t]}],"fvn-normal":["normal-nums"],"fvn-ordinal":["ordinal"],"fvn-slashed-zero":["slashed-zero"],"fvn-figure":["lining-nums","oldstyle-nums"],"fvn-spacing":["proportional-nums","tabular-nums"],"fvn-fraction":["diagonal-fractions","stacked-fractions"],tracking:[{tracking:[s,Te,Pe]}],"line-clamp":[{"line-clamp":[Ge,"none",Te,sf]}],leading:[{leading:[l,...I()]}],"list-image":[{"list-image":["none",Te,Pe]}],"list-style-position":[{list:["inside","outside"]}],"list-style-type":[{list:["disc","decimal","none",Te,Pe]}],"text-alignment":[{text:["left","center","right","justify","start","end"]}],"placeholder-color":[{placeholder:z()}],"text-color":[{text:z()}],"text-decoration":["underline","overline","line-through","no-underline"],"text-decoration-style":[{decoration:[...me(),"wavy"]}],"text-decoration-thickness":[{decoration:[Ge,"from-font","auto",Te,ei]}],"text-decoration-color":[{decoration:z()}],"underline-offset":[{"underline-offset":[Ge,"auto",Te,Pe]}],"text-transform":["uppercase","lowercase","capitalize","normal-case"],"text-overflow":["truncate","text-ellipsis","text-clip"],"text-wrap":[{text:["wrap","nowrap","balance","pretty"]}],indent:[{indent:I()}],"vertical-align":[{align:["baseline","top","middle","bottom","text-top","text-bottom","sub","super",Te,Pe]}],whitespace:[{whitespace:["normal","nowrap","pre","pre-line","pre-wrap","break-spaces"]}],break:[{break:["normal","words","all","keep"]}],wrap:[{wrap:["break-word","anywhere","normal"]}],hyphens:[{hyphens:["none","manual","auto"]}],content:[{content:["none",Te,Pe]}],"bg-attachment":[{bg:["fixed","local","scroll"]}],"bg-clip":[{"bg-clip":["border","padding","content","text"]}],"bg-origin":[{"bg-origin":["border","padding","content"]}],"bg-position":[{bg:fe()}],"bg-repeat":[{bg:ee()}],"bg-size":[{bg:j()}],"bg-image":[{bg:["none",{linear:[{to:["t","tr","r","br","b","bl","l","tl"]},Co,Te,Pe],radial:["",Te,Pe],conic:[Co,Te,Pe]},gP,hP]}],"bg-color":[{bg:z()}],"gradient-from-pos":[{from:K()}],"gradient-via-pos":[{via:K()}],"gradient-to-pos":[{to:K()}],"gradient-from":[{from:z()}],"gradient-via":[{via:z()}],"gradient-to":[{to:z()}],rounded:[{rounded:q()}],"rounded-s":[{"rounded-s":q()}],"rounded-e":[{"rounded-e":q()}],"rounded-t":[{"rounded-t":q()}],"rounded-r":[{"rounded-r":q()}],"rounded-b":[{"rounded-b":q()}],"rounded-l":[{"rounded-l":q()}],"rounded-ss":[{"rounded-ss":q()}],"rounded-se":[{"rounded-se":q()}],"rounded-ee":[{"rounded-ee":q()}],"rounded-es":[{"rounded-es":q()}],"rounded-tl":[{"rounded-tl":q()}],"rounded-tr":[{"rounded-tr":q()}],"rounded-br":[{"rounded-br":q()}],"rounded-bl":[{"rounded-bl":q()}],"border-w":[{border:ce()}],"border-w-x":[{"border-x":ce()}],"border-w-y":[{"border-y":ce()}],"border-w-s":[{"border-s":ce()}],"border-w-e":[{"border-e":ce()}],"border-w-t":[{"border-t":ce()}],"border-w-r":[{"border-r":ce()}],"border-w-b":[{"border-b":ce()}],"border-w-l":[{"border-l":ce()}],"divide-x":[{"divide-x":ce()}],"divide-x-reverse":["divide-x-reverse"],"divide-y":[{"divide-y":ce()}],"divide-y-reverse":["divide-y-reverse"],"border-style":[{border:[...me(),"hidden","none"]}],"divide-style":[{divide:[...me(),"hidden","none"]}],"border-color":[{border:z()}],"border-color-x":[{"border-x":z()}],"border-color-y":[{"border-y":z()}],"border-color-s":[{"border-s":z()}],"border-color-e":[{"border-e":z()}],"border-color-t":[{"border-t":z()}],"border-color-r":[{"border-r":z()}],"border-color-b":[{"border-b":z()}],"border-color-l":[{"border-l":z()}],"divide-color":[{divide:z()}],"outline-style":[{outline:[...me(),"none","hidden"]}],"outline-offset":[{"outline-offset":[Ge,Te,Pe]}],"outline-w":[{outline:["",Ge,ra,ei]}],"outline-color":[{outline:z()}],shadow:[{shadow:["","none",m,eu,ql]}],"shadow-color":[{shadow:z()}],"inset-shadow":[{"inset-shadow":["none",g,eu,ql]}],"inset-shadow-color":[{"inset-shadow":z()}],"ring-w":[{ring:ce()}],"ring-w-inset":["ring-inset"],"ring-color":[{ring:z()}],"ring-offset-w":[{"ring-offset":[Ge,ei]}],"ring-offset-color":[{"ring-offset":z()}],"inset-ring-w":[{"inset-ring":ce()}],"inset-ring-color":[{"inset-ring":z()}],"text-shadow":[{"text-shadow":["none",y,eu,ql]}],"text-shadow-color":[{"text-shadow":z()}],opacity:[{opacity:[Ge,Te,Pe]}],"mix-blend":[{"mix-blend":[...je(),"plus-darker","plus-lighter"]}],"bg-blend":[{"bg-blend":je()}],"mask-clip":[{"mask-clip":["border","padding","content","fill","stroke","view"]},"mask-no-clip"],"mask-composite":[{mask:["add","subtract","intersect","exclude"]}],"mask-image-linear-pos":[{"mask-linear":[Ge]}],"mask-image-linear-from-pos":[{"mask-linear-from":Ee()}],"mask-image-linear-to-pos":[{"mask-linear-to":Ee()}],"mask-image-linear-from-color":[{"mask-linear-from":z()}],"mask-image-linear-to-color":[{"mask-linear-to":z()}],"mask-image-t-from-pos":[{"mask-t-from":Ee()}],"mask-image-t-to-pos":[{"mask-t-to":Ee()}],"mask-image-t-from-color":[{"mask-t-from":z()}],"mask-image-t-to-color":[{"mask-t-to":z()}],"mask-image-r-from-pos":[{"mask-r-from":Ee()}],"mask-image-r-to-pos":[{"mask-r-to":Ee()}],"mask-image-r-from-color":[{"mask-r-from":z()}],"mask-image-r-to-color":[{"mask-r-to":z()}],"mask-image-b-from-pos":[{"mask-b-from":Ee()}],"mask-image-b-to-pos":[{"mask-b-to":Ee()}],"mask-image-b-from-color":[{"mask-b-from":z()}],"mask-image-b-to-color":[{"mask-b-to":z()}],"mask-image-l-from-pos":[{"mask-l-from":Ee()}],"mask-image-l-to-pos":[{"mask-l-to":Ee()}],"mask-image-l-from-color":[{"mask-l-from":z()}],"mask-image-l-to-color":[{"mask-l-to":z()}],"mask-image-x-from-pos":[{"mask-x-from":Ee()}],"mask-image-x-to-pos":[{"mask-x-to":Ee()}],"mask-image-x-from-color":[{"mask-x-from":z()}],"mask-image-x-to-color":[{"mask-x-to":z()}],"mask-image-y-from-pos":[{"mask-y-from":Ee()}],"mask-image-y-to-pos":[{"mask-y-to":Ee()}],"mask-image-y-from-color":[{"mask-y-from":z()}],"mask-image-y-to-color":[{"mask-y-to":z()}],"mask-image-radial":[{"mask-radial":[Te,Pe]}],"mask-image-radial-from-pos":[{"mask-radial-from":Ee()}],"mask-image-radial-to-pos":[{"mask-radial-to":Ee()}],"mask-image-radial-from-color":[{"mask-radial-from":z()}],"mask-image-radial-to-color":[{"mask-radial-to":z()}],"mask-image-radial-shape":[{"mask-radial":["circle","ellipse"]}],"mask-image-radial-size":[{"mask-radial":[{closest:["side","corner"],farthest:["side","corner"]}]}],"mask-image-radial-pos":[{"mask-radial-at":B()}],"mask-image-conic-pos":[{"mask-conic":[Ge]}],"mask-image-conic-from-pos":[{"mask-conic-from":Ee()}],"mask-image-conic-to-pos":[{"mask-conic-to":Ee()}],"mask-image-conic-from-color":[{"mask-conic-from":z()}],"mask-image-conic-to-color":[{"mask-conic-to":z()}],"mask-mode":[{mask:["alpha","luminance","match"]}],"mask-origin":[{"mask-origin":["border","padding","content","fill","stroke","view"]}],"mask-position":[{mask:fe()}],"mask-repeat":[{mask:ee()}],"mask-size":[{mask:j()}],"mask-type":[{"mask-type":["alpha","luminance"]}],"mask-image":[{mask:["none",Te,Pe]}],filter:[{filter:["","none",Te,Pe]}],blur:[{blur:Se()}],brightness:[{brightness:[Ge,Te,Pe]}],contrast:[{contrast:[Ge,Te,Pe]}],"drop-shadow":[{"drop-shadow":["","none",b,eu,ql]}],"drop-shadow-color":[{"drop-shadow":z()}],grayscale:[{grayscale:["",Ge,Te,Pe]}],"hue-rotate":[{"hue-rotate":[Ge,Te,Pe]}],invert:[{invert:["",Ge,Te,Pe]}],saturate:[{saturate:[Ge,Te,Pe]}],sepia:[{sepia:["",Ge,Te,Pe]}],"backdrop-filter":[{"backdrop-filter":["","none",Te,Pe]}],"backdrop-blur":[{"backdrop-blur":Se()}],"backdrop-brightness":[{"backdrop-brightness":[Ge,Te,Pe]}],"backdrop-contrast":[{"backdrop-contrast":[Ge,Te,Pe]}],"backdrop-grayscale":[{"backdrop-grayscale":["",Ge,Te,Pe]}],"backdrop-hue-rotate":[{"backdrop-hue-rotate":[Ge,Te,Pe]}],"backdrop-invert":[{"backdrop-invert":["",Ge,Te,Pe]}],"backdrop-opacity":[{"backdrop-opacity":[Ge,Te,Pe]}],"backdrop-saturate":[{"backdrop-saturate":[Ge,Te,Pe]}],"backdrop-sepia":[{"backdrop-sepia":["",Ge,Te,Pe]}],"border-collapse":[{border:["collapse","separate"]}],"border-spacing":[{"border-spacing":I()}],"border-spacing-x":[{"border-spacing-x":I()}],"border-spacing-y":[{"border-spacing-y":I()}],"table-layout":[{table:["auto","fixed"]}],caption:[{caption:["top","bottom"]}],transition:[{transition:["","all","colors","opacity","shadow","transform","none",Te,Pe]}],"transition-behavior":[{transition:["normal","discrete"]}],duration:[{duration:[Ge,"initial",Te,Pe]}],ease:[{ease:["linear","initial",N,Te,Pe]}],delay:[{delay:[Ge,Te,Pe]}],animate:[{animate:["none",M,Te,Pe]}],backface:[{backface:["hidden","visible"]}],perspective:[{perspective:[k,Te,Pe]}],"perspective-origin":[{"perspective-origin":Z()}],rotate:[{rotate:He()}],"rotate-x":[{"rotate-x":He()}],"rotate-y":[{"rotate-y":He()}],"rotate-z":[{"rotate-z":He()}],scale:[{scale:st()}],"scale-x":[{"scale-x":st()}],"scale-y":[{"scale-y":st()}],"scale-z":[{"scale-z":st()}],"scale-3d":["scale-3d"],skew:[{skew:on()}],"skew-x":[{"skew-x":on()}],"skew-y":[{"skew-y":on()}],transform:[{transform:[Te,Pe,"","none","gpu","cpu"]}],"transform-origin":[{origin:Z()}],"transform-style":[{transform:["3d","flat"]}],translate:[{translate:et()}],"translate-x":[{"translate-x":et()}],"translate-y":[{"translate-y":et()}],"translate-z":[{"translate-z":et()}],"translate-none":["translate-none"],accent:[{accent:z()}],appearance:[{appearance:["none","auto"]}],"caret-color":[{caret:z()}],"color-scheme":[{scheme:["normal","dark","light","light-dark","only-dark","only-light"]}],cursor:[{cursor:["auto","default","pointer","wait","text","move","help","not-allowed","none","context-menu","progress","cell","crosshair","vertical-text","alias","copy","no-drop","grab","grabbing","all-scroll","col-resize","row-resize","n-resize","e-resize","s-resize","w-resize","ne-resize","nw-resize","se-resize","sw-resize","ew-resize","ns-resize","nesw-resize","nwse-resize","zoom-in","zoom-out",Te,Pe]}],"field-sizing":[{"field-sizing":["fixed","content"]}],"pointer-events":[{"pointer-events":["auto","none"]}],resize:[{resize:["none","","y","x"]}],"scroll-behavior":[{scroll:["auto","smooth"]}],"scroll-m":[{"scroll-m":I()}],"scroll-mx":[{"scroll-mx":I()}],"scroll-my":[{"scroll-my":I()}],"scroll-ms":[{"scroll-ms":I()}],"scroll-me":[{"scroll-me":I()}],"scroll-mt":[{"scroll-mt":I()}],"scroll-mr":[{"scroll-mr":I()}],"scroll-mb":[{"scroll-mb":I()}],"scroll-ml":[{"scroll-ml":I()}],"scroll-p":[{"scroll-p":I()}],"scroll-px":[{"scroll-px":I()}],"scroll-py":[{"scroll-py":I()}],"scroll-ps":[{"scroll-ps":I()}],"scroll-pe":[{"scroll-pe":I()}],"scroll-pt":[{"scroll-pt":I()}],"scroll-pr":[{"scroll-pr":I()}],"scroll-pb":[{"scroll-pb":I()}],"scroll-pl":[{"scroll-pl":I()}],"snap-align":[{snap:["start","end","center","align-none"]}],"snap-stop":[{snap:["normal","always"]}],"snap-type":[{snap:["none","x","y","both"]}],"snap-strictness":[{snap:["mandatory","proximity"]}],touch:[{touch:["auto","none","manipulation"]}],"touch-x":[{"touch-pan":["x","left","right"]}],"touch-y":[{"touch-pan":["y","up","down"]}],"touch-pz":["touch-pinch-zoom"],select:[{select:["none","text","all","auto"]}],"will-change":[{"will-change":["auto","scroll","contents","transform",Te,Pe]}],fill:[{fill:["none",...z()]}],"stroke-w":[{stroke:[Ge,ra,ei,sf]}],stroke:[{stroke:["none",...z()]}],"forced-color-adjust":[{"forced-color-adjust":["auto","none"]}]},conflictingClassGroups:{overflow:["overflow-x","overflow-y"],overscroll:["overscroll-x","overscroll-y"],inset:["inset-x","inset-y","start","end","top","right","bottom","left"],"inset-x":["right","left"],"inset-y":["top","bottom"],flex:["basis","grow","shrink"],gap:["gap-x","gap-y"],p:["px","py","ps","pe","pt","pr","pb","pl"],px:["pr","pl"],py:["pt","pb"],m:["mx","my","ms","me","mt","mr","mb","ml"],mx:["mr","ml"],my:["mt","mb"],size:["w","h"],"font-size":["leading"],"fvn-normal":["fvn-ordinal","fvn-slashed-zero","fvn-figure","fvn-spacing","fvn-fraction"],"fvn-ordinal":["fvn-normal"],"fvn-slashed-zero":["fvn-normal"],"fvn-figure":["fvn-normal"],"fvn-spacing":["fvn-normal"],"fvn-fraction":["fvn-normal"],"line-clamp":["display","overflow"],rounded:["rounded-s","rounded-e","rounded-t","rounded-r","rounded-b","rounded-l","rounded-ss","rounded-se","rounded-ee","rounded-es","rounded-tl","rounded-tr","rounded-br","rounded-bl"],"rounded-s":["rounded-ss","rounded-es"],"rounded-e":["rounded-se","rounded-ee"],"rounded-t":["rounded-tl","rounded-tr"],"rounded-r":["rounded-tr","rounded-br"],"rounded-b":["rounded-br","rounded-bl"],"rounded-l":["rounded-tl","rounded-bl"],"border-spacing":["border-spacing-x","border-spacing-y"],"border-w":["border-w-x","border-w-y","border-w-s","border-w-e","border-w-t","border-w-r","border-w-b","border-w-l"],"border-w-x":["border-w-r","border-w-l"],"border-w-y":["border-w-t","border-w-b"],"border-color":["border-color-x","border-color-y","border-color-s","border-color-e","border-color-t","border-color-r","border-color-b","border-color-l"],"border-color-x":["border-color-r","border-color-l"],"border-color-y":["border-color-t","border-color-b"],translate:["translate-x","translate-y","translate-none"],"translate-none":["translate","translate-x","translate-y","translate-z"],"scroll-m":["scroll-mx","scroll-my","scroll-ms","scroll-me","scroll-mt","scroll-mr","scroll-mb","scroll-ml"],"scroll-mx":["scroll-mr","scroll-ml"],"scroll-my":["scroll-mt","scroll-mb"],"scroll-p":["scroll-px","scroll-py","scroll-ps","scroll-pe","scroll-pt","scroll-pr","scroll-pb","scroll-pl"],"scroll-px":["scroll-pr","scroll-pl"],"scroll-py":["scroll-pt","scroll-pb"],touch:["touch-x","touch-y","touch-pz"],"touch-x":["touch"],"touch-y":["touch"],"touch-pz":["touch"]},conflictingClassGroupModifiers:{"font-size":["leading"]},orderSensitiveModifiers:["*","**","after","backdrop","before","details-content","file","first-letter","first-line","marker","placeholder","selection"]}},xP=eP(wP);function Ot(...e){return xP(Bw(e))}const SP=Xu("inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",{variants:{variant:{default:"bg-primary text-primary-foreground shadow hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",outline:"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-9 px-4 py-2",sm:"h-8 rounded-md px-3 text-xs",lg:"h-10 rounded-md px-8",icon:"h-9 w-9"}},defaultVariants:{variant:"default",size:"default"}}),Mn=S.forwardRef(({className:e,variant:t,size:n,asChild:i=!1,...s},l)=>{const u=i?$w:"button";return x.jsx(u,{className:Ot(SP({variant:t,size:n,className:e})),ref:l,...s})});Mn.displayName="Button";const Ao=S.forwardRef(({className:e,...t},n)=>x.jsx("div",{ref:n,className:Ot("rounded-xl border bg-card text-card-foreground shadow",e),...t}));Ao.displayName="Card";const Au=S.forwardRef(({className:e,...t},n)=>x.jsx("div",{ref:n,className:Ot("flex flex-col space-y-1.5 p-6",e),...t}));Au.displayName="CardHeader";const us=S.forwardRef(({className:e,...t},n)=>x.jsx("div",{ref:n,className:Ot("font-semibold leading-none tracking-tight",e),...t}));us.displayName="CardTitle";const Qu=S.forwardRef(({className:e,...t},n)=>x.jsx("div",{ref:n,className:Ot("text-sm text-muted-foreground",e),...t}));Qu.displayName="CardDescription";const cs=S.forwardRef(({className:e,...t},n)=>x.jsx("div",{ref:n,className:Ot("p-6 pt-0",e),...t}));cs.displayName="CardContent";const bP=S.forwardRef(({className:e,...t},n)=>x.jsx("div",{ref:n,className:Ot("flex items-center p-6 pt-0",e),...t}));bP.displayName="CardFooter";function Bf({title:e="Oops! Something went wrong",message:t="We're aware of the issue and actively working to fix it. Your experience matters to us.",error:n,onRetry:i,onGoHome:s,showErrorDetails:l=!0,statusMessage:u="Our team has been notified"}){const d=()=>{i?i():window.location.reload()},f=()=>{s?s():window.location.href="/"};return x.jsx("div",{className:"min-h-screen flex items-center justify-center bg-background p-4",children:x.jsxs("div",{className:"w-full max-w-md",children:[x.jsx("div",{className:"absolute inset-0 bg-gradient-rainbow opacity-5 dark:opacity-10"}),x.jsx(Ao,{className:"relative backdrop-blur-sm shadow-2xl",children:x.jsxs(cs,{className:"p-8 space-y-6",children:[x.jsxs("div",{className:"text-center space-y-4",children:[x.jsx("div",{className:"mx-auto w-16 h-16 rounded-2xl bg-destructive/10 flex items-center justify-center",children:x.jsx(AC,{className:"w-8 h-8 text-destructive"})}),x.jsx("h1",{className:"text-2xl font-bold",children:e}),x.jsx("p",{className:"text-muted-foreground",children:t})]}),u&&x.jsxs("div",{className:"flex items-center justify-center gap-2 text-sm text-muted-foreground",children:[x.jsx("div",{className:"w-2 h-2 rounded-full bg-orange-500 animate-pulse"}),x.jsx("span",{children:u})]}),x.jsxs("div",{className:"space-y-3",children:[x.jsxs(Mn,{onClick:d,className:"w-full",children:[x.jsx(TC,{className:"w-4 h-4 mr-2"}),"Try Again"]}),x.jsxs(Mn,{onClick:f,variant:"secondary",className:"w-full",children:[x.jsx(zw,{className:"w-4 h-4 mr-2"}),"Go to Homepage"]})]}),!1]})}),x.jsx("p",{className:"text-center text-sm text-muted-foreground mt-6",children:"If this problem persists, please contact our support team"})]})})}class kP extends S.Component{constructor(){super(...arguments);Sn(this,"state",{hasError:!1,error:null,errorInfo:null});Sn(this,"retry",()=>{this.setState({hasError:!1,error:null,errorInfo:null}),window.location.reload()});Sn(this,"goHome",()=>{window.location.href="/"})}static getDerivedStateFromError(n){return{hasError:!0,error:n,errorInfo:null}}componentDidCatch(n,i){this.setState({errorInfo:i}),kh.report({message:n.message,stack:n.stack||"",componentStack:i.componentStack,errorBoundary:!0,errorBoundaryProps:{componentName:this.constructor.name},url:window.location.href,timestamp:new Date().toISOString(),level:"error"})}render(){return this.state.hasError&&this.state.error?this.props.fallback?this.props.fallback(this.state.error,this.state.errorInfo,this.retry):x.jsx(Bf,{error:this.state.error,onRetry:this.retry,onGoHome:this.goHome}):this.props.children}}function EP(){const e=Nw();return S.useEffect(()=>{if(e){let t="Unknown route error",n="";hi(e)?(t=`Route Error ${e.status}: ${e.statusText}`,e.data&&(t+=` - ${JSON.stringify(e.data)}`)):e instanceof Error?(t=e.message,n=e.stack||""):typeof e=="string"?t=e:t=JSON.stringify(e),kh.report({message:t,stack:n,url:window.location.href,timestamp:new Date().toISOString(),source:"react-router",error:e,level:"error"})}},[e]),hi(e)?x.jsx(Bf,{title:`${e.status} ${e.statusText}`,message:"Sorry, an error occurred while loading this page.",error:e.data?{message:JSON.stringify(e.data,null,2)}:e,statusMessage:"Navigation error detected"}):x.jsx(Bf,{title:"Unexpected Error",message:"An unexpected error occurred while loading this page.",error:e,statusMessage:"Routing error detected"})}const jn={name:"Jaswant Karri",email:"jaswant5511246@gmail.com",phone:"+91 1234567890",photoUrl:"https://github.com/jaswant-karri.png",about:"I'm a passionate web developer with a knack for creating modern, responsive, and user-friendly web applications. I thrive on turning complex problems into simple, beautiful, and intuitive designs.",socials:[{name:"LinkedIn",url:"https://www.linkedin.com/in/jaswant-karri-84ab0b33b/",icon:vC},{name:"GitHub",url:"https://github.com/jaswant-karri",icon:hC}]},_P=[{name:"HTML",level:"Advanced"},{name:"CSS",level:"Advanced"},{name:"JavaScript",level:"Intermediate"},{name:"PHP",level:"Intermediate"},{name:"React",level:"Intermediate"},{name:"Tailwind CSS",level:"Advanced"}],ex=[{title:"E-commerce Platform",description:"A full-featured e-commerce website with product listings, a shopping cart, and a secure checkout process. Built with modern web technologies.",skillsUsed:["React","Node.js","Express","MongoDB"],websiteLink:"https://example.com/project-one",imageUrl:"https://placehold.co/600x400/6366f1/ffffff?text=E-commerce"},{title:"Portfolio Website",description:"This very portfolio website, designed to be clean, modern, and fully responsive. Showcases my skills and projects effectively.",skillsUsed:["React","TypeScript","Tailwind CSS","Framer Motion"],websiteLink:"#",imageUrl:"https://placehold.co/600x400/ec4899/ffffff?text=Portfolio"},{title:"Task Management App",description:"A Kanban-style task management application that helps users organize their workflow with drag-and-drop functionality.",skillsUsed:["Vue.js","Firebase","SCSS"],websiteLink:"https://example.com/project-three",imageUrl:"https://placehold.co/600x400/8b5cf6/ffffff?text=Task+App"},{title:"Weather Dashboard",description:"A simple and elegant weather dashboard that provides real-time weather information for any city in the world using a third-party API.",skillsUsed:["JavaScript","HTML","CSS","OpenWeatherMap API"],websiteLink:"https://example.com/project-four",imageUrl:"https://placehold.co/600x400/22c55e/ffffff?text=Weather+App"}],Yv=[{degree:"Diploma in Computer Science",institution:"S.V. Government Polytechnic College, Tirupati",year:"2023 - 2026",icon:$v},{degree:"B.Tech in Computer Science",institution:"JNTUK",year:"2026 - 2029",icon:$v}],Xv=[{role:"Founding Member",company:"Starterwave",period:"2023 - Present",description:"Contributed to the foundational development and strategic direction of the company, focusing on building scalable web solutions from the ground up.",icon:Vv},{role:"Web Developer",company:"Citrixltd",period:"2024 - Present",description:"Developed and maintained responsive websites and web applications, collaborating with cross-functional teams to deliver high-quality products.",icon:Vv}],Qv=[{href:"/",label:"Home",icon:zw},{href:"/projects",label:"My Projects",icon:lC},{href:"/about",label:"About",icon:jC},{href:"/contact",label:"Contact",icon:Iw}],tx=[{label:"Email",value:jn.email,icon:Iw,href:`mailto:${jn.email}`},{label:"Phone",value:jn.phone,icon:CC,href:`tel:${jn.phone.replace(/\s/g,"")}`}],CP=Xu("inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",{variants:{variant:{default:"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",secondary:"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",destructive:"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",outline:"text-foreground"}},defaultVariants:{variant:"default"}});function Wf({className:e,variant:t,...n}){return x.jsx("div",{className:Ot(CP({variant:t}),e),...n})}var Fa=e=>e.type==="checkbox",si=e=>e instanceof Date,An=e=>e==null;const nx=e=>typeof e=="object";var Bt=e=>!An(e)&&!Array.isArray(e)&&nx(e)&&!si(e),rx=e=>Bt(e)&&e.target?Fa(e.target)?e.target.checked:e.target.value:e,PP=e=>e.substring(0,e.search(/\.\d+(\.|$)/))||e,ox=(e,t)=>e.has(PP(t)),TP=e=>{const t=e.constructor&&e.constructor.prototype;return Bt(t)&&t.hasOwnProperty("isPrototypeOf")},Ih=typeof window<"u"&&typeof window.HTMLElement<"u"&&typeof document<"u";function Yt(e){let t;const n=Array.isArray(e),i=typeof FileList<"u"?e instanceof FileList:!1;if(e instanceof Date)t=new Date(e);else if(!(Ih&&(e instanceof Blob||i))&&(n||Bt(e)))if(t=n?[]:Object.create(Object.getPrototypeOf(e)),!n&&!TP(e))t=e;else for(const s in e)e.hasOwnProperty(s)&&(t[s]=Yt(e[s]));else return e;return t}var Ju=e=>/^\w*$/.test(e),At=e=>e===void 0,Fh=e=>Array.isArray(e)?e.filter(Boolean):[],Vh=e=>Fh(e.replace(/["|']|\]/g,"").split(/\.|\[/)),pe=(e,t,n)=>{if(!t||!Bt(e))return n;const i=(Ju(t)?[t]:Vh(t)).reduce((s,l)=>An(s)?s:s[l],e);return At(i)||i===e?At(e[t])?n:e[t]:i},Hn=e=>typeof e=="boolean",ct=(e,t,n)=>{let i=-1;const s=Ju(t)?[t]:Vh(t),l=s.length,u=l-1;for(;++i<l;){const d=s[i];let f=n;if(i!==u){const p=e[d];f=Bt(p)||Array.isArray(p)?p:isNaN(+s[i+1])?{}:[]}if(d==="__proto__"||d==="constructor"||d==="prototype")return;e[d]=f,e=e[d]}};const Mu={BLUR:"blur",FOCUS_OUT:"focusout",CHANGE:"change"},wr={onBlur:"onBlur",onChange:"onChange",onSubmit:"onSubmit",onTouched:"onTouched",all:"all"},Yr={max:"max",min:"min",maxLength:"maxLength",minLength:"minLength",pattern:"pattern",required:"required",validate:"validate"},$h=G.createContext(null);$h.displayName="HookFormContext";const qu=()=>G.useContext($h),RP=e=>{const{children:t,...n}=e;return G.createElement($h.Provider,{value:n},t)};var ix=(e,t,n,i=!0)=>{const s={defaultValues:t._defaultValues};for(const l in e)Object.defineProperty(s,l,{get:()=>{const u=l;return t._proxyFormState[u]!==wr.all&&(t._proxyFormState[u]=!i||wr.all),n&&(n[u]=!0),e[u]}});return s};const Uh=typeof window<"u"?G.useLayoutEffect:G.useEffect;function DP(e){const t=qu(),{control:n=t.control,disabled:i,name:s,exact:l}=e||{},[u,d]=G.useState(n._formState),f=G.useRef({isDirty:!1,isLoading:!1,dirtyFields:!1,touchedFields:!1,validatingFields:!1,isValidating:!1,isValid:!1,errors:!1});return Uh(()=>n._subscribe({name:s,formState:f.current,exact:l,callback:p=>{!i&&d({...n._formState,...p})}}),[s,i,l]),G.useEffect(()=>{f.current.isValid&&n._setValid(!0)},[n]),G.useMemo(()=>ix(u,n,f.current,!1),[u,n])}var Kn=e=>typeof e=="string",sx=(e,t,n,i,s)=>Kn(e)?(i&&t.watch.add(e),pe(n,e,s)):Array.isArray(e)?e.map(l=>(i&&t.watch.add(l),pe(n,l))):(i&&(t.watchAll=!0),n),Zf=e=>An(e)||!nx(e);function Qr(e,t,n=new WeakSet){if(Zf(e)||Zf(t))return e===t;if(si(e)&&si(t))return e.getTime()===t.getTime();const i=Object.keys(e),s=Object.keys(t);if(i.length!==s.length)return!1;if(n.has(e)||n.has(t))return!0;n.add(e),n.add(t);for(const l of i){const u=e[l];if(!s.includes(l))return!1;if(l!=="ref"){const d=t[l];if(si(u)&&si(d)||Bt(u)&&Bt(d)||Array.isArray(u)&&Array.isArray(d)?!Qr(u,d,n):u!==d)return!1}}return!0}function NP(e){const t=qu(),{control:n=t.control,name:i,defaultValue:s,disabled:l,exact:u,compute:d}=e||{},f=G.useRef(s),p=G.useRef(d),m=G.useRef(void 0);p.current=d;const g=G.useMemo(()=>n._getWatch(i,f.current),[n,i]),[y,b]=G.useState(p.current?p.current(g):g);return Uh(()=>n._subscribe({name:i,formState:{values:!0},exact:u,callback:_=>{if(!l){const k=sx(i,n._names,_.values||n._formValues,!1,f.current);if(p.current){const C=p.current(k);Qr(C,m.current)||(b(C),m.current=C)}else b(k)}}}),[n,l,i,u]),G.useEffect(()=>n._removeUnmounted()),y}function AP(e){const t=qu(),{name:n,disabled:i,control:s=t.control,shouldUnregister:l,defaultValue:u}=e,d=ox(s._names.array,n),f=G.useMemo(()=>pe(s._formValues,n,pe(s._defaultValues,n,u)),[s,n,u]),p=NP({control:s,name:n,defaultValue:f,exact:!0}),m=DP({control:s,name:n,exact:!0}),g=G.useRef(e),y=G.useRef(void 0),b=G.useRef(s.register(n,{...e.rules,value:p,...Hn(e.disabled)?{disabled:e.disabled}:{}}));g.current=e;const _=G.useMemo(()=>Object.defineProperties({},{invalid:{enumerable:!0,get:()=>!!pe(m.errors,n)},isDirty:{enumerable:!0,get:()=>!!pe(m.dirtyFields,n)},isTouched:{enumerable:!0,get:()=>!!pe(m.touchedFields,n)},isValidating:{enumerable:!0,get:()=>!!pe(m.validatingFields,n)},error:{enumerable:!0,get:()=>pe(m.errors,n)}}),[m,n]),k=G.useCallback(O=>b.current.onChange({target:{value:rx(O),name:n},type:Mu.CHANGE}),[n]),C=G.useCallback(()=>b.current.onBlur({target:{value:pe(s._formValues,n),name:n},type:Mu.BLUR}),[n,s._formValues]),N=G.useCallback(O=>{const B=pe(s._fields,n);B&&O&&(B._f.ref={focus:()=>O.focus&&O.focus(),select:()=>O.select&&O.select(),setCustomValidity:Z=>O.setCustomValidity(Z),reportValidity:()=>O.reportValidity()})},[s._fields,n]),M=G.useMemo(()=>({name:n,value:p,...Hn(i)||m.disabled?{disabled:m.disabled||i}:{},onChange:k,onBlur:C,ref:N}),[n,i,m.disabled,k,C,N,p]);return G.useEffect(()=>{const O=s._options.shouldUnregister||l,B=y.current;B&&B!==n&&!d&&s.unregister(B),s.register(n,{...g.current.rules,...Hn(g.current.disabled)?{disabled:g.current.disabled}:{}});const Z=(re,R)=>{const I=pe(s._fields,re);I&&I._f&&(I._f.mount=R)};if(Z(n,!0),O){const re=Yt(pe(s._options.defaultValues,n,g.current.defaultValue));ct(s._defaultValues,n,re),At(pe(s._formValues,n))&&ct(s._formValues,n,re)}return!d&&s.register(n),y.current=n,()=>{(d?O&&!s._state.action:O)?s.unregister(n):Z(n,!1)}},[n,s,d,l]),G.useEffect(()=>{s._setDisabledField({disabled:i,name:n})},[i,n,s]),G.useMemo(()=>({field:M,formState:m,fieldState:_}),[M,m,_])}const MP=e=>e.render(AP(e));var Bh=(e,t,n,i,s)=>t?{...n[e],types:{...n[e]&&n[e].types?n[e].types:{},[i]:s||!0}}:{},ha=e=>Array.isArray(e)?e:[e],Jv=()=>{let e=[];return{get observers(){return e},next:s=>{for(const l of e)l.next&&l.next(s)},subscribe:s=>(e.push(s),{unsubscribe:()=>{e=e.filter(l=>l!==s)}}),unsubscribe:()=>{e=[]}}};function ax(e,t){const n={};for(const i in e)if(e.hasOwnProperty(i)){const s=e[i],l=t[i];if(s&&Bt(s)&&l){const u=ax(s,l);Bt(u)&&(n[i]=u)}else e[i]&&(n[i]=l)}return n}var Dn=e=>Bt(e)&&!Object.keys(e).length,Wh=e=>e.type==="file",xr=e=>typeof e=="function",ju=e=>{if(!Ih)return!1;const t=e?e.ownerDocument:0;return e instanceof(t&&t.defaultView?t.defaultView.HTMLElement:HTMLElement)},lx=e=>e.type==="select-multiple",Zh=e=>e.type==="radio",jP=e=>Zh(e)||Fa(e),af=e=>ju(e)&&e.isConnected;function LP(e,t){const n=t.slice(0,-1).length;let i=0;for(;i<n;)e=At(e)?i++:e[t[i++]];return e}function OP(e){for(const t in e)if(e.hasOwnProperty(t)&&!At(e[t]))return!1;return!0}function Vt(e,t){const n=Array.isArray(t)?t:Ju(t)?[t]:Vh(t),i=n.length===1?e:LP(e,n),s=n.length-1,l=n[s];return i&&delete i[l],s!==0&&(Bt(i)&&Dn(i)||Array.isArray(i)&&OP(i))&&Vt(e,n.slice(0,-1)),e}var zP=e=>{for(const t in e)if(xr(e[t]))return!0;return!1};function ux(e){return Array.isArray(e)||Bt(e)&&!zP(e)}function Hf(e,t={}){for(const n in e)ux(e[n])?(t[n]=Array.isArray(e[n])?[]:{},Hf(e[n],t[n])):At(e[n])||(t[n]=!0);return t}function Xi(e,t,n){n||(n=Hf(t));for(const i in e)ux(e[i])?At(t)||Zf(n[i])?n[i]=Hf(e[i],Array.isArray(e[i])?[]:{}):Xi(e[i],An(t)?{}:t[i],n[i]):n[i]=!Qr(e[i],t[i]);return n}const qv={value:!1,isValid:!1},ey={value:!0,isValid:!0};var cx=e=>{if(Array.isArray(e)){if(e.length>1){const t=e.filter(n=>n&&n.checked&&!n.disabled).map(n=>n.value);return{value:t,isValid:!!t.length}}return e[0].checked&&!e[0].disabled?e[0].attributes&&!At(e[0].attributes.value)?At(e[0].value)||e[0].value===""?ey:{value:e[0].value,isValid:!0}:ey:qv}return qv},dx=(e,{valueAsNumber:t,valueAsDate:n,setValueAs:i})=>At(e)?e:t?e===""?NaN:e&&+e:n&&Kn(e)?new Date(e):i?i(e):e;const ty={isValid:!1,value:null};var fx=e=>Array.isArray(e)?e.reduce((t,n)=>n&&n.checked&&!n.disabled?{isValid:!0,value:n.value}:t,ty):ty;function ny(e){const t=e.ref;return Wh(t)?t.files:Zh(t)?fx(e.refs).value:lx(t)?[...t.selectedOptions].map(({value:n})=>n):Fa(t)?cx(e.refs).value:dx(At(t.value)?e.ref.value:t.value,e)}var IP=(e,t,n,i)=>{const s={};for(const l of e){const u=pe(t,l);u&&ct(s,l,u._f)}return{criteriaMode:n,names:[...e],fields:s,shouldUseNativeValidation:i}},Lu=e=>e instanceof RegExp,oa=e=>At(e)?e:Lu(e)?e.source:Bt(e)?Lu(e.value)?e.value.source:e.value:e,ry=e=>({isOnSubmit:!e||e===wr.onSubmit,isOnBlur:e===wr.onBlur,isOnChange:e===wr.onChange,isOnAll:e===wr.all,isOnTouch:e===wr.onTouched});const oy="AsyncFunction";var FP=e=>!!e&&!!e.validate&&!!(xr(e.validate)&&e.validate.constructor.name===oy||Bt(e.validate)&&Object.values(e.validate).find(t=>t.constructor.name===oy)),VP=e=>e.mount&&(e.required||e.min||e.max||e.maxLength||e.minLength||e.pattern||e.validate),iy=(e,t,n)=>!n&&(t.watchAll||t.watch.has(e)||[...t.watch].some(i=>e.startsWith(i)&&/^\.\w+/.test(e.slice(i.length))));const pa=(e,t,n,i)=>{for(const s of n||Object.keys(e)){const l=pe(e,s);if(l){const{_f:u,...d}=l;if(u){if(u.refs&&u.refs[0]&&t(u.refs[0],s)&&!i)return!0;if(u.ref&&t(u.ref,u.name)&&!i)return!0;if(pa(d,t))break}else if(Bt(d)&&pa(d,t))break}}};function sy(e,t,n){const i=pe(e,n);if(i||Ju(n))return{error:i,name:n};const s=n.split(".");for(;s.length;){const l=s.join("."),u=pe(t,l),d=pe(e,l);if(u&&!Array.isArray(u)&&n!==l)return{name:n};if(d&&d.type)return{name:l,error:d};if(d&&d.root&&d.root.type)return{name:`${l}.root`,error:d.root};s.pop()}return{name:n}}var $P=(e,t,n,i)=>{n(e);const{name:s,...l}=e;return Dn(l)||Object.keys(l).length>=Object.keys(t).length||Object.keys(l).find(u=>t[u]===(!i||wr.all))},UP=(e,t,n)=>!e||!t||e===t||ha(e).some(i=>i&&(n?i===t:i.startsWith(t)||t.startsWith(i))),BP=(e,t,n,i,s)=>s.isOnAll?!1:!n&&s.isOnTouch?!(t||e):(n?i.isOnBlur:s.isOnBlur)?!e:(n?i.isOnChange:s.isOnChange)?e:!0,WP=(e,t)=>!Fh(pe(e,t)).length&&Vt(e,t),ZP=(e,t,n)=>{const i=ha(pe(e,n));return ct(i,"root",t[n]),ct(e,n,i),e};function ay(e,t,n="validate"){if(Kn(e)||Array.isArray(e)&&e.every(Kn)||Hn(e)&&!e)return{type:n,message:Kn(e)?e:"",ref:t}}var Hi=e=>Bt(e)&&!Lu(e)?e:{value:e,message:""},ly=async(e,t,n,i,s,l)=>{const{ref:u,refs:d,required:f,maxLength:p,minLength:m,min:g,max:y,pattern:b,validate:_,name:k,valueAsNumber:C,mount:N}=e._f,M=pe(n,k);if(!N||t.has(k))return{};const O=d?d[0]:u,B=he=>{s&&O.reportValidity&&(O.setCustomValidity(Hn(he)?"":he||""),O.reportValidity())},Z={},re=Zh(u),R=Fa(u),I=re||R,ae=(C||Wh(u))&&At(u.value)&&At(M)||ju(u)&&u.value===""||M===""||Array.isArray(M)&&!M.length,le=Bh.bind(null,k,i,Z),Ie=(he,ge,Ne,Le=Yr.maxLength,ve=Yr.minLength)=>{const ue=he?ge:Ne;Z[k]={type:he?Le:ve,message:ue,ref:u,...le(he?Le:ve,ue)}};if(l?!Array.isArray(M)||!M.length:f&&(!I&&(ae||An(M))||Hn(M)&&!M||R&&!cx(d).isValid||re&&!fx(d).isValid)){const{value:he,message:ge}=Kn(f)?{value:!!f,message:f}:Hi(f);if(he&&(Z[k]={type:Yr.required,message:ge,ref:O,...le(Yr.required,ge)},!i))return B(ge),Z}if(!ae&&(!An(g)||!An(y))){let he,ge;const Ne=Hi(y),Le=Hi(g);if(!An(M)&&!isNaN(M)){const ve=u.valueAsNumber||M&&+M;An(Ne.value)||(he=ve>Ne.value),An(Le.value)||(ge=ve<Le.value)}else{const ve=u.valueAsDate||new Date(M),ue=ee=>new Date(new Date().toDateString()+" "+ee),z=u.type=="time",fe=u.type=="week";Kn(Ne.value)&&M&&(he=z?ue(M)>ue(Ne.value):fe?M>Ne.value:ve>new Date(Ne.value)),Kn(Le.value)&&M&&(ge=z?ue(M)<ue(Le.value):fe?M<Le.value:ve<new Date(Le.value))}if((he||ge)&&(Ie(!!he,Ne.message,Le.message,Yr.max,Yr.min),!i))return B(Z[k].message),Z}if((p||m)&&!ae&&(Kn(M)||l&&Array.isArray(M))){const he=Hi(p),ge=Hi(m),Ne=!An(he.value)&&M.length>+he.value,Le=!An(ge.value)&&M.length<+ge.value;if((Ne||Le)&&(Ie(Ne,he.message,ge.message),!i))return B(Z[k].message),Z}if(b&&!ae&&Kn(M)){const{value:he,message:ge}=Hi(b);if(Lu(he)&&!M.match(he)&&(Z[k]={type:Yr.pattern,message:ge,ref:u,...le(Yr.pattern,ge)},!i))return B(ge),Z}if(_){if(xr(_)){const he=await _(M,n),ge=ay(he,O);if(ge&&(Z[k]={...ge,...le(Yr.validate,ge.message)},!i))return B(ge.message),Z}else if(Bt(_)){let he={};for(const ge in _){if(!Dn(he)&&!i)break;const Ne=ay(await _[ge](M,n),O,ge);Ne&&(he={...Ne,...le(ge,Ne.message)},B(Ne.message),i&&(Z[k]=he))}if(!Dn(he)&&(Z[k]={ref:O,...he},!i))return Z}}return B(!0),Z};const HP={mode:wr.onSubmit,reValidateMode:wr.onChange,shouldFocusError:!0};function KP(e={}){let t={...HP,...e},n={submitCount:0,isDirty:!1,isReady:!1,isLoading:xr(t.defaultValues),isValidating:!1,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,touchedFields:{},dirtyFields:{},validatingFields:{},errors:t.errors||{},disabled:t.disabled||!1},i={},s=Bt(t.defaultValues)||Bt(t.values)?Yt(t.defaultValues||t.values)||{}:{},l=t.shouldUnregister?{}:Yt(s),u={action:!1,mount:!1,watch:!1},d={mount:new Set,disabled:new Set,unMount:new Set,array:new Set,watch:new Set},f,p=0;const m={isDirty:!1,dirtyFields:!1,validatingFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1};let g={...m};const y={array:Jv(),state:Jv()},b=t.criteriaMode===wr.all,_=P=>V=>{clearTimeout(p),p=setTimeout(P,V)},k=async P=>{if(!t.disabled&&(m.isValid||g.isValid||P)){const V=t.resolver?Dn((await R()).errors):await ae(i,!0);V!==n.isValid&&y.state.next({isValid:V})}},C=(P,V)=>{!t.disabled&&(m.isValidating||m.validatingFields||g.isValidating||g.validatingFields)&&((P||Array.from(d.mount)).forEach(H=>{H&&(V?ct(n.validatingFields,H,V):Vt(n.validatingFields,H))}),y.state.next({validatingFields:n.validatingFields,isValidating:!Dn(n.validatingFields)}))},N=(P,V=[],H,de,oe=!0,te=!0)=>{if(de&&H&&!t.disabled){if(u.action=!0,te&&Array.isArray(pe(i,P))){const be=H(pe(i,P),de.argA,de.argB);oe&&ct(i,P,be)}if(te&&Array.isArray(pe(n.errors,P))){const be=H(pe(n.errors,P),de.argA,de.argB);oe&&ct(n.errors,P,be),WP(n.errors,P)}if((m.touchedFields||g.touchedFields)&&te&&Array.isArray(pe(n.touchedFields,P))){const be=H(pe(n.touchedFields,P),de.argA,de.argB);oe&&ct(n.touchedFields,P,be)}(m.dirtyFields||g.dirtyFields)&&(n.dirtyFields=Xi(s,l)),y.state.next({name:P,isDirty:Ie(P,V),dirtyFields:n.dirtyFields,errors:n.errors,isValid:n.isValid})}else ct(l,P,V)},M=(P,V)=>{ct(n.errors,P,V),y.state.next({errors:n.errors})},O=P=>{n.errors=P,y.state.next({errors:n.errors,isValid:!1})},B=(P,V,H,de)=>{const oe=pe(i,P);if(oe){const te=pe(l,P,At(H)?pe(s,P):H);At(te)||de&&de.defaultChecked||V?ct(l,P,V?te:ny(oe._f)):Ne(P,te),u.mount&&k()}},Z=(P,V,H,de,oe)=>{let te=!1,be=!1;const Ke={name:P};if(!t.disabled){if(!H||de){(m.isDirty||g.isDirty)&&(be=n.isDirty,n.isDirty=Ke.isDirty=Ie(),te=be!==Ke.isDirty);const Ze=Qr(pe(s,P),V);be=!!pe(n.dirtyFields,P),Ze?Vt(n.dirtyFields,P):ct(n.dirtyFields,P,!0),Ke.dirtyFields=n.dirtyFields,te=te||(m.dirtyFields||g.dirtyFields)&&be!==!Ze}if(H){const Ze=pe(n.touchedFields,P);Ze||(ct(n.touchedFields,P,H),Ke.touchedFields=n.touchedFields,te=te||(m.touchedFields||g.touchedFields)&&Ze!==H)}te&&oe&&y.state.next(Ke)}return te?Ke:{}},re=(P,V,H,de)=>{const oe=pe(n.errors,P),te=(m.isValid||g.isValid)&&Hn(V)&&n.isValid!==V;if(t.delayError&&H?(f=_(()=>M(P,H)),f(t.delayError)):(clearTimeout(p),f=null,H?ct(n.errors,P,H):Vt(n.errors,P)),(H?!Qr(oe,H):oe)||!Dn(de)||te){const be={...de,...te&&Hn(V)?{isValid:V}:{},errors:n.errors,name:P};n={...n,...be},y.state.next(be)}},R=async P=>{C(P,!0);const V=await t.resolver(l,t.context,IP(P||d.mount,i,t.criteriaMode,t.shouldUseNativeValidation));return C(P),V},I=async P=>{const{errors:V}=await R(P);if(P)for(const H of P){const de=pe(V,H);de?ct(n.errors,H,de):Vt(n.errors,H)}else n.errors=V;return V},ae=async(P,V,H={valid:!0})=>{for(const de in P){const oe=P[de];if(oe){const{_f:te,...be}=oe;if(te){const Ke=d.array.has(te.name),Ze=oe._f&&FP(oe._f);Ze&&m.validatingFields&&C([te.name],!0);const at=await ly(oe,d.disabled,l,b,t.shouldUseNativeValidation&&!V,Ke);if(Ze&&m.validatingFields&&C([te.name]),at[te.name]&&(H.valid=!1,V))break;!V&&(pe(at,te.name)?Ke?ZP(n.errors,at,te.name):ct(n.errors,te.name,at[te.name]):Vt(n.errors,te.name))}!Dn(be)&&await ae(be,V,H)}}return H.valid},le=()=>{for(const P of d.unMount){const V=pe(i,P);V&&(V._f.refs?V._f.refs.every(H=>!af(H)):!af(V._f.ref))&&Ee(P)}d.unMount=new Set},Ie=(P,V)=>!t.disabled&&(P&&V&&ct(l,P,V),!Qr(ee(),s)),he=(P,V,H)=>sx(P,d,{...u.mount?l:At(V)?s:Kn(P)?{[P]:V}:V},H,V),ge=P=>Fh(pe(u.mount?l:s,P,t.shouldUnregister?pe(s,P,[]):[])),Ne=(P,V,H={})=>{const de=pe(i,P);let oe=V;if(de){const te=de._f;te&&(!te.disabled&&ct(l,P,dx(V,te)),oe=ju(te.ref)&&An(V)?"":V,lx(te.ref)?[...te.ref.options].forEach(be=>be.selected=oe.includes(be.value)):te.refs?Fa(te.ref)?te.refs.forEach(be=>{(!be.defaultChecked||!be.disabled)&&(Array.isArray(oe)?be.checked=!!oe.find(Ke=>Ke===be.value):be.checked=oe===be.value||!!oe)}):te.refs.forEach(be=>be.checked=be.value===oe):Wh(te.ref)?te.ref.value="":(te.ref.value=oe,te.ref.type||y.state.next({name:P,values:Yt(l)})))}(H.shouldDirty||H.shouldTouch)&&Z(P,oe,H.shouldTouch,H.shouldDirty,!0),H.shouldValidate&&fe(P)},Le=(P,V,H)=>{for(const de in V){if(!V.hasOwnProperty(de))return;const oe=V[de],te=P+"."+de,be=pe(i,te);(d.array.has(P)||Bt(oe)||be&&!be._f)&&!si(oe)?Le(te,oe,H):Ne(te,oe,H)}},ve=(P,V,H={})=>{const de=pe(i,P),oe=d.array.has(P),te=Yt(V);ct(l,P,te),oe?(y.array.next({name:P,values:Yt(l)}),(m.isDirty||m.dirtyFields||g.isDirty||g.dirtyFields)&&H.shouldDirty&&y.state.next({name:P,dirtyFields:Xi(s,l),isDirty:Ie(P,te)})):de&&!de._f&&!An(te)?Le(P,te,H):Ne(P,te,H),iy(P,d)&&y.state.next({...n,name:P}),y.state.next({name:u.mount?P:void 0,values:Yt(l)})},ue=async P=>{u.mount=!0;const V=P.target;let H=V.name,de=!0;const oe=pe(i,H),te=Ze=>{de=Number.isNaN(Ze)||si(Ze)&&isNaN(Ze.getTime())||Qr(Ze,pe(l,H,Ze))},be=ry(t.mode),Ke=ry(t.reValidateMode);if(oe){let Ze,at;const zt=V.type?ny(oe._f):rx(P),Pt=P.type===Mu.BLUR||P.type===Mu.FOCUS_OUT,Gn=!VP(oe._f)&&!t.resolver&&!pe(n.errors,H)&&!oe._f.deps||BP(Pt,pe(n.touchedFields,H),n.isSubmitted,Ke,be),sn=iy(H,d,Pt);ct(l,H,zt),Pt?(!V||!V.readOnly)&&(oe._f.onBlur&&oe._f.onBlur(P),f&&f(0)):oe._f.onChange&&oe._f.onChange(P);const ur=Z(H,zt,Pt),Lr=!Dn(ur)||sn;if(!Pt&&y.state.next({name:H,type:P.type,values:Yt(l)}),Gn)return(m.isValid||g.isValid)&&(t.mode==="onBlur"?Pt&&k():Pt||k()),Lr&&y.state.next({name:H,...sn?{}:ur});if(!Pt&&sn&&y.state.next({...n}),t.resolver){const{errors:Yn}=await R([H]);if(te(zt),de){const Or=sy(n.errors,i,H),In=sy(Yn,i,Or.name||H);Ze=In.error,H=In.name,at=Dn(Yn)}}else C([H],!0),Ze=(await ly(oe,d.disabled,l,b,t.shouldUseNativeValidation))[H],C([H]),te(zt),de&&(Ze?at=!1:(m.isValid||g.isValid)&&(at=await ae(i,!0)));de&&(oe._f.deps&&(!Array.isArray(oe._f.deps)||oe._f.deps.length>0)&&fe(oe._f.deps),re(H,at,Ze,ur))}},z=(P,V)=>{if(pe(n.errors,V)&&P.focus)return P.focus(),1},fe=async(P,V={})=>{let H,de;const oe=ha(P);if(t.resolver){const te=await I(At(P)?P:oe);H=Dn(te),de=P?!oe.some(be=>pe(te,be)):H}else P?(de=(await Promise.all(oe.map(async te=>{const be=pe(i,te);return await ae(be&&be._f?{[te]:be}:be)}))).every(Boolean),!(!de&&!n.isValid)&&k()):de=H=await ae(i);return y.state.next({...!Kn(P)||(m.isValid||g.isValid)&&H!==n.isValid?{}:{name:P},...t.resolver||!P?{isValid:H}:{},errors:n.errors}),V.shouldFocus&&!de&&pa(i,z,P?oe:d.mount),de},ee=(P,V)=>{let H={...u.mount?l:s};return V&&(H=ax(V.dirtyFields?n.dirtyFields:n.touchedFields,H)),At(P)?H:Kn(P)?pe(H,P):P.map(de=>pe(H,de))},j=(P,V)=>({invalid:!!pe((V||n).errors,P),isDirty:!!pe((V||n).dirtyFields,P),error:pe((V||n).errors,P),isValidating:!!pe(n.validatingFields,P),isTouched:!!pe((V||n).touchedFields,P)}),K=P=>{P&&ha(P).forEach(V=>Vt(n.errors,V)),y.state.next({errors:P?n.errors:{}})},q=(P,V,H)=>{const de=(pe(i,P,{_f:{}})._f||{}).ref,oe=pe(n.errors,P)||{},{ref:te,message:be,type:Ke,...Ze}=oe;ct(n.errors,P,{...Ze,...V,ref:de}),y.state.next({name:P,errors:n.errors,isValid:!1}),H&&H.shouldFocus&&de&&de.focus&&de.focus()},ce=(P,V)=>xr(P)?y.state.subscribe({next:H=>"values"in H&&P(he(void 0,V),H)}):he(P,V,!0),me=P=>y.state.subscribe({next:V=>{UP(P.name,V.name,P.exact)&&$P(V,P.formState||m,zn,P.reRenderRoot)&&P.callback({values:{...l},...n,...V,defaultValues:s})}}).unsubscribe,je=P=>(u.mount=!0,g={...g,...P.formState},me({...P,formState:g})),Ee=(P,V={})=>{for(const H of P?ha(P):d.mount)d.mount.delete(H),d.array.delete(H),V.keepValue||(Vt(i,H),Vt(l,H)),!V.keepError&&Vt(n.errors,H),!V.keepDirty&&Vt(n.dirtyFields,H),!V.keepTouched&&Vt(n.touchedFields,H),!V.keepIsValidating&&Vt(n.validatingFields,H),!t.shouldUnregister&&!V.keepDefaultValue&&Vt(s,H);y.state.next({values:Yt(l)}),y.state.next({...n,...V.keepDirty?{isDirty:Ie()}:{}}),!V.keepIsValid&&k()},Se=({disabled:P,name:V})=>{(Hn(P)&&u.mount||P||d.disabled.has(V))&&(P?d.disabled.add(V):d.disabled.delete(V))},He=(P,V={})=>{let H=pe(i,P);const de=Hn(V.disabled)||Hn(t.disabled);return ct(i,P,{...H||{},_f:{...H&&H._f?H._f:{ref:{name:P}},name:P,mount:!0,...V}}),d.mount.add(P),H?Se({disabled:Hn(V.disabled)?V.disabled:t.disabled,name:P}):B(P,!0,V.value),{...de?{disabled:V.disabled||t.disabled}:{},...t.progressive?{required:!!V.required,min:oa(V.min),max:oa(V.max),minLength:oa(V.minLength),maxLength:oa(V.maxLength),pattern:oa(V.pattern)}:{},name:P,onChange:ue,onBlur:ue,ref:oe=>{if(oe){He(P,V),H=pe(i,P);const te=At(oe.value)&&oe.querySelectorAll&&oe.querySelectorAll("input,select,textarea")[0]||oe,be=jP(te),Ke=H._f.refs||[];if(be?Ke.find(Ze=>Ze===te):te===H._f.ref)return;ct(i,P,{_f:{...H._f,...be?{refs:[...Ke.filter(af),te,...Array.isArray(pe(s,P))?[{}]:[]],ref:{type:te.type,name:P}}:{ref:te}}}),B(P,!1,void 0,te)}else H=pe(i,P,{}),H._f&&(H._f.mount=!1),(t.shouldUnregister||V.shouldUnregister)&&!(ox(d.array,P)&&u.action)&&d.unMount.add(P)}}},st=()=>t.shouldFocusError&&pa(i,z,d.mount),on=P=>{Hn(P)&&(y.state.next({disabled:P}),pa(i,(V,H)=>{const de=pe(i,H);de&&(V.disabled=de._f.disabled||P,Array.isArray(de._f.refs)&&de._f.refs.forEach(oe=>{oe.disabled=de._f.disabled||P}))},0,!1))},et=(P,V)=>async H=>{let de;H&&(H.preventDefault&&H.preventDefault(),H.persist&&H.persist());let oe=Yt(l);if(y.state.next({isSubmitting:!0}),t.resolver){const{errors:te,values:be}=await R();n.errors=te,oe=Yt(be)}else await ae(i);if(d.disabled.size)for(const te of d.disabled)Vt(oe,te);if(Vt(n.errors,"root"),Dn(n.errors)){y.state.next({errors:{}});try{await P(oe,H)}catch(te){de=te}}else V&&await V({...n.errors},H),st(),setTimeout(st);if(y.state.next({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:Dn(n.errors)&&!de,submitCount:n.submitCount+1,errors:n.errors}),de)throw de},vn=(P,V={})=>{pe(i,P)&&(At(V.defaultValue)?ve(P,Yt(pe(s,P))):(ve(P,V.defaultValue),ct(s,P,Yt(V.defaultValue))),V.keepTouched||Vt(n.touchedFields,P),V.keepDirty||(Vt(n.dirtyFields,P),n.isDirty=V.defaultValue?Ie(P,Yt(pe(s,P))):Ie()),V.keepError||(Vt(n.errors,P),m.isValid&&k()),y.state.next({...n}))},On=(P,V={})=>{const H=P?Yt(P):s,de=Yt(H),oe=Dn(P),te=oe?s:de;if(V.keepDefaultValues||(s=H),!V.keepValues){if(V.keepDirtyValues){const be=new Set([...d.mount,...Object.keys(Xi(s,l))]);for(const Ke of Array.from(be))pe(n.dirtyFields,Ke)?ct(te,Ke,pe(l,Ke)):ve(Ke,pe(te,Ke))}else{if(Ih&&At(P))for(const be of d.mount){const Ke=pe(i,be);if(Ke&&Ke._f){const Ze=Array.isArray(Ke._f.refs)?Ke._f.refs[0]:Ke._f.ref;if(ju(Ze)){const at=Ze.closest("form");if(at){at.reset();break}}}}if(V.keepFieldsRef)for(const be of d.mount)ve(be,pe(te,be));else i={}}l=t.shouldUnregister?V.keepDefaultValues?Yt(s):{}:Yt(te),y.array.next({values:{...te}}),y.state.next({values:{...te}})}d={mount:V.keepDirtyValues?d.mount:new Set,unMount:new Set,array:new Set,disabled:new Set,watch:new Set,watchAll:!1,focus:""},u.mount=!m.isValid||!!V.keepIsValid||!!V.keepDirtyValues,u.watch=!!t.shouldUnregister,y.state.next({submitCount:V.keepSubmitCount?n.submitCount:0,isDirty:oe?!1:V.keepDirty?n.isDirty:!!(V.keepDefaultValues&&!Qr(P,s)),isSubmitted:V.keepIsSubmitted?n.isSubmitted:!1,dirtyFields:oe?{}:V.keepDirtyValues?V.keepDefaultValues&&l?Xi(s,l):n.dirtyFields:V.keepDefaultValues&&P?Xi(s,P):V.keepDirty?n.dirtyFields:{},touchedFields:V.keepTouched?n.touchedFields:{},errors:V.keepErrors?n.errors:{},isSubmitSuccessful:V.keepIsSubmitSuccessful?n.isSubmitSuccessful:!1,isSubmitting:!1,defaultValues:s})},jr=(P,V)=>On(xr(P)?P(l):P,V),yn=(P,V={})=>{const H=pe(i,P),de=H&&H._f;if(de){const oe=de.refs?de.refs[0]:de.ref;oe.focus&&(oe.focus(),V.shouldSelect&&xr(oe.select)&&oe.select())}},zn=P=>{n={...n,...P}},Wt={control:{register:He,unregister:Ee,getFieldState:j,handleSubmit:et,setError:q,_subscribe:me,_runSchema:R,_focusError:st,_getWatch:he,_getDirty:Ie,_setValid:k,_setFieldArray:N,_setDisabledField:Se,_setErrors:O,_getFieldArray:ge,_reset:On,_resetDefaultValues:()=>xr(t.defaultValues)&&t.defaultValues().then(P=>{jr(P,t.resetOptions),y.state.next({isLoading:!1})}),_removeUnmounted:le,_disableForm:on,_subjects:y,_proxyFormState:m,get _fields(){return i},get _formValues(){return l},get _state(){return u},set _state(P){u=P},get _defaultValues(){return s},get _names(){return d},set _names(P){d=P},get _formState(){return n},get _options(){return t},set _options(P){t={...t,...P}}},subscribe:je,trigger:fe,register:He,handleSubmit:et,watch:ce,setValue:ve,getValues:ee,reset:jr,resetField:vn,clearErrors:K,unregister:Ee,setError:q,setFocus:yn,getFieldState:j};return{...Wt,formControl:Wt}}function GP(e={}){const t=G.useRef(void 0),n=G.useRef(void 0),[i,s]=G.useState({isDirty:!1,isValidating:!1,isLoading:xr(e.defaultValues),isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,submitCount:0,dirtyFields:{},touchedFields:{},validatingFields:{},errors:e.errors||{},disabled:e.disabled||!1,isReady:!1,defaultValues:xr(e.defaultValues)?void 0:e.defaultValues});if(!t.current)if(e.formControl)t.current={...e.formControl,formState:i},e.defaultValues&&!xr(e.defaultValues)&&e.formControl.reset(e.defaultValues,e.resetOptions);else{const{formControl:u,...d}=KP(e);t.current={...d,formState:i}}const l=t.current.control;return l._options=e,Uh(()=>{const u=l._subscribe({formState:l._proxyFormState,callback:()=>s({...l._formState}),reRenderRoot:!0});return s(d=>({...d,isReady:!0})),l._formState.isReady=!0,u},[l]),G.useEffect(()=>l._disableForm(e.disabled),[l,e.disabled]),G.useEffect(()=>{e.mode&&(l._options.mode=e.mode),e.reValidateMode&&(l._options.reValidateMode=e.reValidateMode)},[l,e.mode,e.reValidateMode]),G.useEffect(()=>{e.errors&&(l._setErrors(e.errors),l._focusError())},[l,e.errors]),G.useEffect(()=>{e.shouldUnregister&&l._subjects.state.next({values:l._getWatch()})},[l,e.shouldUnregister]),G.useEffect(()=>{if(l._proxyFormState.isDirty){const u=l._getDirty();u!==i.isDirty&&l._subjects.state.next({isDirty:u})}},[l,i.isDirty]),G.useEffect(()=>{e.values&&!Qr(e.values,n.current)?(l._reset(e.values,{keepFieldsRef:!0,...l._options.resetOptions}),n.current=e.values,s(u=>({...u}))):l._resetDefaultValues()},[l,e.values]),G.useEffect(()=>{l._state.mount||(l._setValid(),l._state.mount=!0),l._state.watch&&(l._state.watch=!1,l._subjects.state.next({...l._formState})),l._removeUnmounted()}),t.current.formState=ix(i,l),t.current}const uy=(e,t,n)=>{if(e&&"reportValidity"in e){const i=pe(n,t);e.setCustomValidity(i&&i.message||""),e.reportValidity()}},Kf=(e,t)=>{for(const n in t.fields){const i=t.fields[n];i&&i.ref&&"reportValidity"in i.ref?uy(i.ref,n,e):i&&i.refs&&i.refs.forEach(s=>uy(s,n,e))}},cy=(e,t)=>{t.shouldUseNativeValidation&&Kf(e,t);const n={};for(const i in e){const s=pe(t.fields,i),l=Object.assign(e[i]||{},{ref:s&&s.ref});if(YP(t.names||Object.keys(e),i)){const u=Object.assign({},pe(n,i));ct(u,"root",l),ct(n,i,u)}else ct(n,i,l)}return n},YP=(e,t)=>{const n=dy(t);return e.some(i=>dy(i).match(`^${n}\\.\\d+`))};function dy(e){return e.replace(/\]|\[/g,"")}function Q(e,t,n){function i(d,f){var p;Object.defineProperty(d,"_zod",{value:d._zod??{},enumerable:!1}),(p=d._zod).traits??(p.traits=new Set),d._zod.traits.add(e),t(d,f);for(const m in u.prototype)m in d||Object.defineProperty(d,m,{value:u.prototype[m].bind(d)});d._zod.constr=u,d._zod.def=f}const s=(n==null?void 0:n.Parent)??Object;class l extends s{}Object.defineProperty(l,"name",{value:e});function u(d){var f;const p=n!=null&&n.Parent?new l:this;i(p,d),(f=p._zod).deferred??(f.deferred=[]);for(const m of p._zod.deferred)m();return p}return Object.defineProperty(u,"init",{value:i}),Object.defineProperty(u,Symbol.hasInstance,{value:d=>{var f,p;return n!=null&&n.Parent&&d instanceof n.Parent?!0:(p=(f=d==null?void 0:d._zod)==null?void 0:f.traits)==null?void 0:p.has(e)}}),Object.defineProperty(u,"name",{value:e}),u}class rs extends Error{constructor(){super("Encountered Promise during synchronous parse. Use .parseAsync() instead.")}}class hx extends Error{constructor(t){super(`Encountered unidirectional transform during encode: ${t}`),this.name="ZodEncodeError"}}const px={};function mi(e){return px}function XP(e){const t=Object.values(e).filter(i=>typeof i=="number");return Object.entries(e).filter(([i,s])=>t.indexOf(+i)===-1).map(([i,s])=>s)}function Gf(e,t){return typeof t=="bigint"?t.toString():t}function Hh(e){return{get value(){{const t=e();return Object.defineProperty(this,"value",{value:t}),t}}}}function Kh(e){return e==null}function Gh(e){const t=e.startsWith("^")?1:0,n=e.endsWith("$")?e.length-1:e.length;return e.slice(t,n)}const fy=Symbol("evaluating");function pt(e,t,n){let i;Object.defineProperty(e,t,{get(){if(i!==fy)return i===void 0&&(i=fy,i=n()),i},set(s){Object.defineProperty(e,t,{value:s})},configurable:!0})}function wi(e,t,n){Object.defineProperty(e,t,{value:n,writable:!0,enumerable:!0,configurable:!0})}function xi(...e){const t={};for(const n of e){const i=Object.getOwnPropertyDescriptors(n);Object.assign(t,i)}return Object.defineProperties({},t)}function hy(e){return JSON.stringify(e)}const mx="captureStackTrace"in Error?Error.captureStackTrace:(...e)=>{};function Ou(e){return typeof e=="object"&&e!==null&&!Array.isArray(e)}const QP=Hh(()=>{var e;if(typeof navigator<"u"&&((e=navigator==null?void 0:navigator.userAgent)!=null&&e.includes("Cloudflare")))return!1;try{const t=Function;return new t(""),!0}catch{return!1}});function Ca(e){if(Ou(e)===!1)return!1;const t=e.constructor;if(t===void 0)return!0;const n=t.prototype;return!(Ou(n)===!1||Object.prototype.hasOwnProperty.call(n,"isPrototypeOf")===!1)}function gx(e){return Ca(e)?{...e}:Array.isArray(e)?[...e]:e}const JP=new Set(["string","number","symbol"]);function ec(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function zo(e,t,n){const i=new e._zod.constr(t??e._zod.def);return(!t||n!=null&&n.parent)&&(i._zod.parent=e),i}function Be(e){const t=e;if(!t)return{};if(typeof t=="string")return{error:()=>t};if((t==null?void 0:t.message)!==void 0){if((t==null?void 0:t.error)!==void 0)throw new Error("Cannot specify both `message` and `error` params");t.error=t.message}return delete t.message,typeof t.error=="string"?{...t,error:()=>t.error}:t}function qP(e){return Object.keys(e).filter(t=>e[t]._zod.optin==="optional"&&e[t]._zod.optout==="optional")}function eT(e,t){const n=e._zod.def,i=xi(e._zod.def,{get shape(){const s={};for(const l in t){if(!(l in n.shape))throw new Error(`Unrecognized key: "${l}"`);t[l]&&(s[l]=n.shape[l])}return wi(this,"shape",s),s},checks:[]});return zo(e,i)}function tT(e,t){const n=e._zod.def,i=xi(e._zod.def,{get shape(){const s={...e._zod.def.shape};for(const l in t){if(!(l in n.shape))throw new Error(`Unrecognized key: "${l}"`);t[l]&&delete s[l]}return wi(this,"shape",s),s},checks:[]});return zo(e,i)}function nT(e,t){if(!Ca(t))throw new Error("Invalid input to extend: expected a plain object");const n=e._zod.def.checks;if(n&&n.length>0)throw new Error("Object schemas containing refinements cannot be extended. Use `.safeExtend()` instead.");const s=xi(e._zod.def,{get shape(){const l={...e._zod.def.shape,...t};return wi(this,"shape",l),l},checks:[]});return zo(e,s)}function rT(e,t){if(!Ca(t))throw new Error("Invalid input to safeExtend: expected a plain object");const n={...e._zod.def,get shape(){const i={...e._zod.def.shape,...t};return wi(this,"shape",i),i},checks:e._zod.def.checks};return zo(e,n)}function oT(e,t){const n=xi(e._zod.def,{get shape(){const i={...e._zod.def.shape,...t._zod.def.shape};return wi(this,"shape",i),i},get catchall(){return t._zod.def.catchall},checks:[]});return zo(e,n)}function iT(e,t,n){const i=xi(t._zod.def,{get shape(){const s=t._zod.def.shape,l={...s};if(n)for(const u in n){if(!(u in s))throw new Error(`Unrecognized key: "${u}"`);n[u]&&(l[u]=e?new e({type:"optional",innerType:s[u]}):s[u])}else for(const u in s)l[u]=e?new e({type:"optional",innerType:s[u]}):s[u];return wi(this,"shape",l),l},checks:[]});return zo(t,i)}function sT(e,t,n){const i=xi(t._zod.def,{get shape(){const s=t._zod.def.shape,l={...s};if(n)for(const u in n){if(!(u in l))throw new Error(`Unrecognized key: "${u}"`);n[u]&&(l[u]=new e({type:"nonoptional",innerType:s[u]}))}else for(const u in s)l[u]=new e({type:"nonoptional",innerType:s[u]});return wi(this,"shape",l),l},checks:[]});return zo(t,i)}function Qi(e,t=0){var n;if(e.aborted===!0)return!0;for(let i=t;i<e.issues.length;i++)if(((n=e.issues[i])==null?void 0:n.continue)!==!0)return!0;return!1}function vx(e,t){return t.map(n=>{var i;return(i=n).path??(i.path=[]),n.path.unshift(e),n})}function tu(e){return typeof e=="string"?e:e==null?void 0:e.message}function gi(e,t,n){var s,l,u,d,f,p;const i={...e,path:e.path??[]};if(!e.message){const m=tu((u=(l=(s=e.inst)==null?void 0:s._zod.def)==null?void 0:l.error)==null?void 0:u.call(l,e))??tu((d=t==null?void 0:t.error)==null?void 0:d.call(t,e))??tu((f=n.customError)==null?void 0:f.call(n,e))??tu((p=n.localeError)==null?void 0:p.call(n,e))??"Invalid input";i.message=m}return delete i.inst,delete i.continue,t!=null&&t.reportInput||delete i.input,i}function Yh(e){return Array.isArray(e)?"array":typeof e=="string"?"string":"unknown"}function Pa(...e){const[t,n,i]=e;return typeof t=="string"?{message:t,code:"custom",input:n,inst:i}:{...t}}const yx=(e,t)=>{e.name="$ZodError",Object.defineProperty(e,"_zod",{value:e._zod,enumerable:!1}),Object.defineProperty(e,"issues",{value:t,enumerable:!1}),e.message=JSON.stringify(t,Gf,2),Object.defineProperty(e,"toString",{value:()=>e.message,enumerable:!1})},Xh=Q("$ZodError",yx),tc=Q("$ZodError",yx,{Parent:Error});function aT(e,t=n=>n.message){const n={},i=[];for(const s of e.issues)s.path.length>0?(n[s.path[0]]=n[s.path[0]]||[],n[s.path[0]].push(t(s))):i.push(t(s));return{formErrors:i,fieldErrors:n}}function lT(e,t=n=>n.message){const n={_errors:[]},i=s=>{for(const l of s.issues)if(l.code==="invalid_union"&&l.errors.length)l.errors.map(u=>i({issues:u}));else if(l.code==="invalid_key")i({issues:l.issues});else if(l.code==="invalid_element")i({issues:l.issues});else if(l.path.length===0)n._errors.push(t(l));else{let u=n,d=0;for(;d<l.path.length;){const f=l.path[d];d===l.path.length-1?(u[f]=u[f]||{_errors:[]},u[f]._errors.push(t(l))):u[f]=u[f]||{_errors:[]},u=u[f],d++}}};return i(e),n}const nc=e=>(t,n,i,s)=>{const l=i?Object.assign(i,{async:!1}):{async:!1},u=t._zod.run({value:n,issues:[]},l);if(u instanceof Promise)throw new rs;if(u.issues.length){const d=new((s==null?void 0:s.Err)??e)(u.issues.map(f=>gi(f,l,mi())));throw mx(d,s==null?void 0:s.callee),d}return u.value},uT=nc(tc),rc=e=>async(t,n,i,s)=>{const l=i?Object.assign(i,{async:!0}):{async:!0};let u=t._zod.run({value:n,issues:[]},l);if(u instanceof Promise&&(u=await u),u.issues.length){const d=new((s==null?void 0:s.Err)??e)(u.issues.map(f=>gi(f,l,mi())));throw mx(d,s==null?void 0:s.callee),d}return u.value},cT=rc(tc),oc=e=>(t,n,i)=>{const s=i?{...i,async:!1}:{async:!1},l=t._zod.run({value:n,issues:[]},s);if(l instanceof Promise)throw new rs;return l.issues.length?{success:!1,error:new(e??Xh)(l.issues.map(u=>gi(u,s,mi())))}:{success:!0,data:l.value}},dT=oc(tc),ic=e=>async(t,n,i)=>{const s=i?Object.assign(i,{async:!0}):{async:!0};let l=t._zod.run({value:n,issues:[]},s);return l instanceof Promise&&(l=await l),l.issues.length?{success:!1,error:new e(l.issues.map(u=>gi(u,s,mi())))}:{success:!0,data:l.value}},fT=ic(tc),hT=e=>(t,n,i)=>{const s=i?Object.assign(i,{direction:"backward"}):{direction:"backward"};return nc(e)(t,n,s)},pT=e=>(t,n,i)=>nc(e)(t,n,i),mT=e=>async(t,n,i)=>{const s=i?Object.assign(i,{direction:"backward"}):{direction:"backward"};return rc(e)(t,n,s)},gT=e=>async(t,n,i)=>rc(e)(t,n,i),vT=e=>(t,n,i)=>{const s=i?Object.assign(i,{direction:"backward"}):{direction:"backward"};return oc(e)(t,n,s)},yT=e=>(t,n,i)=>oc(e)(t,n,i),wT=e=>async(t,n,i)=>{const s=i?Object.assign(i,{direction:"backward"}):{direction:"backward"};return ic(e)(t,n,s)},xT=e=>async(t,n,i)=>ic(e)(t,n,i),ST=/^[cC][^\s-]{8,}$/,bT=/^[0-9a-z]+$/,kT=/^[0-9A-HJKMNP-TV-Za-hjkmnp-tv-z]{26}$/,ET=/^[0-9a-vA-V]{20}$/,_T=/^[A-Za-z0-9]{27}$/,CT=/^[a-zA-Z0-9_-]{21}$/,PT=/^P(?:(\d+W)|(?!.*W)(?=\d|T\d)(\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+([.,]\d+)?S)?)?)$/,TT=/^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})$/,py=e=>e?new RegExp(`^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-${e}[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12})$`):/^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/,RT=/^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$/,DT="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";function NT(){return new RegExp(DT,"u")}const AT=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,MT=/^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))$/,jT=/^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/([0-9]|[1-2][0-9]|3[0-2])$/,LT=/^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::|([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:?){0,6})\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,OT=/^$|^(?:[0-9a-zA-Z+/]{4})*(?:(?:[0-9a-zA-Z+/]{2}==)|(?:[0-9a-zA-Z+/]{3}=))?$/,wx=/^[A-Za-z0-9_-]*$/,zT=/^(?=.{1,253}\.?$)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[-0-9a-zA-Z]{0,61}[0-9a-zA-Z])?)*\.?$/,IT=/^\+(?:[0-9]){6,14}[0-9]$/,xx="(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))",FT=new RegExp(`^${xx}$`);function Sx(e){const t="(?:[01]\\d|2[0-3]):[0-5]\\d";return typeof e.precision=="number"?e.precision===-1?`${t}`:e.precision===0?`${t}:[0-5]\\d`:`${t}:[0-5]\\d\\.\\d{${e.precision}}`:`${t}(?::[0-5]\\d(?:\\.\\d+)?)?`}function VT(e){return new RegExp(`^${Sx(e)}$`)}function $T(e){const t=Sx({precision:e.precision}),n=["Z"];e.local&&n.push(""),e.offset&&n.push("([+-](?:[01]\\d|2[0-3]):[0-5]\\d)");const i=`${t}(?:${n.join("|")})`;return new RegExp(`^${xx}T(?:${i})$`)}const UT=e=>{const t=e?`[\\s\\S]{${(e==null?void 0:e.minimum)??0},${(e==null?void 0:e.maximum)??""}}`:"[\\s\\S]*";return new RegExp(`^${t}$`)},BT=/^[^A-Z]*$/,WT=/^[^a-z]*$/,Mr=Q("$ZodCheck",(e,t)=>{var n;e._zod??(e._zod={}),e._zod.def=t,(n=e._zod).onattach??(n.onattach=[])}),ZT=Q("$ZodCheckMaxLength",(e,t)=>{var n;Mr.init(e,t),(n=e._zod.def).when??(n.when=i=>{const s=i.value;return!Kh(s)&&s.length!==void 0}),e._zod.onattach.push(i=>{const s=i._zod.bag.maximum??Number.POSITIVE_INFINITY;t.maximum<s&&(i._zod.bag.maximum=t.maximum)}),e._zod.check=i=>{const s=i.value;if(s.length<=t.maximum)return;const u=Yh(s);i.issues.push({origin:u,code:"too_big",maximum:t.maximum,inclusive:!0,input:s,inst:e,continue:!t.abort})}}),HT=Q("$ZodCheckMinLength",(e,t)=>{var n;Mr.init(e,t),(n=e._zod.def).when??(n.when=i=>{const s=i.value;return!Kh(s)&&s.length!==void 0}),e._zod.onattach.push(i=>{const s=i._zod.bag.minimum??Number.NEGATIVE_INFINITY;t.minimum>s&&(i._zod.bag.minimum=t.minimum)}),e._zod.check=i=>{const s=i.value;if(s.length>=t.minimum)return;const u=Yh(s);i.issues.push({origin:u,code:"too_small",minimum:t.minimum,inclusive:!0,input:s,inst:e,continue:!t.abort})}}),KT=Q("$ZodCheckLengthEquals",(e,t)=>{var n;Mr.init(e,t),(n=e._zod.def).when??(n.when=i=>{const s=i.value;return!Kh(s)&&s.length!==void 0}),e._zod.onattach.push(i=>{const s=i._zod.bag;s.minimum=t.length,s.maximum=t.length,s.length=t.length}),e._zod.check=i=>{const s=i.value,l=s.length;if(l===t.length)return;const u=Yh(s),d=l>t.length;i.issues.push({origin:u,...d?{code:"too_big",maximum:t.length}:{code:"too_small",minimum:t.length},inclusive:!0,exact:!0,input:i.value,inst:e,continue:!t.abort})}}),sc=Q("$ZodCheckStringFormat",(e,t)=>{var n,i;Mr.init(e,t),e._zod.onattach.push(s=>{const l=s._zod.bag;l.format=t.format,t.pattern&&(l.patterns??(l.patterns=new Set),l.patterns.add(t.pattern))}),t.pattern?(n=e._zod).check??(n.check=s=>{t.pattern.lastIndex=0,!t.pattern.test(s.value)&&s.issues.push({origin:"string",code:"invalid_format",format:t.format,input:s.value,...t.pattern?{pattern:t.pattern.toString()}:{},inst:e,continue:!t.abort})}):(i=e._zod).check??(i.check=()=>{})}),GT=Q("$ZodCheckRegex",(e,t)=>{sc.init(e,t),e._zod.check=n=>{t.pattern.lastIndex=0,!t.pattern.test(n.value)&&n.issues.push({origin:"string",code:"invalid_format",format:"regex",input:n.value,pattern:t.pattern.toString(),inst:e,continue:!t.abort})}}),YT=Q("$ZodCheckLowerCase",(e,t)=>{t.pattern??(t.pattern=BT),sc.init(e,t)}),XT=Q("$ZodCheckUpperCase",(e,t)=>{t.pattern??(t.pattern=WT),sc.init(e,t)}),QT=Q("$ZodCheckIncludes",(e,t)=>{Mr.init(e,t);const n=ec(t.includes),i=new RegExp(typeof t.position=="number"?`^.{${t.position}}${n}`:n);t.pattern=i,e._zod.onattach.push(s=>{const l=s._zod.bag;l.patterns??(l.patterns=new Set),l.patterns.add(i)}),e._zod.check=s=>{s.value.includes(t.includes,t.position)||s.issues.push({origin:"string",code:"invalid_format",format:"includes",includes:t.includes,input:s.value,inst:e,continue:!t.abort})}}),JT=Q("$ZodCheckStartsWith",(e,t)=>{Mr.init(e,t);const n=new RegExp(`^${ec(t.prefix)}.*`);t.pattern??(t.pattern=n),e._zod.onattach.push(i=>{const s=i._zod.bag;s.patterns??(s.patterns=new Set),s.patterns.add(n)}),e._zod.check=i=>{i.value.startsWith(t.prefix)||i.issues.push({origin:"string",code:"invalid_format",format:"starts_with",prefix:t.prefix,input:i.value,inst:e,continue:!t.abort})}}),qT=Q("$ZodCheckEndsWith",(e,t)=>{Mr.init(e,t);const n=new RegExp(`.*${ec(t.suffix)}$`);t.pattern??(t.pattern=n),e._zod.onattach.push(i=>{const s=i._zod.bag;s.patterns??(s.patterns=new Set),s.patterns.add(n)}),e._zod.check=i=>{i.value.endsWith(t.suffix)||i.issues.push({origin:"string",code:"invalid_format",format:"ends_with",suffix:t.suffix,input:i.value,inst:e,continue:!t.abort})}}),eR=Q("$ZodCheckOverwrite",(e,t)=>{Mr.init(e,t),e._zod.check=n=>{n.value=t.tx(n.value)}});class tR{constructor(t=[]){this.content=[],this.indent=0,this&&(this.args=t)}indented(t){this.indent+=1,t(this),this.indent-=1}write(t){if(typeof t=="function"){t(this,{execution:"sync"}),t(this,{execution:"async"});return}const i=t.split(`
`).filter(u=>u),s=Math.min(...i.map(u=>u.length-u.trimStart().length)),l=i.map(u=>u.slice(s)).map(u=>" ".repeat(this.indent*2)+u);for(const u of l)this.content.push(u)}compile(){const t=Function,n=this==null?void 0:this.args,s=[...((this==null?void 0:this.content)??[""]).map(l=>`  ${l}`)];return new t(...n,s.join(`
`))}}const nR={major:4,minor:1,patch:12},Qt=Q("$ZodType",(e,t)=>{var s;var n;e??(e={}),e._zod.def=t,e._zod.bag=e._zod.bag||{},e._zod.version=nR;const i=[...e._zod.def.checks??[]];e._zod.traits.has("$ZodCheck")&&i.unshift(e);for(const l of i)for(const u of l._zod.onattach)u(e);if(i.length===0)(n=e._zod).deferred??(n.deferred=[]),(s=e._zod.deferred)==null||s.push(()=>{e._zod.run=e._zod.parse});else{const l=(d,f,p)=>{let m=Qi(d),g;for(const y of f){if(y._zod.def.when){if(!y._zod.def.when(d))continue}else if(m)continue;const b=d.issues.length,_=y._zod.check(d);if(_ instanceof Promise&&(p==null?void 0:p.async)===!1)throw new rs;if(g||_ instanceof Promise)g=(g??Promise.resolve()).then(async()=>{await _,d.issues.length!==b&&(m||(m=Qi(d,b)))});else{if(d.issues.length===b)continue;m||(m=Qi(d,b))}}return g?g.then(()=>d):d},u=(d,f,p)=>{if(Qi(d))return d.aborted=!0,d;const m=l(f,i,p);if(m instanceof Promise){if(p.async===!1)throw new rs;return m.then(g=>e._zod.parse(g,p))}return e._zod.parse(m,p)};e._zod.run=(d,f)=>{if(f.skipChecks)return e._zod.parse(d,f);if(f.direction==="backward"){const m=e._zod.parse({value:d.value,issues:[]},{...f,skipChecks:!0});return m instanceof Promise?m.then(g=>u(g,d,f)):u(m,d,f)}const p=e._zod.parse(d,f);if(p instanceof Promise){if(f.async===!1)throw new rs;return p.then(m=>l(m,i,f))}return l(p,i,f)}}e["~standard"]={validate:l=>{var u;try{const d=dT(e,l);return d.success?{value:d.data}:{issues:(u=d.error)==null?void 0:u.issues}}catch{return fT(e,l).then(f=>{var p;return f.success?{value:f.data}:{issues:(p=f.error)==null?void 0:p.issues}})}},vendor:"zod",version:1}}),Qh=Q("$ZodString",(e,t)=>{var n;Qt.init(e,t),e._zod.pattern=[...((n=e==null?void 0:e._zod.bag)==null?void 0:n.patterns)??[]].pop()??UT(e._zod.bag),e._zod.parse=(i,s)=>{if(t.coerce)try{i.value=String(i.value)}catch{}return typeof i.value=="string"||i.issues.push({expected:"string",code:"invalid_type",input:i.value,inst:e}),i}}),St=Q("$ZodStringFormat",(e,t)=>{sc.init(e,t),Qh.init(e,t)}),rR=Q("$ZodGUID",(e,t)=>{t.pattern??(t.pattern=TT),St.init(e,t)}),oR=Q("$ZodUUID",(e,t)=>{if(t.version){const i={v1:1,v2:2,v3:3,v4:4,v5:5,v6:6,v7:7,v8:8}[t.version];if(i===void 0)throw new Error(`Invalid UUID version: "${t.version}"`);t.pattern??(t.pattern=py(i))}else t.pattern??(t.pattern=py());St.init(e,t)}),iR=Q("$ZodEmail",(e,t)=>{t.pattern??(t.pattern=RT),St.init(e,t)}),sR=Q("$ZodURL",(e,t)=>{St.init(e,t),e._zod.check=n=>{try{const i=n.value.trim(),s=new URL(i);t.hostname&&(t.hostname.lastIndex=0,t.hostname.test(s.hostname)||n.issues.push({code:"invalid_format",format:"url",note:"Invalid hostname",pattern:zT.source,input:n.value,inst:e,continue:!t.abort})),t.protocol&&(t.protocol.lastIndex=0,t.protocol.test(s.protocol.endsWith(":")?s.protocol.slice(0,-1):s.protocol)||n.issues.push({code:"invalid_format",format:"url",note:"Invalid protocol",pattern:t.protocol.source,input:n.value,inst:e,continue:!t.abort})),t.normalize?n.value=s.href:n.value=i;return}catch{n.issues.push({code:"invalid_format",format:"url",input:n.value,inst:e,continue:!t.abort})}}}),aR=Q("$ZodEmoji",(e,t)=>{t.pattern??(t.pattern=NT()),St.init(e,t)}),lR=Q("$ZodNanoID",(e,t)=>{t.pattern??(t.pattern=CT),St.init(e,t)}),uR=Q("$ZodCUID",(e,t)=>{t.pattern??(t.pattern=ST),St.init(e,t)}),cR=Q("$ZodCUID2",(e,t)=>{t.pattern??(t.pattern=bT),St.init(e,t)}),dR=Q("$ZodULID",(e,t)=>{t.pattern??(t.pattern=kT),St.init(e,t)}),fR=Q("$ZodXID",(e,t)=>{t.pattern??(t.pattern=ET),St.init(e,t)}),hR=Q("$ZodKSUID",(e,t)=>{t.pattern??(t.pattern=_T),St.init(e,t)}),pR=Q("$ZodISODateTime",(e,t)=>{t.pattern??(t.pattern=$T(t)),St.init(e,t)}),mR=Q("$ZodISODate",(e,t)=>{t.pattern??(t.pattern=FT),St.init(e,t)}),gR=Q("$ZodISOTime",(e,t)=>{t.pattern??(t.pattern=VT(t)),St.init(e,t)}),vR=Q("$ZodISODuration",(e,t)=>{t.pattern??(t.pattern=PT),St.init(e,t)}),yR=Q("$ZodIPv4",(e,t)=>{t.pattern??(t.pattern=AT),St.init(e,t),e._zod.onattach.push(n=>{const i=n._zod.bag;i.format="ipv4"})}),wR=Q("$ZodIPv6",(e,t)=>{t.pattern??(t.pattern=MT),St.init(e,t),e._zod.onattach.push(n=>{const i=n._zod.bag;i.format="ipv6"}),e._zod.check=n=>{try{new URL(`http://[${n.value}]`)}catch{n.issues.push({code:"invalid_format",format:"ipv6",input:n.value,inst:e,continue:!t.abort})}}}),xR=Q("$ZodCIDRv4",(e,t)=>{t.pattern??(t.pattern=jT),St.init(e,t)}),SR=Q("$ZodCIDRv6",(e,t)=>{t.pattern??(t.pattern=LT),St.init(e,t),e._zod.check=n=>{const i=n.value.split("/");try{if(i.length!==2)throw new Error;const[s,l]=i;if(!l)throw new Error;const u=Number(l);if(`${u}`!==l)throw new Error;if(u<0||u>128)throw new Error;new URL(`http://[${s}]`)}catch{n.issues.push({code:"invalid_format",format:"cidrv6",input:n.value,inst:e,continue:!t.abort})}}});function bx(e){if(e==="")return!0;if(e.length%4!==0)return!1;try{return atob(e),!0}catch{return!1}}const bR=Q("$ZodBase64",(e,t)=>{t.pattern??(t.pattern=OT),St.init(e,t),e._zod.onattach.push(n=>{n._zod.bag.contentEncoding="base64"}),e._zod.check=n=>{bx(n.value)||n.issues.push({code:"invalid_format",format:"base64",input:n.value,inst:e,continue:!t.abort})}});function kR(e){if(!wx.test(e))return!1;const t=e.replace(/[-_]/g,i=>i==="-"?"+":"/"),n=t.padEnd(Math.ceil(t.length/4)*4,"=");return bx(n)}const ER=Q("$ZodBase64URL",(e,t)=>{t.pattern??(t.pattern=wx),St.init(e,t),e._zod.onattach.push(n=>{n._zod.bag.contentEncoding="base64url"}),e._zod.check=n=>{kR(n.value)||n.issues.push({code:"invalid_format",format:"base64url",input:n.value,inst:e,continue:!t.abort})}}),_R=Q("$ZodE164",(e,t)=>{t.pattern??(t.pattern=IT),St.init(e,t)});function CR(e,t=null){try{const n=e.split(".");if(n.length!==3)return!1;const[i]=n;if(!i)return!1;const s=JSON.parse(atob(i));return!("typ"in s&&(s==null?void 0:s.typ)!=="JWT"||!s.alg||t&&(!("alg"in s)||s.alg!==t))}catch{return!1}}const PR=Q("$ZodJWT",(e,t)=>{St.init(e,t),e._zod.check=n=>{CR(n.value,t.alg)||n.issues.push({code:"invalid_format",format:"jwt",input:n.value,inst:e,continue:!t.abort})}}),TR=Q("$ZodUnknown",(e,t)=>{Qt.init(e,t),e._zod.parse=n=>n}),RR=Q("$ZodNever",(e,t)=>{Qt.init(e,t),e._zod.parse=(n,i)=>(n.issues.push({expected:"never",code:"invalid_type",input:n.value,inst:e}),n)});function my(e,t,n){e.issues.length&&t.issues.push(...vx(n,e.issues)),t.value[n]=e.value}const DR=Q("$ZodArray",(e,t)=>{Qt.init(e,t),e._zod.parse=(n,i)=>{const s=n.value;if(!Array.isArray(s))return n.issues.push({expected:"array",code:"invalid_type",input:s,inst:e}),n;n.value=Array(s.length);const l=[];for(let u=0;u<s.length;u++){const d=s[u],f=t.element._zod.run({value:d,issues:[]},i);f instanceof Promise?l.push(f.then(p=>my(p,n,u))):my(f,n,u)}return l.length?Promise.all(l).then(()=>n):n}});function zu(e,t,n,i){e.issues.length&&t.issues.push(...vx(n,e.issues)),e.value===void 0?n in i&&(t.value[n]=void 0):t.value[n]=e.value}function kx(e){var i,s,l,u;const t=Object.keys(e.shape);for(const d of t)if(!((u=(l=(s=(i=e.shape)==null?void 0:i[d])==null?void 0:s._zod)==null?void 0:l.traits)!=null&&u.has("$ZodType")))throw new Error(`Invalid element at key "${d}": expected a Zod schema`);const n=qP(e.shape);return{...e,keys:t,keySet:new Set(t),numKeys:t.length,optionalKeys:new Set(n)}}function Ex(e,t,n,i,s,l){const u=[],d=s.keySet,f=s.catchall._zod,p=f.def.type;for(const m of Object.keys(t)){if(d.has(m))continue;if(p==="never"){u.push(m);continue}const g=f.run({value:t[m],issues:[]},i);g instanceof Promise?e.push(g.then(y=>zu(y,n,m,t))):zu(g,n,m,t)}return u.length&&n.issues.push({code:"unrecognized_keys",keys:u,input:t,inst:l}),e.length?Promise.all(e).then(()=>n):n}const NR=Q("$ZodObject",(e,t)=>{Qt.init(e,t);const n=Object.getOwnPropertyDescriptor(t,"shape");if(!(n!=null&&n.get)){const d=t.shape;Object.defineProperty(t,"shape",{get:()=>{const f={...d};return Object.defineProperty(t,"shape",{value:f}),f}})}const i=Hh(()=>kx(t));pt(e._zod,"propValues",()=>{const d=t.shape,f={};for(const p in d){const m=d[p]._zod;if(m.values){f[p]??(f[p]=new Set);for(const g of m.values)f[p].add(g)}}return f});const s=Ou,l=t.catchall;let u;e._zod.parse=(d,f)=>{u??(u=i.value);const p=d.value;if(!s(p))return d.issues.push({expected:"object",code:"invalid_type",input:p,inst:e}),d;d.value={};const m=[],g=u.shape;for(const y of u.keys){const _=g[y]._zod.run({value:p[y],issues:[]},f);_ instanceof Promise?m.push(_.then(k=>zu(k,d,y,p))):zu(_,d,y,p)}return l?Ex(m,p,d,f,i.value,e):m.length?Promise.all(m).then(()=>d):d}}),AR=Q("$ZodObjectJIT",(e,t)=>{NR.init(e,t);const n=e._zod.parse,i=Hh(()=>kx(t)),s=y=>{const b=new tR(["shape","payload","ctx"]),_=i.value,k=O=>{const B=hy(O);return`shape[${B}]._zod.run({ value: input[${B}], issues: [] }, ctx)`};b.write("const input = payload.value;");const C=Object.create(null);let N=0;for(const O of _.keys)C[O]=`key_${N++}`;b.write("const newResult = {};");for(const O of _.keys){const B=C[O],Z=hy(O);b.write(`const ${B} = ${k(O)};`),b.write(`
        if (${B}.issues.length) {
          payload.issues = payload.issues.concat(${B}.issues.map(iss => ({
            ...iss,
            path: iss.path ? [${Z}, ...iss.path] : [${Z}]
          })));
        }
        
        
        if (${B}.value === undefined) {
          if (${Z} in input) {
            newResult[${Z}] = undefined;
          }
        } else {
          newResult[${Z}] = ${B}.value;
        }
        
      `)}b.write("payload.value = newResult;"),b.write("return payload;");const M=b.compile();return(O,B)=>M(y,O,B)};let l;const u=Ou,d=!px.jitless,p=d&&QP.value,m=t.catchall;let g;e._zod.parse=(y,b)=>{g??(g=i.value);const _=y.value;return u(_)?d&&p&&(b==null?void 0:b.async)===!1&&b.jitless!==!0?(l||(l=s(t.shape)),y=l(y,b),m?Ex([],_,y,b,g,e):y):n(y,b):(y.issues.push({expected:"object",code:"invalid_type",input:_,inst:e}),y)}});function gy(e,t,n,i){for(const l of e)if(l.issues.length===0)return t.value=l.value,t;const s=e.filter(l=>!Qi(l));return s.length===1?(t.value=s[0].value,s[0]):(t.issues.push({code:"invalid_union",input:t.value,inst:n,errors:e.map(l=>l.issues.map(u=>gi(u,i,mi())))}),t)}const MR=Q("$ZodUnion",(e,t)=>{Qt.init(e,t),pt(e._zod,"optin",()=>t.options.some(s=>s._zod.optin==="optional")?"optional":void 0),pt(e._zod,"optout",()=>t.options.some(s=>s._zod.optout==="optional")?"optional":void 0),pt(e._zod,"values",()=>{if(t.options.every(s=>s._zod.values))return new Set(t.options.flatMap(s=>Array.from(s._zod.values)))}),pt(e._zod,"pattern",()=>{if(t.options.every(s=>s._zod.pattern)){const s=t.options.map(l=>l._zod.pattern);return new RegExp(`^(${s.map(l=>Gh(l.source)).join("|")})$`)}});const n=t.options.length===1,i=t.options[0]._zod.run;e._zod.parse=(s,l)=>{if(n)return i(s,l);let u=!1;const d=[];for(const f of t.options){const p=f._zod.run({value:s.value,issues:[]},l);if(p instanceof Promise)d.push(p),u=!0;else{if(p.issues.length===0)return p;d.push(p)}}return u?Promise.all(d).then(f=>gy(f,s,e,l)):gy(d,s,e,l)}}),jR=Q("$ZodIntersection",(e,t)=>{Qt.init(e,t),e._zod.parse=(n,i)=>{const s=n.value,l=t.left._zod.run({value:s,issues:[]},i),u=t.right._zod.run({value:s,issues:[]},i);return l instanceof Promise||u instanceof Promise?Promise.all([l,u]).then(([f,p])=>vy(n,f,p)):vy(n,l,u)}});function Yf(e,t){if(e===t)return{valid:!0,data:e};if(e instanceof Date&&t instanceof Date&&+e==+t)return{valid:!0,data:e};if(Ca(e)&&Ca(t)){const n=Object.keys(t),i=Object.keys(e).filter(l=>n.indexOf(l)!==-1),s={...e,...t};for(const l of i){const u=Yf(e[l],t[l]);if(!u.valid)return{valid:!1,mergeErrorPath:[l,...u.mergeErrorPath]};s[l]=u.data}return{valid:!0,data:s}}if(Array.isArray(e)&&Array.isArray(t)){if(e.length!==t.length)return{valid:!1,mergeErrorPath:[]};const n=[];for(let i=0;i<e.length;i++){const s=e[i],l=t[i],u=Yf(s,l);if(!u.valid)return{valid:!1,mergeErrorPath:[i,...u.mergeErrorPath]};n.push(u.data)}return{valid:!0,data:n}}return{valid:!1,mergeErrorPath:[]}}function vy(e,t,n){if(t.issues.length&&e.issues.push(...t.issues),n.issues.length&&e.issues.push(...n.issues),Qi(e))return e;const i=Yf(t.value,n.value);if(!i.valid)throw new Error(`Unmergable intersection. Error path: ${JSON.stringify(i.mergeErrorPath)}`);return e.value=i.data,e}const LR=Q("$ZodEnum",(e,t)=>{Qt.init(e,t);const n=XP(t.entries),i=new Set(n);e._zod.values=i,e._zod.pattern=new RegExp(`^(${n.filter(s=>JP.has(typeof s)).map(s=>typeof s=="string"?ec(s):s.toString()).join("|")})$`),e._zod.parse=(s,l)=>{const u=s.value;return i.has(u)||s.issues.push({code:"invalid_value",values:n,input:u,inst:e}),s}}),OR=Q("$ZodTransform",(e,t)=>{Qt.init(e,t),e._zod.parse=(n,i)=>{if(i.direction==="backward")throw new hx(e.constructor.name);const s=t.transform(n.value,n);if(i.async)return(s instanceof Promise?s:Promise.resolve(s)).then(u=>(n.value=u,n));if(s instanceof Promise)throw new rs;return n.value=s,n}});function yy(e,t){return e.issues.length&&t===void 0?{issues:[],value:void 0}:e}const zR=Q("$ZodOptional",(e,t)=>{Qt.init(e,t),e._zod.optin="optional",e._zod.optout="optional",pt(e._zod,"values",()=>t.innerType._zod.values?new Set([...t.innerType._zod.values,void 0]):void 0),pt(e._zod,"pattern",()=>{const n=t.innerType._zod.pattern;return n?new RegExp(`^(${Gh(n.source)})?$`):void 0}),e._zod.parse=(n,i)=>{if(t.innerType._zod.optin==="optional"){const s=t.innerType._zod.run(n,i);return s instanceof Promise?s.then(l=>yy(l,n.value)):yy(s,n.value)}return n.value===void 0?n:t.innerType._zod.run(n,i)}}),IR=Q("$ZodNullable",(e,t)=>{Qt.init(e,t),pt(e._zod,"optin",()=>t.innerType._zod.optin),pt(e._zod,"optout",()=>t.innerType._zod.optout),pt(e._zod,"pattern",()=>{const n=t.innerType._zod.pattern;return n?new RegExp(`^(${Gh(n.source)}|null)$`):void 0}),pt(e._zod,"values",()=>t.innerType._zod.values?new Set([...t.innerType._zod.values,null]):void 0),e._zod.parse=(n,i)=>n.value===null?n:t.innerType._zod.run(n,i)}),FR=Q("$ZodDefault",(e,t)=>{Qt.init(e,t),e._zod.optin="optional",pt(e._zod,"values",()=>t.innerType._zod.values),e._zod.parse=(n,i)=>{if(i.direction==="backward")return t.innerType._zod.run(n,i);if(n.value===void 0)return n.value=t.defaultValue,n;const s=t.innerType._zod.run(n,i);return s instanceof Promise?s.then(l=>wy(l,t)):wy(s,t)}});function wy(e,t){return e.value===void 0&&(e.value=t.defaultValue),e}const VR=Q("$ZodPrefault",(e,t)=>{Qt.init(e,t),e._zod.optin="optional",pt(e._zod,"values",()=>t.innerType._zod.values),e._zod.parse=(n,i)=>(i.direction==="backward"||n.value===void 0&&(n.value=t.defaultValue),t.innerType._zod.run(n,i))}),$R=Q("$ZodNonOptional",(e,t)=>{Qt.init(e,t),pt(e._zod,"values",()=>{const n=t.innerType._zod.values;return n?new Set([...n].filter(i=>i!==void 0)):void 0}),e._zod.parse=(n,i)=>{const s=t.innerType._zod.run(n,i);return s instanceof Promise?s.then(l=>xy(l,e)):xy(s,e)}});function xy(e,t){return!e.issues.length&&e.value===void 0&&e.issues.push({code:"invalid_type",expected:"nonoptional",input:e.value,inst:t}),e}const UR=Q("$ZodCatch",(e,t)=>{Qt.init(e,t),pt(e._zod,"optin",()=>t.innerType._zod.optin),pt(e._zod,"optout",()=>t.innerType._zod.optout),pt(e._zod,"values",()=>t.innerType._zod.values),e._zod.parse=(n,i)=>{if(i.direction==="backward")return t.innerType._zod.run(n,i);const s=t.innerType._zod.run(n,i);return s instanceof Promise?s.then(l=>(n.value=l.value,l.issues.length&&(n.value=t.catchValue({...n,error:{issues:l.issues.map(u=>gi(u,i,mi()))},input:n.value}),n.issues=[]),n)):(n.value=s.value,s.issues.length&&(n.value=t.catchValue({...n,error:{issues:s.issues.map(l=>gi(l,i,mi()))},input:n.value}),n.issues=[]),n)}}),BR=Q("$ZodPipe",(e,t)=>{Qt.init(e,t),pt(e._zod,"values",()=>t.in._zod.values),pt(e._zod,"optin",()=>t.in._zod.optin),pt(e._zod,"optout",()=>t.out._zod.optout),pt(e._zod,"propValues",()=>t.in._zod.propValues),e._zod.parse=(n,i)=>{if(i.direction==="backward"){const l=t.out._zod.run(n,i);return l instanceof Promise?l.then(u=>nu(u,t.in,i)):nu(l,t.in,i)}const s=t.in._zod.run(n,i);return s instanceof Promise?s.then(l=>nu(l,t.out,i)):nu(s,t.out,i)}});function nu(e,t,n){return e.issues.length?(e.aborted=!0,e):t._zod.run({value:e.value,issues:e.issues},n)}const WR=Q("$ZodReadonly",(e,t)=>{Qt.init(e,t),pt(e._zod,"propValues",()=>t.innerType._zod.propValues),pt(e._zod,"values",()=>t.innerType._zod.values),pt(e._zod,"optin",()=>t.innerType._zod.optin),pt(e._zod,"optout",()=>t.innerType._zod.optout),e._zod.parse=(n,i)=>{if(i.direction==="backward")return t.innerType._zod.run(n,i);const s=t.innerType._zod.run(n,i);return s instanceof Promise?s.then(Sy):Sy(s)}});function Sy(e){return e.value=Object.freeze(e.value),e}const ZR=Q("$ZodCustom",(e,t)=>{Mr.init(e,t),Qt.init(e,t),e._zod.parse=(n,i)=>n,e._zod.check=n=>{const i=n.value,s=t.fn(i);if(s instanceof Promise)return s.then(l=>by(l,n,i,e));by(s,n,i,e)}});function by(e,t,n,i){if(!e){const s={code:"custom",input:n,inst:i,path:[...i._zod.def.path??[]],continue:!i._zod.def.abort};i._zod.def.params&&(s.params=i._zod.def.params),t.issues.push(Pa(s))}}class HR{constructor(){this._map=new WeakMap,this._idmap=new Map}add(t,...n){const i=n[0];if(this._map.set(t,i),i&&typeof i=="object"&&"id"in i){if(this._idmap.has(i.id))throw new Error(`ID ${i.id} already exists in the registry`);this._idmap.set(i.id,t)}return this}clear(){return this._map=new WeakMap,this._idmap=new Map,this}remove(t){const n=this._map.get(t);return n&&typeof n=="object"&&"id"in n&&this._idmap.delete(n.id),this._map.delete(t),this}get(t){const n=t._zod.parent;if(n){const i={...this.get(n)??{}};delete i.id;const s={...i,...this._map.get(t)};return Object.keys(s).length?s:void 0}return this._map.get(t)}has(t){return this._map.has(t)}}function KR(){return new HR}const ru=KR();function GR(e,t){return new e({type:"string",...Be(t)})}function YR(e,t){return new e({type:"string",format:"email",check:"string_format",abort:!1,...Be(t)})}function ky(e,t){return new e({type:"string",format:"guid",check:"string_format",abort:!1,...Be(t)})}function XR(e,t){return new e({type:"string",format:"uuid",check:"string_format",abort:!1,...Be(t)})}function QR(e,t){return new e({type:"string",format:"uuid",check:"string_format",abort:!1,version:"v4",...Be(t)})}function JR(e,t){return new e({type:"string",format:"uuid",check:"string_format",abort:!1,version:"v6",...Be(t)})}function qR(e,t){return new e({type:"string",format:"uuid",check:"string_format",abort:!1,version:"v7",...Be(t)})}function eD(e,t){return new e({type:"string",format:"url",check:"string_format",abort:!1,...Be(t)})}function tD(e,t){return new e({type:"string",format:"emoji",check:"string_format",abort:!1,...Be(t)})}function nD(e,t){return new e({type:"string",format:"nanoid",check:"string_format",abort:!1,...Be(t)})}function rD(e,t){return new e({type:"string",format:"cuid",check:"string_format",abort:!1,...Be(t)})}function oD(e,t){return new e({type:"string",format:"cuid2",check:"string_format",abort:!1,...Be(t)})}function iD(e,t){return new e({type:"string",format:"ulid",check:"string_format",abort:!1,...Be(t)})}function sD(e,t){return new e({type:"string",format:"xid",check:"string_format",abort:!1,...Be(t)})}function aD(e,t){return new e({type:"string",format:"ksuid",check:"string_format",abort:!1,...Be(t)})}function lD(e,t){return new e({type:"string",format:"ipv4",check:"string_format",abort:!1,...Be(t)})}function uD(e,t){return new e({type:"string",format:"ipv6",check:"string_format",abort:!1,...Be(t)})}function cD(e,t){return new e({type:"string",format:"cidrv4",check:"string_format",abort:!1,...Be(t)})}function dD(e,t){return new e({type:"string",format:"cidrv6",check:"string_format",abort:!1,...Be(t)})}function fD(e,t){return new e({type:"string",format:"base64",check:"string_format",abort:!1,...Be(t)})}function hD(e,t){return new e({type:"string",format:"base64url",check:"string_format",abort:!1,...Be(t)})}function pD(e,t){return new e({type:"string",format:"e164",check:"string_format",abort:!1,...Be(t)})}function mD(e,t){return new e({type:"string",format:"jwt",check:"string_format",abort:!1,...Be(t)})}function gD(e,t){return new e({type:"string",format:"datetime",check:"string_format",offset:!1,local:!1,precision:null,...Be(t)})}function vD(e,t){return new e({type:"string",format:"date",check:"string_format",...Be(t)})}function yD(e,t){return new e({type:"string",format:"time",check:"string_format",precision:null,...Be(t)})}function wD(e,t){return new e({type:"string",format:"duration",check:"string_format",...Be(t)})}function xD(e){return new e({type:"unknown"})}function SD(e,t){return new e({type:"never",...Be(t)})}function _x(e,t){return new ZT({check:"max_length",...Be(t),maximum:e})}function Iu(e,t){return new HT({check:"min_length",...Be(t),minimum:e})}function Cx(e,t){return new KT({check:"length_equals",...Be(t),length:e})}function bD(e,t){return new GT({check:"string_format",format:"regex",...Be(t),pattern:e})}function kD(e){return new YT({check:"string_format",format:"lowercase",...Be(e)})}function ED(e){return new XT({check:"string_format",format:"uppercase",...Be(e)})}function _D(e,t){return new QT({check:"string_format",format:"includes",...Be(t),includes:e})}function CD(e,t){return new JT({check:"string_format",format:"starts_with",...Be(t),prefix:e})}function PD(e,t){return new qT({check:"string_format",format:"ends_with",...Be(t),suffix:e})}function Va(e){return new eR({check:"overwrite",tx:e})}function TD(e){return Va(t=>t.normalize(e))}function RD(){return Va(e=>e.trim())}function DD(){return Va(e=>e.toLowerCase())}function ND(){return Va(e=>e.toUpperCase())}function AD(e,t,n){return new e({type:"array",element:t,...Be(n)})}function MD(e,t,n){return new e({type:"custom",check:"custom",fn:t,...Be(n)})}function jD(e){const t=LD(n=>(n.addIssue=i=>{if(typeof i=="string")n.issues.push(Pa(i,n.value,t._zod.def));else{const s=i;s.fatal&&(s.continue=!1),s.code??(s.code="custom"),s.input??(s.input=n.value),s.inst??(s.inst=t),s.continue??(s.continue=!t._zod.def.abort),n.issues.push(Pa(s))}},e(n.value,n)));return t}function LD(e,t){const n=new Mr({check:"custom",...Be(t)});return n._zod.check=e,n}function Ey(e,t){try{var n=e()}catch(i){return t(i)}return n&&n.then?n.then(void 0,t):n}function OD(e,t){for(var n={};e.length;){var i=e[0],s=i.code,l=i.message,u=i.path.join(".");if(!n[u])if("unionErrors"in i){var d=i.unionErrors[0].errors[0];n[u]={message:d.message,type:d.code}}else n[u]={message:l,type:s};if("unionErrors"in i&&i.unionErrors.forEach(function(m){return m.errors.forEach(function(g){return e.push(g)})}),t){var f=n[u].types,p=f&&f[i.code];n[u]=Bh(u,t,n,s,p?[].concat(p,i.message):i.message)}e.shift()}return n}function zD(e,t){for(var n={};e.length;){var i=e[0],s=i.code,l=i.message,u=i.path.join(".");if(!n[u])if(i.code==="invalid_union"&&i.errors.length>0){var d=i.errors[0][0];n[u]={message:d.message,type:d.code}}else n[u]={message:l,type:s};if(i.code==="invalid_union"&&i.errors.forEach(function(m){return m.forEach(function(g){return e.push(g)})}),t){var f=n[u].types,p=f&&f[i.code];n[u]=Bh(u,t,n,s,p?[].concat(p,i.message):i.message)}e.shift()}return n}function ID(e,t,n){if(n===void 0&&(n={}),(function(i){return"_def"in i&&typeof i._def=="object"&&"typeName"in i._def})(e))return function(i,s,l){try{return Promise.resolve(Ey(function(){return Promise.resolve(e[n.mode==="sync"?"parse":"parseAsync"](i,t)).then(function(u){return l.shouldUseNativeValidation&&Kf({},l),{errors:{},values:n.raw?Object.assign({},i):u}})},function(u){if((function(d){return Array.isArray(d==null?void 0:d.issues)})(u))return{values:{},errors:cy(OD(u.errors,!l.shouldUseNativeValidation&&l.criteriaMode==="all"),l)};throw u}))}catch(u){return Promise.reject(u)}};if((function(i){return"_zod"in i&&typeof i._zod=="object"})(e))return function(i,s,l){try{return Promise.resolve(Ey(function(){return Promise.resolve((n.mode==="sync"?uT:cT)(e,i,t)).then(function(u){return l.shouldUseNativeValidation&&Kf({},l),{errors:{},values:n.raw?Object.assign({},i):u}})},function(u){if((function(d){return d instanceof Xh})(u))return{values:{},errors:cy(zD(u.issues,!l.shouldUseNativeValidation&&l.criteriaMode==="all"),l)};throw u}))}catch(u){return Promise.reject(u)}};throw new Error("Invalid input: not a Zod schema")}const FD=Q("ZodISODateTime",(e,t)=>{pR.init(e,t),Ct.init(e,t)});function VD(e){return gD(FD,e)}const $D=Q("ZodISODate",(e,t)=>{mR.init(e,t),Ct.init(e,t)});function UD(e){return vD($D,e)}const BD=Q("ZodISOTime",(e,t)=>{gR.init(e,t),Ct.init(e,t)});function WD(e){return yD(BD,e)}const ZD=Q("ZodISODuration",(e,t)=>{vR.init(e,t),Ct.init(e,t)});function HD(e){return wD(ZD,e)}const KD=(e,t)=>{Xh.init(e,t),e.name="ZodError",Object.defineProperties(e,{format:{value:n=>lT(e,n)},flatten:{value:n=>aT(e,n)},addIssue:{value:n=>{e.issues.push(n),e.message=JSON.stringify(e.issues,Gf,2)}},addIssues:{value:n=>{e.issues.push(...n),e.message=JSON.stringify(e.issues,Gf,2)}},isEmpty:{get(){return e.issues.length===0}}})},lr=Q("ZodError",KD,{Parent:Error}),GD=nc(lr),YD=rc(lr),XD=oc(lr),QD=ic(lr),JD=hT(lr),qD=pT(lr),eN=mT(lr),tN=gT(lr),nN=vT(lr),rN=yT(lr),oN=wT(lr),iN=xT(lr),rn=Q("ZodType",(e,t)=>(Qt.init(e,t),e.def=t,e.type=t.type,Object.defineProperty(e,"_def",{value:t}),e.check=(...n)=>e.clone(xi(t,{checks:[...t.checks??[],...n.map(i=>typeof i=="function"?{_zod:{check:i,def:{check:"custom"},onattach:[]}}:i)]})),e.clone=(n,i)=>zo(e,n,i),e.brand=()=>e,e.register=((n,i)=>(n.add(e,i),e)),e.parse=(n,i)=>GD(e,n,i,{callee:e.parse}),e.safeParse=(n,i)=>XD(e,n,i),e.parseAsync=async(n,i)=>YD(e,n,i,{callee:e.parseAsync}),e.safeParseAsync=async(n,i)=>QD(e,n,i),e.spa=e.safeParseAsync,e.encode=(n,i)=>JD(e,n,i),e.decode=(n,i)=>qD(e,n,i),e.encodeAsync=async(n,i)=>eN(e,n,i),e.decodeAsync=async(n,i)=>tN(e,n,i),e.safeEncode=(n,i)=>nN(e,n,i),e.safeDecode=(n,i)=>rN(e,n,i),e.safeEncodeAsync=async(n,i)=>oN(e,n,i),e.safeDecodeAsync=async(n,i)=>iN(e,n,i),e.refine=(n,i)=>e.check(XN(n,i)),e.superRefine=n=>e.check(QN(n)),e.overwrite=n=>e.check(Va(n)),e.optional=()=>Py(e),e.nullable=()=>Ty(e),e.nullish=()=>Py(Ty(e)),e.nonoptional=n=>BN(e,n),e.array=()=>TN(e),e.or=n=>AN([e,n]),e.and=n=>jN(e,n),e.transform=n=>Ry(e,zN(n)),e.default=n=>VN(e,n),e.prefault=n=>UN(e,n),e.catch=n=>ZN(e,n),e.pipe=n=>Ry(e,n),e.readonly=()=>GN(e),e.describe=n=>{const i=e.clone();return ru.add(i,{description:n}),i},Object.defineProperty(e,"description",{get(){var n;return(n=ru.get(e))==null?void 0:n.description},configurable:!0}),e.meta=(...n)=>{if(n.length===0)return ru.get(e);const i=e.clone();return ru.add(i,n[0]),i},e.isOptional=()=>e.safeParse(void 0).success,e.isNullable=()=>e.safeParse(null).success,e)),Px=Q("_ZodString",(e,t)=>{Qh.init(e,t),rn.init(e,t);const n=e._zod.bag;e.format=n.format??null,e.minLength=n.minimum??null,e.maxLength=n.maximum??null,e.regex=(...i)=>e.check(bD(...i)),e.includes=(...i)=>e.check(_D(...i)),e.startsWith=(...i)=>e.check(CD(...i)),e.endsWith=(...i)=>e.check(PD(...i)),e.min=(...i)=>e.check(Iu(...i)),e.max=(...i)=>e.check(_x(...i)),e.length=(...i)=>e.check(Cx(...i)),e.nonempty=(...i)=>e.check(Iu(1,...i)),e.lowercase=i=>e.check(kD(i)),e.uppercase=i=>e.check(ED(i)),e.trim=()=>e.check(RD()),e.normalize=(...i)=>e.check(TD(...i)),e.toLowerCase=()=>e.check(DD()),e.toUpperCase=()=>e.check(ND())}),sN=Q("ZodString",(e,t)=>{Qh.init(e,t),Px.init(e,t),e.email=n=>e.check(YR(aN,n)),e.url=n=>e.check(eD(lN,n)),e.jwt=n=>e.check(mD(kN,n)),e.emoji=n=>e.check(tD(uN,n)),e.guid=n=>e.check(ky(_y,n)),e.uuid=n=>e.check(XR(iu,n)),e.uuidv4=n=>e.check(QR(iu,n)),e.uuidv6=n=>e.check(JR(iu,n)),e.uuidv7=n=>e.check(qR(iu,n)),e.nanoid=n=>e.check(nD(cN,n)),e.guid=n=>e.check(ky(_y,n)),e.cuid=n=>e.check(rD(dN,n)),e.cuid2=n=>e.check(oD(fN,n)),e.ulid=n=>e.check(iD(hN,n)),e.base64=n=>e.check(fD(xN,n)),e.base64url=n=>e.check(hD(SN,n)),e.xid=n=>e.check(sD(pN,n)),e.ksuid=n=>e.check(aD(mN,n)),e.ipv4=n=>e.check(lD(gN,n)),e.ipv6=n=>e.check(uD(vN,n)),e.cidrv4=n=>e.check(cD(yN,n)),e.cidrv6=n=>e.check(dD(wN,n)),e.e164=n=>e.check(pD(bN,n)),e.datetime=n=>e.check(VD(n)),e.date=n=>e.check(UD(n)),e.time=n=>e.check(WD(n)),e.duration=n=>e.check(HD(n))});function ou(e){return GR(sN,e)}const Ct=Q("ZodStringFormat",(e,t)=>{St.init(e,t),Px.init(e,t)}),aN=Q("ZodEmail",(e,t)=>{iR.init(e,t),Ct.init(e,t)}),_y=Q("ZodGUID",(e,t)=>{rR.init(e,t),Ct.init(e,t)}),iu=Q("ZodUUID",(e,t)=>{oR.init(e,t),Ct.init(e,t)}),lN=Q("ZodURL",(e,t)=>{sR.init(e,t),Ct.init(e,t)}),uN=Q("ZodEmoji",(e,t)=>{aR.init(e,t),Ct.init(e,t)}),cN=Q("ZodNanoID",(e,t)=>{lR.init(e,t),Ct.init(e,t)}),dN=Q("ZodCUID",(e,t)=>{uR.init(e,t),Ct.init(e,t)}),fN=Q("ZodCUID2",(e,t)=>{cR.init(e,t),Ct.init(e,t)}),hN=Q("ZodULID",(e,t)=>{dR.init(e,t),Ct.init(e,t)}),pN=Q("ZodXID",(e,t)=>{fR.init(e,t),Ct.init(e,t)}),mN=Q("ZodKSUID",(e,t)=>{hR.init(e,t),Ct.init(e,t)}),gN=Q("ZodIPv4",(e,t)=>{yR.init(e,t),Ct.init(e,t)}),vN=Q("ZodIPv6",(e,t)=>{wR.init(e,t),Ct.init(e,t)}),yN=Q("ZodCIDRv4",(e,t)=>{xR.init(e,t),Ct.init(e,t)}),wN=Q("ZodCIDRv6",(e,t)=>{SR.init(e,t),Ct.init(e,t)}),xN=Q("ZodBase64",(e,t)=>{bR.init(e,t),Ct.init(e,t)}),SN=Q("ZodBase64URL",(e,t)=>{ER.init(e,t),Ct.init(e,t)}),bN=Q("ZodE164",(e,t)=>{_R.init(e,t),Ct.init(e,t)}),kN=Q("ZodJWT",(e,t)=>{PR.init(e,t),Ct.init(e,t)}),EN=Q("ZodUnknown",(e,t)=>{TR.init(e,t),rn.init(e,t)});function Cy(){return xD(EN)}const _N=Q("ZodNever",(e,t)=>{RR.init(e,t),rn.init(e,t)});function CN(e){return SD(_N,e)}const PN=Q("ZodArray",(e,t)=>{DR.init(e,t),rn.init(e,t),e.element=t.element,e.min=(n,i)=>e.check(Iu(n,i)),e.nonempty=n=>e.check(Iu(1,n)),e.max=(n,i)=>e.check(_x(n,i)),e.length=(n,i)=>e.check(Cx(n,i)),e.unwrap=()=>e.element});function TN(e,t){return AD(PN,e,t)}const RN=Q("ZodObject",(e,t)=>{AR.init(e,t),rn.init(e,t),pt(e,"shape",()=>t.shape),e.keyof=()=>LN(Object.keys(e._zod.def.shape)),e.catchall=n=>e.clone({...e._zod.def,catchall:n}),e.passthrough=()=>e.clone({...e._zod.def,catchall:Cy()}),e.loose=()=>e.clone({...e._zod.def,catchall:Cy()}),e.strict=()=>e.clone({...e._zod.def,catchall:CN()}),e.strip=()=>e.clone({...e._zod.def,catchall:void 0}),e.extend=n=>nT(e,n),e.safeExtend=n=>rT(e,n),e.merge=n=>oT(e,n),e.pick=n=>eT(e,n),e.omit=n=>tT(e,n),e.partial=(...n)=>iT(Tx,e,n[0]),e.required=(...n)=>sT(Rx,e,n[0])});function DN(e,t){const n={type:"object",shape:e??{},...Be(t)};return new RN(n)}const NN=Q("ZodUnion",(e,t)=>{MR.init(e,t),rn.init(e,t),e.options=t.options});function AN(e,t){return new NN({type:"union",options:e,...Be(t)})}const MN=Q("ZodIntersection",(e,t)=>{jR.init(e,t),rn.init(e,t)});function jN(e,t){return new MN({type:"intersection",left:e,right:t})}const Xf=Q("ZodEnum",(e,t)=>{LR.init(e,t),rn.init(e,t),e.enum=t.entries,e.options=Object.values(t.entries);const n=new Set(Object.keys(t.entries));e.extract=(i,s)=>{const l={};for(const u of i)if(n.has(u))l[u]=t.entries[u];else throw new Error(`Key ${u} not found in enum`);return new Xf({...t,checks:[],...Be(s),entries:l})},e.exclude=(i,s)=>{const l={...t.entries};for(const u of i)if(n.has(u))delete l[u];else throw new Error(`Key ${u} not found in enum`);return new Xf({...t,checks:[],...Be(s),entries:l})}});function LN(e,t){const n=Array.isArray(e)?Object.fromEntries(e.map(i=>[i,i])):e;return new Xf({type:"enum",entries:n,...Be(t)})}const ON=Q("ZodTransform",(e,t)=>{OR.init(e,t),rn.init(e,t),e._zod.parse=(n,i)=>{if(i.direction==="backward")throw new hx(e.constructor.name);n.addIssue=l=>{if(typeof l=="string")n.issues.push(Pa(l,n.value,t));else{const u=l;u.fatal&&(u.continue=!1),u.code??(u.code="custom"),u.input??(u.input=n.value),u.inst??(u.inst=e),n.issues.push(Pa(u))}};const s=t.transform(n.value,n);return s instanceof Promise?s.then(l=>(n.value=l,n)):(n.value=s,n)}});function zN(e){return new ON({type:"transform",transform:e})}const Tx=Q("ZodOptional",(e,t)=>{zR.init(e,t),rn.init(e,t),e.unwrap=()=>e._zod.def.innerType});function Py(e){return new Tx({type:"optional",innerType:e})}const IN=Q("ZodNullable",(e,t)=>{IR.init(e,t),rn.init(e,t),e.unwrap=()=>e._zod.def.innerType});function Ty(e){return new IN({type:"nullable",innerType:e})}const FN=Q("ZodDefault",(e,t)=>{FR.init(e,t),rn.init(e,t),e.unwrap=()=>e._zod.def.innerType,e.removeDefault=e.unwrap});function VN(e,t){return new FN({type:"default",innerType:e,get defaultValue(){return typeof t=="function"?t():gx(t)}})}const $N=Q("ZodPrefault",(e,t)=>{VR.init(e,t),rn.init(e,t),e.unwrap=()=>e._zod.def.innerType});function UN(e,t){return new $N({type:"prefault",innerType:e,get defaultValue(){return typeof t=="function"?t():gx(t)}})}const Rx=Q("ZodNonOptional",(e,t)=>{$R.init(e,t),rn.init(e,t),e.unwrap=()=>e._zod.def.innerType});function BN(e,t){return new Rx({type:"nonoptional",innerType:e,...Be(t)})}const WN=Q("ZodCatch",(e,t)=>{UR.init(e,t),rn.init(e,t),e.unwrap=()=>e._zod.def.innerType,e.removeCatch=e.unwrap});function ZN(e,t){return new WN({type:"catch",innerType:e,catchValue:typeof t=="function"?t:()=>t})}const HN=Q("ZodPipe",(e,t)=>{BR.init(e,t),rn.init(e,t),e.in=t.in,e.out=t.out});function Ry(e,t){return new HN({type:"pipe",in:e,out:t})}const KN=Q("ZodReadonly",(e,t)=>{WR.init(e,t),rn.init(e,t),e.unwrap=()=>e._zod.def.innerType});function GN(e){return new KN({type:"readonly",innerType:e})}const YN=Q("ZodCustom",(e,t)=>{ZR.init(e,t),rn.init(e,t)});function XN(e,t={}){return MD(YN,e,t)}function QN(e){return jD(e)}var JN=["a","button","div","form","h2","h3","img","input","label","li","nav","ol","p","select","span","svg","ul"],Sr=JN.reduce((e,t)=>{const n=Oh(`Primitive.${t}`),i=S.forwardRef((s,l)=>{const{asChild:u,...d}=s,f=u?n:t;return typeof window<"u"&&(window[Symbol.for("radix-ui")]=!0),x.jsx(f,{...d,ref:l})});return i.displayName=`Primitive.${t}`,{...e,[t]:i}},{});function qN(e,t){e&&Ph.flushSync(()=>e.dispatchEvent(t))}var e2="Label",Dx=S.forwardRef((e,t)=>x.jsx(Sr.label,{...e,ref:t,onMouseDown:n=>{var s;n.target.closest("button, input, select, textarea")||((s=e.onMouseDown)==null||s.call(e,n),!n.defaultPrevented&&n.detail>1&&n.preventDefault())}}));Dx.displayName=e2;var Nx=Dx;const t2=Xu("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"),Ax=S.forwardRef(({className:e,...t},n)=>x.jsx(Nx,{ref:n,className:Ot(t2(),e),...t}));Ax.displayName=Nx.displayName;const n2=RP,Mx=S.createContext({}),su=({...e})=>x.jsx(Mx.Provider,{value:{name:e.name},children:x.jsx(MP,{...e})}),ac=()=>{const e=S.useContext(Mx),t=S.useContext(jx),{getFieldState:n,formState:i}=qu(),s=n(e.name,i);if(!e)throw new Error("useFormField should be used within <FormField>");const{id:l}=t;return{id:l,name:e.name,formItemId:`${l}-form-item`,formDescriptionId:`${l}-form-item-description`,formMessageId:`${l}-form-item-message`,...s}},jx=S.createContext({}),la=S.forwardRef(({className:e,...t},n)=>{const i=S.useId();return x.jsx(jx.Provider,{value:{id:i},children:x.jsx("div",{ref:n,className:Ot("space-y-2",e),...t})})});la.displayName="FormItem";const ua=S.forwardRef(({className:e,...t},n)=>{const{error:i,formItemId:s}=ac();return x.jsx(Ax,{ref:n,className:Ot(i&&"text-destructive",e),htmlFor:s,...t})});ua.displayName="FormLabel";const ca=S.forwardRef(({...e},t)=>{const{error:n,formItemId:i,formDescriptionId:s,formMessageId:l}=ac();return x.jsx($w,{ref:t,id:i,"aria-describedby":n?`${s} ${l}`:`${s}`,"aria-invalid":!!n,...e})});ca.displayName="FormControl";const r2=S.forwardRef(({className:e,...t},n)=>{const{formDescriptionId:i}=ac();return x.jsx("p",{ref:n,id:i,className:Ot("text-[0.8rem] text-muted-foreground",e),...t})});r2.displayName="FormDescription";const da=S.forwardRef(({className:e,children:t,...n},i)=>{const{error:s,formMessageId:l}=ac(),u=s?String((s==null?void 0:s.message)??""):t;return u?x.jsx("p",{ref:i,id:l,className:Ot("text-[0.8rem] font-medium text-destructive",e),...n,children:u}):null});da.displayName="FormMessage";const vu=S.forwardRef(({className:e,type:t,...n},i)=>x.jsx("input",{type:t,className:Ot("flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",e),ref:i,...n}));vu.displayName="Input";const Lx=S.forwardRef(({className:e,...t},n)=>x.jsx("textarea",{className:Ot("flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",e),ref:n,...t}));Lx.displayName="Textarea";function o2(e){if(typeof document>"u")return;let t=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css",t.appendChild(n),n.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e))}const i2=e=>{switch(e){case"success":return l2;case"info":return c2;case"warning":return u2;case"error":return d2;default:return null}},s2=Array(12).fill(0),a2=({visible:e,className:t})=>G.createElement("div",{className:["sonner-loading-wrapper",t].filter(Boolean).join(" "),"data-visible":e},G.createElement("div",{className:"sonner-spinner"},s2.map((n,i)=>G.createElement("div",{className:"sonner-loading-bar",key:`spinner-bar-${i}`})))),l2=G.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor",height:"20",width:"20"},G.createElement("path",{fillRule:"evenodd",d:"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z",clipRule:"evenodd"})),u2=G.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"currentColor",height:"20",width:"20"},G.createElement("path",{fillRule:"evenodd",d:"M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z",clipRule:"evenodd"})),c2=G.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor",height:"20",width:"20"},G.createElement("path",{fillRule:"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z",clipRule:"evenodd"})),d2=G.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor",height:"20",width:"20"},G.createElement("path",{fillRule:"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z",clipRule:"evenodd"})),f2=G.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"12",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"1.5",strokeLinecap:"round",strokeLinejoin:"round"},G.createElement("line",{x1:"18",y1:"6",x2:"6",y2:"18"}),G.createElement("line",{x1:"6",y1:"6",x2:"18",y2:"18"})),h2=()=>{const[e,t]=G.useState(document.hidden);return G.useEffect(()=>{const n=()=>{t(document.hidden)};return document.addEventListener("visibilitychange",n),()=>window.removeEventListener("visibilitychange",n)},[]),e};let Qf=1;class p2{constructor(){this.subscribe=t=>(this.subscribers.push(t),()=>{const n=this.subscribers.indexOf(t);this.subscribers.splice(n,1)}),this.publish=t=>{this.subscribers.forEach(n=>n(t))},this.addToast=t=>{this.publish(t),this.toasts=[...this.toasts,t]},this.create=t=>{var n;const{message:i,...s}=t,l=typeof(t==null?void 0:t.id)=="number"||((n=t.id)==null?void 0:n.length)>0?t.id:Qf++,u=this.toasts.find(f=>f.id===l),d=t.dismissible===void 0?!0:t.dismissible;return this.dismissedToasts.has(l)&&this.dismissedToasts.delete(l),u?this.toasts=this.toasts.map(f=>f.id===l?(this.publish({...f,...t,id:l,title:i}),{...f,...t,id:l,dismissible:d,title:i}):f):this.addToast({title:i,...s,dismissible:d,id:l}),l},this.dismiss=t=>(t?(this.dismissedToasts.add(t),requestAnimationFrame(()=>this.subscribers.forEach(n=>n({id:t,dismiss:!0})))):this.toasts.forEach(n=>{this.subscribers.forEach(i=>i({id:n.id,dismiss:!0}))}),t),this.message=(t,n)=>this.create({...n,message:t}),this.error=(t,n)=>this.create({...n,message:t,type:"error"}),this.success=(t,n)=>this.create({...n,type:"success",message:t}),this.info=(t,n)=>this.create({...n,type:"info",message:t}),this.warning=(t,n)=>this.create({...n,type:"warning",message:t}),this.loading=(t,n)=>this.create({...n,type:"loading",message:t}),this.promise=(t,n)=>{if(!n)return;let i;n.loading!==void 0&&(i=this.create({...n,promise:t,type:"loading",message:n.loading,description:typeof n.description!="function"?n.description:void 0}));const s=Promise.resolve(t instanceof Function?t():t);let l=i!==void 0,u;const d=s.then(async p=>{if(u=["resolve",p],G.isValidElement(p))l=!1,this.create({id:i,type:"default",message:p});else if(g2(p)&&!p.ok){l=!1;const g=typeof n.error=="function"?await n.error(`HTTP error! status: ${p.status}`):n.error,y=typeof n.description=="function"?await n.description(`HTTP error! status: ${p.status}`):n.description,_=typeof g=="object"&&!G.isValidElement(g)?g:{message:g};this.create({id:i,type:"error",description:y,..._})}else if(p instanceof Error){l=!1;const g=typeof n.error=="function"?await n.error(p):n.error,y=typeof n.description=="function"?await n.description(p):n.description,_=typeof g=="object"&&!G.isValidElement(g)?g:{message:g};this.create({id:i,type:"error",description:y,..._})}else if(n.success!==void 0){l=!1;const g=typeof n.success=="function"?await n.success(p):n.success,y=typeof n.description=="function"?await n.description(p):n.description,_=typeof g=="object"&&!G.isValidElement(g)?g:{message:g};this.create({id:i,type:"success",description:y,..._})}}).catch(async p=>{if(u=["reject",p],n.error!==void 0){l=!1;const m=typeof n.error=="function"?await n.error(p):n.error,g=typeof n.description=="function"?await n.description(p):n.description,b=typeof m=="object"&&!G.isValidElement(m)?m:{message:m};this.create({id:i,type:"error",description:g,...b})}}).finally(()=>{l&&(this.dismiss(i),i=void 0),n.finally==null||n.finally.call(n)}),f=()=>new Promise((p,m)=>d.then(()=>u[0]==="reject"?m(u[1]):p(u[1])).catch(m));return typeof i!="string"&&typeof i!="number"?{unwrap:f}:Object.assign(i,{unwrap:f})},this.custom=(t,n)=>{const i=(n==null?void 0:n.id)||Qf++;return this.create({jsx:t(i),id:i,...n}),i},this.getActiveToasts=()=>this.toasts.filter(t=>!this.dismissedToasts.has(t.id)),this.subscribers=[],this.toasts=[],this.dismissedToasts=new Set}}const Nn=new p2,m2=(e,t)=>{const n=(t==null?void 0:t.id)||Qf++;return Nn.addToast({title:e,...t,id:n}),n},g2=e=>e&&typeof e=="object"&&"ok"in e&&typeof e.ok=="boolean"&&"status"in e&&typeof e.status=="number",v2=m2,y2=()=>Nn.toasts,w2=()=>Nn.getActiveToasts(),Jf=Object.assign(v2,{success:Nn.success,info:Nn.info,warning:Nn.warning,error:Nn.error,custom:Nn.custom,message:Nn.message,promise:Nn.promise,dismiss:Nn.dismiss,loading:Nn.loading},{getHistory:y2,getToasts:w2});o2("[data-sonner-toaster][dir=ltr],html[dir=ltr]{--toast-icon-margin-start:-3px;--toast-icon-margin-end:4px;--toast-svg-margin-start:-1px;--toast-svg-margin-end:0px;--toast-button-margin-start:auto;--toast-button-margin-end:0;--toast-close-button-start:0;--toast-close-button-end:unset;--toast-close-button-transform:translate(-35%, -35%)}[data-sonner-toaster][dir=rtl],html[dir=rtl]{--toast-icon-margin-start:4px;--toast-icon-margin-end:-3px;--toast-svg-margin-start:0px;--toast-svg-margin-end:-1px;--toast-button-margin-start:0;--toast-button-margin-end:auto;--toast-close-button-start:unset;--toast-close-button-end:0;--toast-close-button-transform:translate(35%, -35%)}[data-sonner-toaster]{position:fixed;width:var(--width);font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;--gray1:hsl(0, 0%, 99%);--gray2:hsl(0, 0%, 97.3%);--gray3:hsl(0, 0%, 95.1%);--gray4:hsl(0, 0%, 93%);--gray5:hsl(0, 0%, 90.9%);--gray6:hsl(0, 0%, 88.7%);--gray7:hsl(0, 0%, 85.8%);--gray8:hsl(0, 0%, 78%);--gray9:hsl(0, 0%, 56.1%);--gray10:hsl(0, 0%, 52.3%);--gray11:hsl(0, 0%, 43.5%);--gray12:hsl(0, 0%, 9%);--border-radius:8px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:0;z-index:999999999;transition:transform .4s ease}@media (hover:none) and (pointer:coarse){[data-sonner-toaster][data-lifted=true]{transform:none}}[data-sonner-toaster][data-x-position=right]{right:var(--offset-right)}[data-sonner-toaster][data-x-position=left]{left:var(--offset-left)}[data-sonner-toaster][data-x-position=center]{left:50%;transform:translateX(-50%)}[data-sonner-toaster][data-y-position=top]{top:var(--offset-top)}[data-sonner-toaster][data-y-position=bottom]{bottom:var(--offset-bottom)}[data-sonner-toast]{--y:translateY(100%);--lift-amount:calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);touch-action:none;transition:transform .4s,opacity .4s,height .4s,box-shadow .2s;box-sizing:border-box;outline:0;overflow-wrap:anywhere}[data-sonner-toast][data-styled=true]{padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0 4px 12px rgba(0,0,0,.1);width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}[data-sonner-toast]:focus-visible{box-shadow:0 4px 12px rgba(0,0,0,.1),0 0 0 2px rgba(0,0,0,.2)}[data-sonner-toast][data-y-position=top]{top:0;--y:translateY(-100%);--lift:1;--lift-amount:calc(1 * var(--gap))}[data-sonner-toast][data-y-position=bottom]{bottom:0;--y:translateY(100%);--lift:-1;--lift-amount:calc(var(--lift) * var(--gap))}[data-sonner-toast][data-styled=true] [data-description]{font-weight:400;line-height:1.4;color:#3f3f3f}[data-rich-colors=true][data-sonner-toast][data-styled=true] [data-description]{color:inherit}[data-sonner-toaster][data-sonner-theme=dark] [data-description]{color:#e8e8e8}[data-sonner-toast][data-styled=true] [data-title]{font-weight:500;line-height:1.5;color:inherit}[data-sonner-toast][data-styled=true] [data-icon]{display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:var(--toast-icon-margin-start);margin-right:var(--toast-icon-margin-end)}[data-sonner-toast][data-promise=true] [data-icon]>svg{opacity:0;transform:scale(.8);transform-origin:center;animation:sonner-fade-in .3s ease forwards}[data-sonner-toast][data-styled=true] [data-icon]>*{flex-shrink:0}[data-sonner-toast][data-styled=true] [data-icon] svg{margin-left:var(--toast-svg-margin-start);margin-right:var(--toast-svg-margin-end)}[data-sonner-toast][data-styled=true] [data-content]{display:flex;flex-direction:column;gap:2px}[data-sonner-toast][data-styled=true] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end);border:none;font-weight:500;cursor:pointer;outline:0;display:flex;align-items:center;flex-shrink:0;transition:opacity .4s,box-shadow .2s}[data-sonner-toast][data-styled=true] [data-button]:focus-visible{box-shadow:0 0 0 2px rgba(0,0,0,.4)}[data-sonner-toast][data-styled=true] [data-button]:first-of-type{margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end)}[data-sonner-toast][data-styled=true] [data-cancel]{color:var(--normal-text);background:rgba(0,0,0,.08)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast][data-styled=true] [data-cancel]{background:rgba(255,255,255,.3)}[data-sonner-toast][data-styled=true] [data-close-button]{position:absolute;left:var(--toast-close-button-start);right:var(--toast-close-button-end);top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;color:var(--gray12);background:var(--normal-bg);border:1px solid var(--gray4);transform:var(--toast-close-button-transform);border-radius:50%;cursor:pointer;z-index:1;transition:opacity .1s,background .2s,border-color .2s}[data-sonner-toast][data-styled=true] [data-close-button]:focus-visible{box-shadow:0 4px 12px rgba(0,0,0,.1),0 0 0 2px rgba(0,0,0,.2)}[data-sonner-toast][data-styled=true] [data-disabled=true]{cursor:not-allowed}[data-sonner-toast][data-styled=true]:hover [data-close-button]:hover{background:var(--gray2);border-color:var(--gray5)}[data-sonner-toast][data-swiping=true]::before{content:'';position:absolute;left:-100%;right:-100%;height:100%;z-index:-1}[data-sonner-toast][data-y-position=top][data-swiping=true]::before{bottom:50%;transform:scaleY(3) translateY(50%)}[data-sonner-toast][data-y-position=bottom][data-swiping=true]::before{top:50%;transform:scaleY(3) translateY(-50%)}[data-sonner-toast][data-swiping=false][data-removed=true]::before{content:'';position:absolute;inset:0;transform:scaleY(2)}[data-sonner-toast][data-expanded=true]::after{content:'';position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}[data-sonner-toast][data-mounted=true]{--y:translateY(0);opacity:1}[data-sonner-toast][data-expanded=false][data-front=false]{--scale:var(--toasts-before) * 0.05 + 1;--y:translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}[data-sonner-toast]>*{transition:opacity .4s}[data-sonner-toast][data-x-position=right]{right:0}[data-sonner-toast][data-x-position=left]{left:0}[data-sonner-toast][data-expanded=false][data-front=false][data-styled=true]>*{opacity:0}[data-sonner-toast][data-visible=false]{opacity:0;pointer-events:none}[data-sonner-toast][data-mounted=true][data-expanded=true]{--y:translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}[data-sonner-toast][data-removed=true][data-front=true][data-swipe-out=false]{--y:translateY(calc(var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=true]{--y:translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=false]{--y:translateY(40%);opacity:0;transition:transform .5s,opacity .2s}[data-sonner-toast][data-removed=true][data-front=false]::before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping=true]{transform:var(--y) translateY(var(--swipe-amount-y,0)) translateX(var(--swipe-amount-x,0));transition:none}[data-sonner-toast][data-swiped=true]{user-select:none}[data-sonner-toast][data-swipe-out=true][data-y-position=bottom],[data-sonner-toast][data-swipe-out=true][data-y-position=top]{animation-duration:.2s;animation-timing-function:ease-out;animation-fill-mode:forwards}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=left]{animation-name:swipe-out-left}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=right]{animation-name:swipe-out-right}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=up]{animation-name:swipe-out-up}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=down]{animation-name:swipe-out-down}@keyframes swipe-out-left{from{transform:var(--y) translateX(var(--swipe-amount-x));opacity:1}to{transform:var(--y) translateX(calc(var(--swipe-amount-x) - 100%));opacity:0}}@keyframes swipe-out-right{from{transform:var(--y) translateX(var(--swipe-amount-x));opacity:1}to{transform:var(--y) translateX(calc(var(--swipe-amount-x) + 100%));opacity:0}}@keyframes swipe-out-up{from{transform:var(--y) translateY(var(--swipe-amount-y));opacity:1}to{transform:var(--y) translateY(calc(var(--swipe-amount-y) - 100%));opacity:0}}@keyframes swipe-out-down{from{transform:var(--y) translateY(var(--swipe-amount-y));opacity:1}to{transform:var(--y) translateY(calc(var(--swipe-amount-y) + 100%));opacity:0}}@media (max-width:600px){[data-sonner-toaster]{position:fixed;right:var(--mobile-offset-right);left:var(--mobile-offset-left);width:100%}[data-sonner-toaster][dir=rtl]{left:calc(var(--mobile-offset-left) * -1)}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - var(--mobile-offset-left) * 2)}[data-sonner-toaster][data-x-position=left]{left:var(--mobile-offset-left)}[data-sonner-toaster][data-y-position=bottom]{bottom:var(--mobile-offset-bottom)}[data-sonner-toaster][data-y-position=top]{top:var(--mobile-offset-top)}[data-sonner-toaster][data-x-position=center]{left:var(--mobile-offset-left);right:var(--mobile-offset-right);transform:none}}[data-sonner-toaster][data-sonner-theme=light]{--normal-bg:#fff;--normal-border:var(--gray4);--normal-text:var(--gray12);--success-bg:hsl(143, 85%, 96%);--success-border:hsl(145, 92%, 87%);--success-text:hsl(140, 100%, 27%);--info-bg:hsl(208, 100%, 97%);--info-border:hsl(221, 91%, 93%);--info-text:hsl(210, 92%, 45%);--warning-bg:hsl(49, 100%, 97%);--warning-border:hsl(49, 91%, 84%);--warning-text:hsl(31, 92%, 45%);--error-bg:hsl(359, 100%, 97%);--error-border:hsl(359, 100%, 94%);--error-text:hsl(360, 100%, 45%)}[data-sonner-toaster][data-sonner-theme=light] [data-sonner-toast][data-invert=true]{--normal-bg:#000;--normal-border:hsl(0, 0%, 20%);--normal-text:var(--gray1)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast][data-invert=true]{--normal-bg:#fff;--normal-border:var(--gray3);--normal-text:var(--gray12)}[data-sonner-toaster][data-sonner-theme=dark]{--normal-bg:#000;--normal-bg-hover:hsl(0, 0%, 12%);--normal-border:hsl(0, 0%, 20%);--normal-border-hover:hsl(0, 0%, 25%);--normal-text:var(--gray1);--success-bg:hsl(150, 100%, 6%);--success-border:hsl(147, 100%, 12%);--success-text:hsl(150, 86%, 65%);--info-bg:hsl(215, 100%, 6%);--info-border:hsl(223, 43%, 17%);--info-text:hsl(216, 87%, 65%);--warning-bg:hsl(64, 100%, 6%);--warning-border:hsl(60, 100%, 9%);--warning-text:hsl(46, 87%, 65%);--error-bg:hsl(358, 76%, 10%);--error-border:hsl(357, 89%, 16%);--error-text:hsl(358, 100%, 81%)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast] [data-close-button]{background:var(--normal-bg);border-color:var(--normal-border);color:var(--normal-text)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast] [data-close-button]:hover{background:var(--normal-bg-hover);border-color:var(--normal-border-hover)}[data-rich-colors=true][data-sonner-toast][data-type=success]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=success] [data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=info]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=info] [data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning] [data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=error]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}[data-rich-colors=true][data-sonner-toast][data-type=error] [data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}.sonner-loading-wrapper{--size:16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible=false]{transform-origin:center;animation:sonner-fade-out .2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:first-child{animation-delay:-1.2s;transform:rotate(.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(.8)}100%{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(.8)}}@keyframes sonner-spin{0%{opacity:1}100%{opacity:.15}}@media (prefers-reduced-motion){.sonner-loading-bar,[data-sonner-toast],[data-sonner-toast]>*{transition:none!important;animation:none!important}}.sonner-loader{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);transform-origin:center;transition:opacity .2s,transform .2s}.sonner-loader[data-visible=false]{opacity:0;transform:scale(.8) translate(-50%,-50%)}");function au(e){return e.label!==void 0}const x2=3,S2="24px",b2="16px",Dy=4e3,k2=356,E2=14,_2=45,C2=200;function Tr(...e){return e.filter(Boolean).join(" ")}function P2(e){const[t,n]=e.split("-"),i=[];return t&&i.push(t),n&&i.push(n),i}const T2=e=>{var t,n,i,s,l,u,d,f,p;const{invert:m,toast:g,unstyled:y,interacting:b,setHeights:_,visibleToasts:k,heights:C,index:N,toasts:M,expanded:O,removeToast:B,defaultRichColors:Z,closeButton:re,style:R,cancelButtonStyle:I,actionButtonStyle:ae,className:le="",descriptionClassName:Ie="",duration:he,position:ge,gap:Ne,expandByDefault:Le,classNames:ve,icons:ue,closeButtonAriaLabel:z="Close toast"}=e,[fe,ee]=G.useState(null),[j,K]=G.useState(null),[q,ce]=G.useState(!1),[me,je]=G.useState(!1),[Ee,Se]=G.useState(!1),[He,st]=G.useState(!1),[on,et]=G.useState(!1),[vn,On]=G.useState(0),[jr,yn]=G.useState(0),zn=G.useRef(g.duration||he||Dy),ro=G.useRef(null),Wt=G.useRef(null),P=N===0,V=N+1<=k,H=g.type,de=g.dismissible!==!1,oe=g.className||"",te=g.descriptionClassName||"",be=G.useMemo(()=>C.findIndex($e=>$e.toastId===g.id)||0,[C,g.id]),Ke=G.useMemo(()=>{var $e;return($e=g.closeButton)!=null?$e:re},[g.closeButton,re]),Ze=G.useMemo(()=>g.duration||he||Dy,[g.duration,he]),at=G.useRef(0),zt=G.useRef(0),Pt=G.useRef(0),Gn=G.useRef(null),[sn,ur]=ge.split("-"),Lr=G.useMemo(()=>C.reduce(($e,bt,Tt)=>Tt>=be?$e:$e+bt.height,0),[C,be]),Yn=h2(),Or=g.invert||m,In=H==="loading";zt.current=G.useMemo(()=>be*Ne+Lr,[be,Lr]),G.useEffect(()=>{zn.current=Ze},[Ze]),G.useEffect(()=>{ce(!0)},[]),G.useEffect(()=>{const $e=Wt.current;if($e){const bt=$e.getBoundingClientRect().height;return yn(bt),_(Tt=>[{toastId:g.id,height:bt,position:g.position},...Tt]),()=>_(Tt=>Tt.filter(Mt=>Mt.toastId!==g.id))}},[_,g.id]),G.useLayoutEffect(()=>{if(!q)return;const $e=Wt.current,bt=$e.style.height;$e.style.height="auto";const Tt=$e.getBoundingClientRect().height;$e.style.height=bt,yn(Tt),_(Mt=>Mt.find(Rt=>Rt.toastId===g.id)?Mt.map(Rt=>Rt.toastId===g.id?{...Rt,height:Tt}:Rt):[{toastId:g.id,height:Tt,position:g.position},...Mt])},[q,g.title,g.description,_,g.id,g.jsx,g.action,g.cancel]);const an=G.useCallback(()=>{je(!0),On(zt.current),_($e=>$e.filter(bt=>bt.toastId!==g.id)),setTimeout(()=>{B(g)},C2)},[g,B,_,zt]);G.useEffect(()=>{if(g.promise&&H==="loading"||g.duration===1/0||g.type==="loading")return;let $e;return O||b||Yn?(()=>{if(Pt.current<at.current){const Mt=new Date().getTime()-at.current;zn.current=zn.current-Mt}Pt.current=new Date().getTime()})():(()=>{zn.current!==1/0&&(at.current=new Date().getTime(),$e=setTimeout(()=>{g.onAutoClose==null||g.onAutoClose.call(g,g),an()},zn.current))})(),()=>clearTimeout($e)},[O,b,g,H,Yn,an]),G.useEffect(()=>{g.delete&&(an(),g.onDismiss==null||g.onDismiss.call(g,g))},[an,g.delete]);function oo(){var $e;if(ue!=null&&ue.loading){var bt;return G.createElement("div",{className:Tr(ve==null?void 0:ve.loader,g==null||(bt=g.classNames)==null?void 0:bt.loader,"sonner-loader"),"data-visible":H==="loading"},ue.loading)}return G.createElement(a2,{className:Tr(ve==null?void 0:ve.loader,g==null||($e=g.classNames)==null?void 0:$e.loader),visible:H==="loading"})}const Xn=g.icon||(ue==null?void 0:ue[H])||i2(H);var Fn,Fo;return G.createElement("li",{tabIndex:0,ref:Wt,className:Tr(le,oe,ve==null?void 0:ve.toast,g==null||(t=g.classNames)==null?void 0:t.toast,ve==null?void 0:ve.default,ve==null?void 0:ve[H],g==null||(n=g.classNames)==null?void 0:n[H]),"data-sonner-toast":"","data-rich-colors":(Fn=g.richColors)!=null?Fn:Z,"data-styled":!(g.jsx||g.unstyled||y),"data-mounted":q,"data-promise":!!g.promise,"data-swiped":on,"data-removed":me,"data-visible":V,"data-y-position":sn,"data-x-position":ur,"data-index":N,"data-front":P,"data-swiping":Ee,"data-dismissible":de,"data-type":H,"data-invert":Or,"data-swipe-out":He,"data-swipe-direction":j,"data-expanded":!!(O||Le&&q),"data-testid":g.testId,style:{"--index":N,"--toasts-before":N,"--z-index":M.length-N,"--offset":`${me?vn:zt.current}px`,"--initial-height":Le?"auto":`${jr}px`,...R,...g.style},onDragEnd:()=>{Se(!1),ee(null),Gn.current=null},onPointerDown:$e=>{$e.button!==2&&(In||!de||(ro.current=new Date,On(zt.current),$e.target.setPointerCapture($e.pointerId),$e.target.tagName!=="BUTTON"&&(Se(!0),Gn.current={x:$e.clientX,y:$e.clientY})))},onPointerUp:()=>{var $e,bt,Tt;if(He||!de)return;Gn.current=null;const Mt=Number((($e=Wt.current)==null?void 0:$e.style.getPropertyValue("--swipe-amount-x").replace("px",""))||0),Vn=Number(((bt=Wt.current)==null?void 0:bt.style.getPropertyValue("--swipe-amount-y").replace("px",""))||0),Rt=new Date().getTime()-((Tt=ro.current)==null?void 0:Tt.getTime()),It=fe==="x"?Mt:Vn,T=Math.abs(It)/Rt;if(Math.abs(It)>=_2||T>.11){On(zt.current),g.onDismiss==null||g.onDismiss.call(g,g),K(fe==="x"?Mt>0?"right":"left":Vn>0?"down":"up"),an(),st(!0);return}else{var L,U;(L=Wt.current)==null||L.style.setProperty("--swipe-amount-x","0px"),(U=Wt.current)==null||U.style.setProperty("--swipe-amount-y","0px")}et(!1),Se(!1),ee(null)},onPointerMove:$e=>{var bt,Tt,Mt;if(!Gn.current||!de||((bt=window.getSelection())==null?void 0:bt.toString().length)>0)return;const Rt=$e.clientY-Gn.current.y,It=$e.clientX-Gn.current.x;var T;const L=(T=e.swipeDirections)!=null?T:P2(ge);!fe&&(Math.abs(It)>1||Math.abs(Rt)>1)&&ee(Math.abs(It)>Math.abs(Rt)?"x":"y");let U={x:0,y:0};const Y=se=>1/(1.5+Math.abs(se)/20);if(fe==="y"){if(L.includes("top")||L.includes("bottom"))if(L.includes("top")&&Rt<0||L.includes("bottom")&&Rt>0)U.y=Rt;else{const se=Rt*Y(Rt);U.y=Math.abs(se)<Math.abs(Rt)?se:Rt}}else if(fe==="x"&&(L.includes("left")||L.includes("right")))if(L.includes("left")&&It<0||L.includes("right")&&It>0)U.x=It;else{const se=It*Y(It);U.x=Math.abs(se)<Math.abs(It)?se:It}(Math.abs(U.x)>0||Math.abs(U.y)>0)&&et(!0),(Tt=Wt.current)==null||Tt.style.setProperty("--swipe-amount-x",`${U.x}px`),(Mt=Wt.current)==null||Mt.style.setProperty("--swipe-amount-y",`${U.y}px`)}},Ke&&!g.jsx&&H!=="loading"?G.createElement("button",{"aria-label":z,"data-disabled":In,"data-close-button":!0,onClick:In||!de?()=>{}:()=>{an(),g.onDismiss==null||g.onDismiss.call(g,g)},className:Tr(ve==null?void 0:ve.closeButton,g==null||(i=g.classNames)==null?void 0:i.closeButton)},(Fo=ue==null?void 0:ue.close)!=null?Fo:f2):null,(H||g.icon||g.promise)&&g.icon!==null&&((ue==null?void 0:ue[H])!==null||g.icon)?G.createElement("div",{"data-icon":"",className:Tr(ve==null?void 0:ve.icon,g==null||(s=g.classNames)==null?void 0:s.icon)},g.promise||g.type==="loading"&&!g.icon?g.icon||oo():null,g.type!=="loading"?Xn:null):null,G.createElement("div",{"data-content":"",className:Tr(ve==null?void 0:ve.content,g==null||(l=g.classNames)==null?void 0:l.content)},G.createElement("div",{"data-title":"",className:Tr(ve==null?void 0:ve.title,g==null||(u=g.classNames)==null?void 0:u.title)},g.jsx?g.jsx:typeof g.title=="function"?g.title():g.title),g.description?G.createElement("div",{"data-description":"",className:Tr(Ie,te,ve==null?void 0:ve.description,g==null||(d=g.classNames)==null?void 0:d.description)},typeof g.description=="function"?g.description():g.description):null),G.isValidElement(g.cancel)?g.cancel:g.cancel&&au(g.cancel)?G.createElement("button",{"data-button":!0,"data-cancel":!0,style:g.cancelButtonStyle||I,onClick:$e=>{au(g.cancel)&&de&&(g.cancel.onClick==null||g.cancel.onClick.call(g.cancel,$e),an())},className:Tr(ve==null?void 0:ve.cancelButton,g==null||(f=g.classNames)==null?void 0:f.cancelButton)},g.cancel.label):null,G.isValidElement(g.action)?g.action:g.action&&au(g.action)?G.createElement("button",{"data-button":!0,"data-action":!0,style:g.actionButtonStyle||ae,onClick:$e=>{au(g.action)&&(g.action.onClick==null||g.action.onClick.call(g.action,$e),!$e.defaultPrevented&&an())},className:Tr(ve==null?void 0:ve.actionButton,g==null||(p=g.classNames)==null?void 0:p.actionButton)},g.action.label):null)};function Ny(){if(typeof window>"u"||typeof document>"u")return"ltr";const e=document.documentElement.getAttribute("dir");return e==="auto"||!e?window.getComputedStyle(document.documentElement).direction:e}function R2(e,t){const n={};return[e,t].forEach((i,s)=>{const l=s===1,u=l?"--mobile-offset":"--offset",d=l?b2:S2;function f(p){["top","right","bottom","left"].forEach(m=>{n[`${u}-${m}`]=typeof p=="number"?`${p}px`:p})}typeof i=="number"||typeof i=="string"?f(i):typeof i=="object"?["top","right","bottom","left"].forEach(p=>{i[p]===void 0?n[`${u}-${p}`]=d:n[`${u}-${p}`]=typeof i[p]=="number"?`${i[p]}px`:i[p]}):f(d)}),n}const D2=G.forwardRef(function(t,n){const{id:i,invert:s,position:l="bottom-right",hotkey:u=["altKey","KeyT"],expand:d,closeButton:f,className:p,offset:m,mobileOffset:g,theme:y="light",richColors:b,duration:_,style:k,visibleToasts:C=x2,toastOptions:N,dir:M=Ny(),gap:O=E2,icons:B,containerAriaLabel:Z="Notifications"}=t,[re,R]=G.useState([]),I=G.useMemo(()=>i?re.filter(q=>q.toasterId===i):re.filter(q=>!q.toasterId),[re,i]),ae=G.useMemo(()=>Array.from(new Set([l].concat(I.filter(q=>q.position).map(q=>q.position)))),[I,l]),[le,Ie]=G.useState([]),[he,ge]=G.useState(!1),[Ne,Le]=G.useState(!1),[ve,ue]=G.useState(y!=="system"?y:typeof window<"u"&&window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"),z=G.useRef(null),fe=u.join("+").replace(/Key/g,"").replace(/Digit/g,""),ee=G.useRef(null),j=G.useRef(!1),K=G.useCallback(q=>{R(ce=>{var me;return(me=ce.find(je=>je.id===q.id))!=null&&me.delete||Nn.dismiss(q.id),ce.filter(({id:je})=>je!==q.id)})},[]);return G.useEffect(()=>Nn.subscribe(q=>{if(q.dismiss){requestAnimationFrame(()=>{R(ce=>ce.map(me=>me.id===q.id?{...me,delete:!0}:me))});return}setTimeout(()=>{Th.flushSync(()=>{R(ce=>{const me=ce.findIndex(je=>je.id===q.id);return me!==-1?[...ce.slice(0,me),{...ce[me],...q},...ce.slice(me+1)]:[q,...ce]})})})}),[re]),G.useEffect(()=>{if(y!=="system"){ue(y);return}if(y==="system"&&(window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?ue("dark"):ue("light")),typeof window>"u")return;const q=window.matchMedia("(prefers-color-scheme: dark)");try{q.addEventListener("change",({matches:ce})=>{ue(ce?"dark":"light")})}catch{q.addListener(({matches:me})=>{try{ue(me?"dark":"light")}catch(je){console.error(je)}})}},[y]),G.useEffect(()=>{re.length<=1&&ge(!1)},[re]),G.useEffect(()=>{const q=ce=>{var me;if(u.every(Se=>ce[Se]||ce.code===Se)){var Ee;ge(!0),(Ee=z.current)==null||Ee.focus()}ce.code==="Escape"&&(document.activeElement===z.current||(me=z.current)!=null&&me.contains(document.activeElement))&&ge(!1)};return document.addEventListener("keydown",q),()=>document.removeEventListener("keydown",q)},[u]),G.useEffect(()=>{if(z.current)return()=>{ee.current&&(ee.current.focus({preventScroll:!0}),ee.current=null,j.current=!1)}},[z.current]),G.createElement("section",{ref:n,"aria-label":`${Z} ${fe}`,tabIndex:-1,"aria-live":"polite","aria-relevant":"additions text","aria-atomic":"false",suppressHydrationWarning:!0},ae.map((q,ce)=>{var me;const[je,Ee]=q.split("-");return I.length?G.createElement("ol",{key:q,dir:M==="auto"?Ny():M,tabIndex:-1,ref:z,className:p,"data-sonner-toaster":!0,"data-sonner-theme":ve,"data-y-position":je,"data-x-position":Ee,style:{"--front-toast-height":`${((me=le[0])==null?void 0:me.height)||0}px`,"--width":`${k2}px`,"--gap":`${O}px`,...k,...R2(m,g)},onBlur:Se=>{j.current&&!Se.currentTarget.contains(Se.relatedTarget)&&(j.current=!1,ee.current&&(ee.current.focus({preventScroll:!0}),ee.current=null))},onFocus:Se=>{Se.target instanceof HTMLElement&&Se.target.dataset.dismissible==="false"||j.current||(j.current=!0,ee.current=Se.relatedTarget)},onMouseEnter:()=>ge(!0),onMouseMove:()=>ge(!0),onMouseLeave:()=>{Ne||ge(!1)},onDragEnd:()=>ge(!1),onPointerDown:Se=>{Se.target instanceof HTMLElement&&Se.target.dataset.dismissible==="false"||Le(!0)},onPointerUp:()=>Le(!1)},I.filter(Se=>!Se.position&&ce===0||Se.position===q).map((Se,He)=>{var st,on;return G.createElement(T2,{key:Se.id,icons:B,index:He,toast:Se,defaultRichColors:b,duration:(st=N==null?void 0:N.duration)!=null?st:_,className:N==null?void 0:N.className,descriptionClassName:N==null?void 0:N.descriptionClassName,invert:s,visibleToasts:C,closeButton:(on=N==null?void 0:N.closeButton)!=null?on:f,interacting:Ne,position:q,style:N==null?void 0:N.style,unstyled:N==null?void 0:N.unstyled,classNames:N==null?void 0:N.classNames,cancelButtonStyle:N==null?void 0:N.cancelButtonStyle,actionButtonStyle:N==null?void 0:N.actionButtonStyle,closeButtonAriaLabel:N==null?void 0:N.closeButtonAriaLabel,removeToast:K,toasts:I.filter(et=>et.position==Se.position),heights:le.filter(et=>et.position==Se.position),setHeights:Ie,expandByDefault:d,gap:O,expanded:he,swipeDirections:t.swipeDirections})})):null}))}),N2=DN({name:ou().min(2,{message:"Name must be at least 2 characters."}),phone:ou().min(10,{message:"Please enter a valid phone number."}),projectName:ou().min(2,{message:"Project name must be at least 2 characters."}),aboutProject:ou().min(10,{message:"Please provide some details about your project."})});function Ox(){const[e,t]=S.useState(!1),n=GP({resolver:ID(N2),defaultValues:{name:"",phone:"",projectName:"",aboutProject:""}});async function i(s){t(!0);try{const l=await fetch("/api/contact",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)});if(!l.ok)throw new Error("Something went wrong. Please try again.");const u=await l.json();if(u.success)Jf.success("Message sent successfully!"),n.reset();else throw new Error(u.error||"An unknown error occurred.")}catch(l){const u=l instanceof Error?l.message:"An unexpected error occurred.";Jf.error(u)}finally{t(!1)}}return x.jsx(n2,{...n,children:x.jsxs("form",{onSubmit:n.handleSubmit(i),className:"space-y-6",children:[x.jsx(su,{control:n.control,name:"name",render:({field:s})=>x.jsxs(la,{children:[x.jsx(ua,{children:"Name"}),x.jsx(ca,{children:x.jsx(vu,{placeholder:"John Doe",...s})}),x.jsx(da,{})]})}),x.jsx(su,{control:n.control,name:"phone",render:({field:s})=>x.jsxs(la,{children:[x.jsx(ua,{children:"Phone Number"}),x.jsx(ca,{children:x.jsx(vu,{placeholder:"+1 234 567 890",...s})}),x.jsx(da,{})]})}),x.jsx(su,{control:n.control,name:"projectName",render:({field:s})=>x.jsxs(la,{children:[x.jsx(ua,{children:"Project Name"}),x.jsx(ca,{children:x.jsx(vu,{placeholder:"My Awesome Project",...s})}),x.jsx(da,{})]})}),x.jsx(su,{control:n.control,name:"aboutProject",render:({field:s})=>x.jsxs(la,{children:[x.jsx(ua,{children:"About Project"}),x.jsx(ca,{children:x.jsx(Lx,{placeholder:"Tell me a little bit about your project...",className:"resize-none",...s})}),x.jsx(da,{})]})}),x.jsx(Mn,{type:"submit",className:"w-full bg-indigo-600 hover:bg-indigo-700 text-white",disabled:e,children:e?x.jsxs(x.Fragment,{children:[x.jsx(wC,{className:"mr-2 h-4 w-4 animate-spin"}),"Sending..."]}):"Send Message"})]})})}const zx=S.createContext({});function A2(e){const t=S.useRef(null);return t.current===null&&(t.current=e()),t.current}const Jh=typeof window<"u",M2=Jh?S.useLayoutEffect:S.useEffect,qh=S.createContext(null);function ep(e,t){e.indexOf(t)===-1&&e.push(t)}function tp(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}const eo=(e,t,n)=>n>t?t:n<e?e:n;let np=()=>{};const to={},Ix=e=>/^-?(?:\d+(?:\.\d+)?|\.\d+)$/u.test(e);function Fx(e){return typeof e=="object"&&e!==null}const Vx=e=>/^0[^.\s]+$/u.test(e);function rp(e){let t;return()=>(t===void 0&&(t=e()),t)}const ar=e=>e,j2=(e,t)=>n=>t(e(n)),$a=(...e)=>e.reduce(j2),Ta=(e,t,n)=>{const i=t-e;return i===0?1:(n-e)/i};class op{constructor(){this.subscriptions=[]}add(t){return ep(this.subscriptions,t),()=>tp(this.subscriptions,t)}notify(t,n,i){const s=this.subscriptions.length;if(s)if(s===1)this.subscriptions[0](t,n,i);else for(let l=0;l<s;l++){const u=this.subscriptions[l];u&&u(t,n,i)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}const Dr=e=>e*1e3,sr=e=>e/1e3;function $x(e,t){return t?e*(1e3/t):0}const Ux=(e,t,n)=>(((1-3*n+3*t)*e+(3*n-6*t))*e+3*t)*e,L2=1e-7,O2=12;function z2(e,t,n,i,s){let l,u,d=0;do u=t+(n-t)/2,l=Ux(u,i,s)-e,l>0?n=u:t=u;while(Math.abs(l)>L2&&++d<O2);return u}function Ua(e,t,n,i){if(e===t&&n===i)return ar;const s=l=>z2(l,0,1,e,n);return l=>l===0||l===1?l:Ux(s(l),t,i)}const Bx=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,Wx=e=>t=>1-e(1-t),Zx=Ua(.33,1.53,.69,.99),ip=Wx(Zx),Hx=Bx(ip),Kx=e=>(e*=2)<1?.5*ip(e):.5*(2-Math.pow(2,-10*(e-1))),sp=e=>1-Math.sin(Math.acos(e)),Gx=Wx(sp),Yx=Bx(sp),I2=Ua(.42,0,1,1),F2=Ua(0,0,.58,1),Xx=Ua(.42,0,.58,1),V2=e=>Array.isArray(e)&&typeof e[0]!="number",Qx=e=>Array.isArray(e)&&typeof e[0]=="number",$2={linear:ar,easeIn:I2,easeInOut:Xx,easeOut:F2,circIn:sp,circInOut:Yx,circOut:Gx,backIn:ip,backInOut:Hx,backOut:Zx,anticipate:Kx},U2=e=>typeof e=="string",Ay=e=>{if(Qx(e)){np(e.length===4);const[t,n,i,s]=e;return Ua(t,n,i,s)}else if(U2(e))return $2[e];return e},lu=["setup","read","resolveKeyframes","preUpdate","update","preRender","render","postRender"];function B2(e,t){let n=new Set,i=new Set,s=!1,l=!1;const u=new WeakSet;let d={delta:0,timestamp:0,isProcessing:!1};function f(m){u.has(m)&&(p.schedule(m),e()),m(d)}const p={schedule:(m,g=!1,y=!1)=>{const _=y&&s?n:i;return g&&u.add(m),_.has(m)||_.add(m),m},cancel:m=>{i.delete(m),u.delete(m)},process:m=>{if(d=m,s){l=!0;return}s=!0,[n,i]=[i,n],n.forEach(f),n.clear(),s=!1,l&&(l=!1,p.process(m))}};return p}const W2=40;function Jx(e,t){let n=!1,i=!0;const s={delta:0,timestamp:0,isProcessing:!1},l=()=>n=!0,u=lu.reduce((O,B)=>(O[B]=B2(l),O),{}),{setup:d,read:f,resolveKeyframes:p,preUpdate:m,update:g,preRender:y,render:b,postRender:_}=u,k=()=>{const O=to.useManualTiming?s.timestamp:performance.now();n=!1,to.useManualTiming||(s.delta=i?1e3/60:Math.max(Math.min(O-s.timestamp,W2),1)),s.timestamp=O,s.isProcessing=!0,d.process(s),f.process(s),p.process(s),m.process(s),g.process(s),y.process(s),b.process(s),_.process(s),s.isProcessing=!1,n&&t&&(i=!1,e(k))},C=()=>{n=!0,i=!0,s.isProcessing||e(k)};return{schedule:lu.reduce((O,B)=>{const Z=u[B];return O[B]=(re,R=!1,I=!1)=>(n||C(),Z.schedule(re,R,I)),O},{}),cancel:O=>{for(let B=0;B<lu.length;B++)u[lu[B]].cancel(O)},state:s,steps:u}}const{schedule:xt,cancel:Mo,state:dn,steps:lf}=Jx(typeof requestAnimationFrame<"u"?requestAnimationFrame:ar,!0);let yu;function Z2(){yu=void 0}const Ln={now:()=>(yu===void 0&&Ln.set(dn.isProcessing||to.useManualTiming?dn.timestamp:performance.now()),yu),set:e=>{yu=e,queueMicrotask(Z2)}},qx=e=>t=>typeof t=="string"&&t.startsWith(e),ap=qx("--"),H2=qx("var(--"),lp=e=>H2(e)?K2.test(e.split("/*")[0].trim()):!1,K2=/var\(--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)$/iu,gs={test:e=>typeof e=="number",parse:parseFloat,transform:e=>e},Ra={...gs,transform:e=>eo(0,1,e)},uu={...gs,default:1},ma=e=>Math.round(e*1e5)/1e5,up=/-?(?:\d+(?:\.\d+)?|\.\d+)/gu;function G2(e){return e==null}const Y2=/^(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))$/iu,cp=(e,t)=>n=>!!(typeof n=="string"&&Y2.test(n)&&n.startsWith(e)||t&&!G2(n)&&Object.prototype.hasOwnProperty.call(n,t)),e1=(e,t,n)=>i=>{if(typeof i!="string")return i;const[s,l,u,d]=i.match(up);return{[e]:parseFloat(s),[t]:parseFloat(l),[n]:parseFloat(u),alpha:d!==void 0?parseFloat(d):1}},X2=e=>eo(0,255,e),uf={...gs,transform:e=>Math.round(X2(e))},ai={test:cp("rgb","red"),parse:e1("red","green","blue"),transform:({red:e,green:t,blue:n,alpha:i=1})=>"rgba("+uf.transform(e)+", "+uf.transform(t)+", "+uf.transform(n)+", "+ma(Ra.transform(i))+")"};function Q2(e){let t="",n="",i="",s="";return e.length>5?(t=e.substring(1,3),n=e.substring(3,5),i=e.substring(5,7),s=e.substring(7,9)):(t=e.substring(1,2),n=e.substring(2,3),i=e.substring(3,4),s=e.substring(4,5),t+=t,n+=n,i+=i,s+=s),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(i,16),alpha:s?parseInt(s,16)/255:1}}const qf={test:cp("#"),parse:Q2,transform:ai.transform},Ba=e=>({test:t=>typeof t=="string"&&t.endsWith(e)&&t.split(" ").length===1,parse:parseFloat,transform:t=>`${t}${e}`}),To=Ba("deg"),Nr=Ba("%"),Ve=Ba("px"),J2=Ba("vh"),q2=Ba("vw"),My={...Nr,parse:e=>Nr.parse(e)/100,transform:e=>Nr.transform(e*100)},Ji={test:cp("hsl","hue"),parse:e1("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:n,alpha:i=1})=>"hsla("+Math.round(e)+", "+Nr.transform(ma(t))+", "+Nr.transform(ma(n))+", "+ma(Ra.transform(i))+")"},Ut={test:e=>ai.test(e)||qf.test(e)||Ji.test(e),parse:e=>ai.test(e)?ai.parse(e):Ji.test(e)?Ji.parse(e):qf.parse(e),transform:e=>typeof e=="string"?e:e.hasOwnProperty("red")?ai.transform(e):Ji.transform(e),getAnimatableNone:e=>{const t=Ut.parse(e);return t.alpha=0,Ut.transform(t)}},eA=/(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))/giu;function tA(e){var t,n;return isNaN(e)&&typeof e=="string"&&(((t=e.match(up))==null?void 0:t.length)||0)+(((n=e.match(eA))==null?void 0:n.length)||0)>0}const t1="number",n1="color",nA="var",rA="var(",jy="${}",oA=/var\s*\(\s*--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)|#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\)|-?(?:\d+(?:\.\d+)?|\.\d+)/giu;function Da(e){const t=e.toString(),n=[],i={color:[],number:[],var:[]},s=[];let l=0;const d=t.replace(oA,f=>(Ut.test(f)?(i.color.push(l),s.push(n1),n.push(Ut.parse(f))):f.startsWith(rA)?(i.var.push(l),s.push(nA),n.push(f)):(i.number.push(l),s.push(t1),n.push(parseFloat(f))),++l,jy)).split(jy);return{values:n,split:d,indexes:i,types:s}}function r1(e){return Da(e).values}function o1(e){const{split:t,types:n}=Da(e),i=t.length;return s=>{let l="";for(let u=0;u<i;u++)if(l+=t[u],s[u]!==void 0){const d=n[u];d===t1?l+=ma(s[u]):d===n1?l+=Ut.transform(s[u]):l+=s[u]}return l}}const iA=e=>typeof e=="number"?0:Ut.test(e)?Ut.getAnimatableNone(e):e;function sA(e){const t=r1(e);return o1(e)(t.map(iA))}const jo={test:tA,parse:r1,createTransformer:o1,getAnimatableNone:sA};function cf(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+(t-e)*6*n:n<1/2?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function aA({hue:e,saturation:t,lightness:n,alpha:i}){e/=360,t/=100,n/=100;let s=0,l=0,u=0;if(!t)s=l=u=n;else{const d=n<.5?n*(1+t):n+t-n*t,f=2*n-d;s=cf(f,d,e+1/3),l=cf(f,d,e),u=cf(f,d,e-1/3)}return{red:Math.round(s*255),green:Math.round(l*255),blue:Math.round(u*255),alpha:i}}function Fu(e,t){return n=>n>0?t:e}const _t=(e,t,n)=>e+(t-e)*n,df=(e,t,n)=>{const i=e*e,s=n*(t*t-i)+i;return s<0?0:Math.sqrt(s)},lA=[qf,ai,Ji],uA=e=>lA.find(t=>t.test(e));function Ly(e){const t=uA(e);if(!t)return!1;let n=t.parse(e);return t===Ji&&(n=aA(n)),n}const Oy=(e,t)=>{const n=Ly(e),i=Ly(t);if(!n||!i)return Fu(e,t);const s={...n};return l=>(s.red=df(n.red,i.red,l),s.green=df(n.green,i.green,l),s.blue=df(n.blue,i.blue,l),s.alpha=_t(n.alpha,i.alpha,l),ai.transform(s))},eh=new Set(["none","hidden"]);function cA(e,t){return eh.has(e)?n=>n<=0?e:t:n=>n>=1?t:e}function dA(e,t){return n=>_t(e,t,n)}function dp(e){return typeof e=="number"?dA:typeof e=="string"?lp(e)?Fu:Ut.test(e)?Oy:pA:Array.isArray(e)?i1:typeof e=="object"?Ut.test(e)?Oy:fA:Fu}function i1(e,t){const n=[...e],i=n.length,s=e.map((l,u)=>dp(l)(l,t[u]));return l=>{for(let u=0;u<i;u++)n[u]=s[u](l);return n}}function fA(e,t){const n={...e,...t},i={};for(const s in n)e[s]!==void 0&&t[s]!==void 0&&(i[s]=dp(e[s])(e[s],t[s]));return s=>{for(const l in i)n[l]=i[l](s);return n}}function hA(e,t){const n=[],i={color:0,var:0,number:0};for(let s=0;s<t.values.length;s++){const l=t.types[s],u=e.indexes[l][i[l]],d=e.values[u]??0;n[s]=d,i[l]++}return n}const pA=(e,t)=>{const n=jo.createTransformer(t),i=Da(e),s=Da(t);return i.indexes.var.length===s.indexes.var.length&&i.indexes.color.length===s.indexes.color.length&&i.indexes.number.length>=s.indexes.number.length?eh.has(e)&&!s.values.length||eh.has(t)&&!i.values.length?cA(e,t):$a(i1(hA(i,s),s.values),n):Fu(e,t)};function s1(e,t,n){return typeof e=="number"&&typeof t=="number"&&typeof n=="number"?_t(e,t,n):dp(e)(e,t)}const mA=e=>{const t=({timestamp:n})=>e(n);return{start:(n=!0)=>xt.update(t,n),stop:()=>Mo(t),now:()=>dn.isProcessing?dn.timestamp:Ln.now()}},a1=(e,t,n=10)=>{let i="";const s=Math.max(Math.round(t/n),2);for(let l=0;l<s;l++)i+=Math.round(e(l/(s-1))*1e4)/1e4+", ";return`linear(${i.substring(0,i.length-2)})`},Vu=2e4;function fp(e){let t=0;const n=50;let i=e.next(t);for(;!i.done&&t<Vu;)t+=n,i=e.next(t);return t>=Vu?1/0:t}function gA(e,t=100,n){const i=n({...e,keyframes:[0,t]}),s=Math.min(fp(i),Vu);return{type:"keyframes",ease:l=>i.next(s*l).value/t,duration:sr(s)}}const vA=5;function l1(e,t,n){const i=Math.max(t-vA,0);return $x(n-e(i),t-i)}const Nt={stiffness:100,damping:10,mass:1,velocity:0,duration:800,bounce:.3,visualDuration:.3,restSpeed:{granular:.01,default:2},restDelta:{granular:.005,default:.5},minDuration:.01,maxDuration:10,minDamping:.05,maxDamping:1},ff=.001;function yA({duration:e=Nt.duration,bounce:t=Nt.bounce,velocity:n=Nt.velocity,mass:i=Nt.mass}){let s,l,u=1-t;u=eo(Nt.minDamping,Nt.maxDamping,u),e=eo(Nt.minDuration,Nt.maxDuration,sr(e)),u<1?(s=p=>{const m=p*u,g=m*e,y=m-n,b=th(p,u),_=Math.exp(-g);return ff-y/b*_},l=p=>{const g=p*u*e,y=g*n+n,b=Math.pow(u,2)*Math.pow(p,2)*e,_=Math.exp(-g),k=th(Math.pow(p,2),u);return(-s(p)+ff>0?-1:1)*((y-b)*_)/k}):(s=p=>{const m=Math.exp(-p*e),g=(p-n)*e+1;return-ff+m*g},l=p=>{const m=Math.exp(-p*e),g=(n-p)*(e*e);return m*g});const d=5/e,f=xA(s,l,d);if(e=Dr(e),isNaN(f))return{stiffness:Nt.stiffness,damping:Nt.damping,duration:e};{const p=Math.pow(f,2)*i;return{stiffness:p,damping:u*2*Math.sqrt(i*p),duration:e}}}const wA=12;function xA(e,t,n){let i=n;for(let s=1;s<wA;s++)i=i-e(i)/t(i);return i}function th(e,t){return e*Math.sqrt(1-t*t)}const SA=["duration","bounce"],bA=["stiffness","damping","mass"];function zy(e,t){return t.some(n=>e[n]!==void 0)}function kA(e){let t={velocity:Nt.velocity,stiffness:Nt.stiffness,damping:Nt.damping,mass:Nt.mass,isResolvedFromDuration:!1,...e};if(!zy(e,bA)&&zy(e,SA))if(e.visualDuration){const n=e.visualDuration,i=2*Math.PI/(n*1.2),s=i*i,l=2*eo(.05,1,1-(e.bounce||0))*Math.sqrt(s);t={...t,mass:Nt.mass,stiffness:s,damping:l}}else{const n=yA(e);t={...t,...n,mass:Nt.mass},t.isResolvedFromDuration=!0}return t}function $u(e=Nt.visualDuration,t=Nt.bounce){const n=typeof e!="object"?{visualDuration:e,keyframes:[0,1],bounce:t}:e;let{restSpeed:i,restDelta:s}=n;const l=n.keyframes[0],u=n.keyframes[n.keyframes.length-1],d={done:!1,value:l},{stiffness:f,damping:p,mass:m,duration:g,velocity:y,isResolvedFromDuration:b}=kA({...n,velocity:-sr(n.velocity||0)}),_=y||0,k=p/(2*Math.sqrt(f*m)),C=u-l,N=sr(Math.sqrt(f/m)),M=Math.abs(C)<5;i||(i=M?Nt.restSpeed.granular:Nt.restSpeed.default),s||(s=M?Nt.restDelta.granular:Nt.restDelta.default);let O;if(k<1){const Z=th(N,k);O=re=>{const R=Math.exp(-k*N*re);return u-R*((_+k*N*C)/Z*Math.sin(Z*re)+C*Math.cos(Z*re))}}else if(k===1)O=Z=>u-Math.exp(-N*Z)*(C+(_+N*C)*Z);else{const Z=N*Math.sqrt(k*k-1);O=re=>{const R=Math.exp(-k*N*re),I=Math.min(Z*re,300);return u-R*((_+k*N*C)*Math.sinh(I)+Z*C*Math.cosh(I))/Z}}const B={calculatedDuration:b&&g||null,next:Z=>{const re=O(Z);if(b)d.done=Z>=g;else{let R=Z===0?_:0;k<1&&(R=Z===0?Dr(_):l1(O,Z,re));const I=Math.abs(R)<=i,ae=Math.abs(u-re)<=s;d.done=I&&ae}return d.value=d.done?u:re,d},toString:()=>{const Z=Math.min(fp(B),Vu),re=a1(R=>B.next(Z*R).value,Z,30);return Z+"ms "+re},toTransition:()=>{}};return B}$u.applyToOptions=e=>{const t=gA(e,100,$u);return e.ease=t.ease,e.duration=Dr(t.duration),e.type="keyframes",e};function nh({keyframes:e,velocity:t=0,power:n=.8,timeConstant:i=325,bounceDamping:s=10,bounceStiffness:l=500,modifyTarget:u,min:d,max:f,restDelta:p=.5,restSpeed:m}){const g=e[0],y={done:!1,value:g},b=I=>d!==void 0&&I<d||f!==void 0&&I>f,_=I=>d===void 0?f:f===void 0||Math.abs(d-I)<Math.abs(f-I)?d:f;let k=n*t;const C=g+k,N=u===void 0?C:u(C);N!==C&&(k=N-g);const M=I=>-k*Math.exp(-I/i),O=I=>N+M(I),B=I=>{const ae=M(I),le=O(I);y.done=Math.abs(ae)<=p,y.value=y.done?N:le};let Z,re;const R=I=>{b(y.value)&&(Z=I,re=$u({keyframes:[y.value,_(y.value)],velocity:l1(O,I,y.value),damping:s,stiffness:l,restDelta:p,restSpeed:m}))};return R(0),{calculatedDuration:null,next:I=>{let ae=!1;return!re&&Z===void 0&&(ae=!0,B(I),R(I)),Z!==void 0&&I>=Z?re.next(I-Z):(!ae&&B(I),y)}}}function EA(e,t,n){const i=[],s=n||to.mix||s1,l=e.length-1;for(let u=0;u<l;u++){let d=s(e[u],e[u+1]);if(t){const f=Array.isArray(t)?t[u]||ar:t;d=$a(f,d)}i.push(d)}return i}function _A(e,t,{clamp:n=!0,ease:i,mixer:s}={}){const l=e.length;if(np(l===t.length),l===1)return()=>t[0];if(l===2&&t[0]===t[1])return()=>t[1];const u=e[0]===e[1];e[0]>e[l-1]&&(e=[...e].reverse(),t=[...t].reverse());const d=EA(t,i,s),f=d.length,p=m=>{if(u&&m<e[0])return t[0];let g=0;if(f>1)for(;g<e.length-2&&!(m<e[g+1]);g++);const y=Ta(e[g],e[g+1],m);return d[g](y)};return n?m=>p(eo(e[0],e[l-1],m)):p}function CA(e,t){const n=e[e.length-1];for(let i=1;i<=t;i++){const s=Ta(0,t,i);e.push(_t(n,1,s))}}function PA(e){const t=[0];return CA(t,e.length-1),t}function TA(e,t){return e.map(n=>n*t)}function RA(e,t){return e.map(()=>t||Xx).splice(0,e.length-1)}function ga({duration:e=300,keyframes:t,times:n,ease:i="easeInOut"}){const s=V2(i)?i.map(Ay):Ay(i),l={done:!1,value:t[0]},u=TA(n&&n.length===t.length?n:PA(t),e),d=_A(u,t,{ease:Array.isArray(s)?s:RA(t,s)});return{calculatedDuration:e,next:f=>(l.value=d(f),l.done=f>=e,l)}}const DA=e=>e!==null;function hp(e,{repeat:t,repeatType:n="loop"},i,s=1){const l=e.filter(DA),d=s<0||t&&n!=="loop"&&t%2===1?0:l.length-1;return!d||i===void 0?l[d]:i}const NA={decay:nh,inertia:nh,tween:ga,keyframes:ga,spring:$u};function u1(e){typeof e.type=="string"&&(e.type=NA[e.type])}class pp{constructor(){this.updateFinished()}get finished(){return this._finished}updateFinished(){this._finished=new Promise(t=>{this.resolve=t})}notifyFinished(){this.resolve()}then(t,n){return this.finished.then(t,n)}}const AA=e=>e/100;class mp extends pp{constructor(t){super(),this.state="idle",this.startTime=null,this.isStopped=!1,this.currentTime=0,this.holdTime=null,this.playbackSpeed=1,this.stop=()=>{var i,s;const{motionValue:n}=this.options;n&&n.updatedAt!==Ln.now()&&this.tick(Ln.now()),this.isStopped=!0,this.state!=="idle"&&(this.teardown(),(s=(i=this.options).onStop)==null||s.call(i))},this.options=t,this.initAnimation(),this.play(),t.autoplay===!1&&this.pause()}initAnimation(){const{options:t}=this;u1(t);const{type:n=ga,repeat:i=0,repeatDelay:s=0,repeatType:l,velocity:u=0}=t;let{keyframes:d}=t;const f=n||ga;f!==ga&&typeof d[0]!="number"&&(this.mixKeyframes=$a(AA,s1(d[0],d[1])),d=[0,100]);const p=f({...t,keyframes:d});l==="mirror"&&(this.mirroredGenerator=f({...t,keyframes:[...d].reverse(),velocity:-u})),p.calculatedDuration===null&&(p.calculatedDuration=fp(p));const{calculatedDuration:m}=p;this.calculatedDuration=m,this.resolvedDuration=m+s,this.totalDuration=this.resolvedDuration*(i+1)-s,this.generator=p}updateTime(t){const n=Math.round(t-this.startTime)*this.playbackSpeed;this.holdTime!==null?this.currentTime=this.holdTime:this.currentTime=n}tick(t,n=!1){const{generator:i,totalDuration:s,mixKeyframes:l,mirroredGenerator:u,resolvedDuration:d,calculatedDuration:f}=this;if(this.startTime===null)return i.next(0);const{delay:p=0,keyframes:m,repeat:g,repeatType:y,repeatDelay:b,type:_,onUpdate:k,finalKeyframe:C}=this.options;this.speed>0?this.startTime=Math.min(this.startTime,t):this.speed<0&&(this.startTime=Math.min(t-s/this.speed,this.startTime)),n?this.currentTime=t:this.updateTime(t);const N=this.currentTime-p*(this.playbackSpeed>=0?1:-1),M=this.playbackSpeed>=0?N<0:N>s;this.currentTime=Math.max(N,0),this.state==="finished"&&this.holdTime===null&&(this.currentTime=s);let O=this.currentTime,B=i;if(g){const I=Math.min(this.currentTime,s)/d;let ae=Math.floor(I),le=I%1;!le&&I>=1&&(le=1),le===1&&ae--,ae=Math.min(ae,g+1),!!(ae%2)&&(y==="reverse"?(le=1-le,b&&(le-=b/d)):y==="mirror"&&(B=u)),O=eo(0,1,le)*d}const Z=M?{done:!1,value:m[0]}:B.next(O);l&&(Z.value=l(Z.value));let{done:re}=Z;!M&&f!==null&&(re=this.playbackSpeed>=0?this.currentTime>=s:this.currentTime<=0);const R=this.holdTime===null&&(this.state==="finished"||this.state==="running"&&re);return R&&_!==nh&&(Z.value=hp(m,this.options,C,this.speed)),k&&k(Z.value),R&&this.finish(),Z}then(t,n){return this.finished.then(t,n)}get duration(){return sr(this.calculatedDuration)}get iterationDuration(){const{delay:t=0}=this.options||{};return this.duration+sr(t)}get time(){return sr(this.currentTime)}set time(t){var n;t=Dr(t),this.currentTime=t,this.startTime===null||this.holdTime!==null||this.playbackSpeed===0?this.holdTime=t:this.driver&&(this.startTime=this.driver.now()-t/this.playbackSpeed),(n=this.driver)==null||n.start(!1)}get speed(){return this.playbackSpeed}set speed(t){this.updateTime(Ln.now());const n=this.playbackSpeed!==t;this.playbackSpeed=t,n&&(this.time=sr(this.currentTime))}play(){var s,l;if(this.isStopped)return;const{driver:t=mA,startTime:n}=this.options;this.driver||(this.driver=t(u=>this.tick(u))),(l=(s=this.options).onPlay)==null||l.call(s);const i=this.driver.now();this.state==="finished"?(this.updateFinished(),this.startTime=i):this.holdTime!==null?this.startTime=i-this.holdTime:this.startTime||(this.startTime=n??i),this.state==="finished"&&this.speed<0&&(this.startTime+=this.calculatedDuration),this.holdTime=null,this.state="running",this.driver.start()}pause(){this.state="paused",this.updateTime(Ln.now()),this.holdTime=this.currentTime}complete(){this.state!=="running"&&this.play(),this.state="finished",this.holdTime=null}finish(){var t,n;this.notifyFinished(),this.teardown(),this.state="finished",(n=(t=this.options).onComplete)==null||n.call(t)}cancel(){var t,n;this.holdTime=null,this.startTime=0,this.tick(0),this.teardown(),(n=(t=this.options).onCancel)==null||n.call(t)}teardown(){this.state="idle",this.stopDriver(),this.startTime=this.holdTime=null}stopDriver(){this.driver&&(this.driver.stop(),this.driver=void 0)}sample(t){return this.startTime=0,this.tick(t,!0)}attachTimeline(t){var n;return this.options.allowFlatten&&(this.options.type="keyframes",this.options.ease="linear",this.initAnimation()),(n=this.driver)==null||n.stop(),t.observe(this)}}function MA(e){for(let t=1;t<e.length;t++)e[t]??(e[t]=e[t-1])}const li=e=>e*180/Math.PI,rh=e=>{const t=li(Math.atan2(e[1],e[0]));return oh(t)},jA={x:4,y:5,translateX:4,translateY:5,scaleX:0,scaleY:3,scale:e=>(Math.abs(e[0])+Math.abs(e[3]))/2,rotate:rh,rotateZ:rh,skewX:e=>li(Math.atan(e[1])),skewY:e=>li(Math.atan(e[2])),skew:e=>(Math.abs(e[1])+Math.abs(e[2]))/2},oh=e=>(e=e%360,e<0&&(e+=360),e),Iy=rh,Fy=e=>Math.sqrt(e[0]*e[0]+e[1]*e[1]),Vy=e=>Math.sqrt(e[4]*e[4]+e[5]*e[5]),LA={x:12,y:13,z:14,translateX:12,translateY:13,translateZ:14,scaleX:Fy,scaleY:Vy,scale:e=>(Fy(e)+Vy(e))/2,rotateX:e=>oh(li(Math.atan2(e[6],e[5]))),rotateY:e=>oh(li(Math.atan2(-e[2],e[0]))),rotateZ:Iy,rotate:Iy,skewX:e=>li(Math.atan(e[4])),skewY:e=>li(Math.atan(e[1])),skew:e=>(Math.abs(e[1])+Math.abs(e[4]))/2};function ih(e){return e.includes("scale")?1:0}function sh(e,t){if(!e||e==="none")return ih(t);const n=e.match(/^matrix3d\(([-\d.e\s,]+)\)$/u);let i,s;if(n)i=LA,s=n;else{const d=e.match(/^matrix\(([-\d.e\s,]+)\)$/u);i=jA,s=d}if(!s)return ih(t);const l=i[t],u=s[1].split(",").map(zA);return typeof l=="function"?l(u):u[l]}const OA=(e,t)=>{const{transform:n="none"}=getComputedStyle(e);return sh(n,t)};function zA(e){return parseFloat(e.trim())}const vs=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],ys=new Set(vs),$y=e=>e===gs||e===Ve,IA=new Set(["x","y","z"]),FA=vs.filter(e=>!IA.has(e));function VA(e){const t=[];return FA.forEach(n=>{const i=e.getValue(n);i!==void 0&&(t.push([n,i.get()]),i.set(n.startsWith("scale")?1:0))}),t}const ui={width:({x:e},{paddingLeft:t="0",paddingRight:n="0"})=>e.max-e.min-parseFloat(t)-parseFloat(n),height:({y:e},{paddingTop:t="0",paddingBottom:n="0"})=>e.max-e.min-parseFloat(t)-parseFloat(n),top:(e,{top:t})=>parseFloat(t),left:(e,{left:t})=>parseFloat(t),bottom:({y:e},{top:t})=>parseFloat(t)+(e.max-e.min),right:({x:e},{left:t})=>parseFloat(t)+(e.max-e.min),x:(e,{transform:t})=>sh(t,"x"),y:(e,{transform:t})=>sh(t,"y")};ui.translateX=ui.x;ui.translateY=ui.y;const ci=new Set;let ah=!1,lh=!1,uh=!1;function c1(){if(lh){const e=Array.from(ci).filter(i=>i.needsMeasurement),t=new Set(e.map(i=>i.element)),n=new Map;t.forEach(i=>{const s=VA(i);s.length&&(n.set(i,s),i.render())}),e.forEach(i=>i.measureInitialState()),t.forEach(i=>{i.render();const s=n.get(i);s&&s.forEach(([l,u])=>{var d;(d=i.getValue(l))==null||d.set(u)})}),e.forEach(i=>i.measureEndState()),e.forEach(i=>{i.suspendedScrollY!==void 0&&window.scrollTo(0,i.suspendedScrollY)})}lh=!1,ah=!1,ci.forEach(e=>e.complete(uh)),ci.clear()}function d1(){ci.forEach(e=>{e.readKeyframes(),e.needsMeasurement&&(lh=!0)})}function $A(){uh=!0,d1(),c1(),uh=!1}class gp{constructor(t,n,i,s,l,u=!1){this.state="pending",this.isAsync=!1,this.needsMeasurement=!1,this.unresolvedKeyframes=[...t],this.onComplete=n,this.name=i,this.motionValue=s,this.element=l,this.isAsync=u}scheduleResolve(){this.state="scheduled",this.isAsync?(ci.add(this),ah||(ah=!0,xt.read(d1),xt.resolveKeyframes(c1))):(this.readKeyframes(),this.complete())}readKeyframes(){const{unresolvedKeyframes:t,name:n,element:i,motionValue:s}=this;if(t[0]===null){const l=s==null?void 0:s.get(),u=t[t.length-1];if(l!==void 0)t[0]=l;else if(i&&n){const d=i.readValue(n,u);d!=null&&(t[0]=d)}t[0]===void 0&&(t[0]=u),s&&l===void 0&&s.set(t[0])}MA(t)}setFinalKeyframe(){}measureInitialState(){}renderEndStyles(){}measureEndState(){}complete(t=!1){this.state="complete",this.onComplete(this.unresolvedKeyframes,this.finalKeyframe,t),ci.delete(this)}cancel(){this.state==="scheduled"&&(ci.delete(this),this.state="pending")}resume(){this.state==="pending"&&this.scheduleResolve()}}const UA=e=>e.startsWith("--");function BA(e,t,n){UA(t)?e.style.setProperty(t,n):e.style[t]=n}const WA=rp(()=>window.ScrollTimeline!==void 0),ZA={};function HA(e,t){const n=rp(e);return()=>ZA[t]??n()}const f1=HA(()=>{try{document.createElement("div").animate({opacity:0},{easing:"linear(0, 1)"})}catch{return!1}return!0},"linearEasing"),fa=([e,t,n,i])=>`cubic-bezier(${e}, ${t}, ${n}, ${i})`,Uy={linear:"linear",ease:"ease",easeIn:"ease-in",easeOut:"ease-out",easeInOut:"ease-in-out",circIn:fa([0,.65,.55,1]),circOut:fa([.55,0,1,.45]),backIn:fa([.31,.01,.66,-.59]),backOut:fa([.33,1.53,.69,.99])};function h1(e,t){if(e)return typeof e=="function"?f1()?a1(e,t):"ease-out":Qx(e)?fa(e):Array.isArray(e)?e.map(n=>h1(n,t)||Uy.easeOut):Uy[e]}function KA(e,t,n,{delay:i=0,duration:s=300,repeat:l=0,repeatType:u="loop",ease:d="easeOut",times:f}={},p=void 0){const m={[t]:n};f&&(m.offset=f);const g=h1(d,s);Array.isArray(g)&&(m.easing=g);const y={delay:i,duration:s,easing:Array.isArray(g)?"linear":g,fill:"both",iterations:l+1,direction:u==="reverse"?"alternate":"normal"};return p&&(y.pseudoElement=p),e.animate(m,y)}function p1(e){return typeof e=="function"&&"applyToOptions"in e}function GA({type:e,...t}){return p1(e)&&f1()?e.applyToOptions(t):(t.duration??(t.duration=300),t.ease??(t.ease="easeOut"),t)}class YA extends pp{constructor(t){if(super(),this.finishedTime=null,this.isStopped=!1,!t)return;const{element:n,name:i,keyframes:s,pseudoElement:l,allowFlatten:u=!1,finalKeyframe:d,onComplete:f}=t;this.isPseudoElement=!!l,this.allowFlatten=u,this.options=t,np(typeof t.type!="string");const p=GA(t);this.animation=KA(n,i,s,p,l),p.autoplay===!1&&this.animation.pause(),this.animation.onfinish=()=>{if(this.finishedTime=this.time,!l){const m=hp(s,this.options,d,this.speed);this.updateMotionValue?this.updateMotionValue(m):BA(n,i,m),this.animation.cancel()}f==null||f(),this.notifyFinished()}}play(){this.isStopped||(this.animation.play(),this.state==="finished"&&this.updateFinished())}pause(){this.animation.pause()}complete(){var t,n;(n=(t=this.animation).finish)==null||n.call(t)}cancel(){try{this.animation.cancel()}catch{}}stop(){if(this.isStopped)return;this.isStopped=!0;const{state:t}=this;t==="idle"||t==="finished"||(this.updateMotionValue?this.updateMotionValue():this.commitStyles(),this.isPseudoElement||this.cancel())}commitStyles(){var t,n;this.isPseudoElement||(n=(t=this.animation).commitStyles)==null||n.call(t)}get duration(){var n,i;const t=((i=(n=this.animation.effect)==null?void 0:n.getComputedTiming)==null?void 0:i.call(n).duration)||0;return sr(Number(t))}get iterationDuration(){const{delay:t=0}=this.options||{};return this.duration+sr(t)}get time(){return sr(Number(this.animation.currentTime)||0)}set time(t){this.finishedTime=null,this.animation.currentTime=Dr(t)}get speed(){return this.animation.playbackRate}set speed(t){t<0&&(this.finishedTime=null),this.animation.playbackRate=t}get state(){return this.finishedTime!==null?"finished":this.animation.playState}get startTime(){return Number(this.animation.startTime)}set startTime(t){this.animation.startTime=t}attachTimeline({timeline:t,observe:n}){var i;return this.allowFlatten&&((i=this.animation.effect)==null||i.updateTiming({easing:"linear"})),this.animation.onfinish=null,t&&WA()?(this.animation.timeline=t,ar):n(this)}}const m1={anticipate:Kx,backInOut:Hx,circInOut:Yx};function XA(e){return e in m1}function QA(e){typeof e.ease=="string"&&XA(e.ease)&&(e.ease=m1[e.ease])}const By=10;class JA extends YA{constructor(t){QA(t),u1(t),super(t),t.startTime&&(this.startTime=t.startTime),this.options=t}updateMotionValue(t){const{motionValue:n,onUpdate:i,onComplete:s,element:l,...u}=this.options;if(!n)return;if(t!==void 0){n.set(t);return}const d=new mp({...u,autoplay:!1}),f=Dr(this.finishedTime??this.time);n.setWithVelocity(d.sample(f-By).value,d.sample(f).value,By),d.stop()}}const Wy=(e,t)=>t==="zIndex"?!1:!!(typeof e=="number"||Array.isArray(e)||typeof e=="string"&&(jo.test(e)||e==="0")&&!e.startsWith("url("));function qA(e){const t=e[0];if(e.length===1)return!0;for(let n=0;n<e.length;n++)if(e[n]!==t)return!0}function eM(e,t,n,i){const s=e[0];if(s===null)return!1;if(t==="display"||t==="visibility")return!0;const l=e[e.length-1],u=Wy(s,t),d=Wy(l,t);return!u||!d?!1:qA(e)||(n==="spring"||p1(n))&&i}function ch(e){e.duration=0,e.type="keyframes"}const tM=new Set(["opacity","clipPath","filter","transform"]),nM=rp(()=>Object.hasOwnProperty.call(Element.prototype,"animate"));function rM(e){var m;const{motionValue:t,name:n,repeatDelay:i,repeatType:s,damping:l,type:u}=e;if(!(((m=t==null?void 0:t.owner)==null?void 0:m.current)instanceof HTMLElement))return!1;const{onUpdate:f,transformTemplate:p}=t.owner.getProps();return nM()&&n&&tM.has(n)&&(n!=="transform"||!p)&&!f&&!i&&s!=="mirror"&&l!==0&&u!=="inertia"}const oM=40;class iM extends pp{constructor({autoplay:t=!0,delay:n=0,type:i="keyframes",repeat:s=0,repeatDelay:l=0,repeatType:u="loop",keyframes:d,name:f,motionValue:p,element:m,...g}){var _;super(),this.stop=()=>{var k,C;this._animation&&(this._animation.stop(),(k=this.stopTimeline)==null||k.call(this)),(C=this.keyframeResolver)==null||C.cancel()},this.createdAt=Ln.now();const y={autoplay:t,delay:n,type:i,repeat:s,repeatDelay:l,repeatType:u,name:f,motionValue:p,element:m,...g},b=(m==null?void 0:m.KeyframeResolver)||gp;this.keyframeResolver=new b(d,(k,C,N)=>this.onKeyframesResolved(k,C,y,!N),f,p,m),(_=this.keyframeResolver)==null||_.scheduleResolve()}onKeyframesResolved(t,n,i,s){this.keyframeResolver=void 0;const{name:l,type:u,velocity:d,delay:f,isHandoff:p,onUpdate:m}=i;this.resolvedAt=Ln.now(),eM(t,l,u,d)||((to.instantAnimations||!f)&&(m==null||m(hp(t,i,n))),t[0]=t[t.length-1],ch(i),i.repeat=0);const y={startTime:s?this.resolvedAt?this.resolvedAt-this.createdAt>oM?this.resolvedAt:this.createdAt:this.createdAt:void 0,finalKeyframe:n,...i,keyframes:t},b=!p&&rM(y)?new JA({...y,element:y.motionValue.owner.current}):new mp(y);b.finished.then(()=>this.notifyFinished()).catch(ar),this.pendingTimeline&&(this.stopTimeline=b.attachTimeline(this.pendingTimeline),this.pendingTimeline=void 0),this._animation=b}get finished(){return this._animation?this.animation.finished:this._finished}then(t,n){return this.finished.finally(t).then(()=>{})}get animation(){var t;return this._animation||((t=this.keyframeResolver)==null||t.resume(),$A()),this._animation}get duration(){return this.animation.duration}get iterationDuration(){return this.animation.iterationDuration}get time(){return this.animation.time}set time(t){this.animation.time=t}get speed(){return this.animation.speed}get state(){return this.animation.state}set speed(t){this.animation.speed=t}get startTime(){return this.animation.startTime}attachTimeline(t){return this._animation?this.stopTimeline=this.animation.attachTimeline(t):this.pendingTimeline=t,()=>this.stop()}play(){this.animation.play()}pause(){this.animation.pause()}complete(){this.animation.complete()}cancel(){var t;this._animation&&this.animation.cancel(),(t=this.keyframeResolver)==null||t.cancel()}}const sM=/^var\(--(?:([\w-]+)|([\w-]+), ?([a-zA-Z\d ()%#.,-]+))\)/u;function aM(e){const t=sM.exec(e);if(!t)return[,];const[,n,i,s]=t;return[`--${n??i}`,s]}function g1(e,t,n=1){const[i,s]=aM(e);if(!i)return;const l=window.getComputedStyle(t).getPropertyValue(i);if(l){const u=l.trim();return Ix(u)?parseFloat(u):u}return lp(s)?g1(s,t,n+1):s}function vp(e,t){return(e==null?void 0:e[t])??(e==null?void 0:e.default)??e}const v1=new Set(["width","height","top","left","right","bottom",...vs]),lM={test:e=>e==="auto",parse:e=>e},y1=e=>t=>t.test(e),w1=[gs,Ve,Nr,To,q2,J2,lM],Zy=e=>w1.find(y1(e));function uM(e){return typeof e=="number"?e===0:e!==null?e==="none"||e==="0"||Vx(e):!0}const cM=new Set(["brightness","contrast","saturate","opacity"]);function dM(e){const[t,n]=e.slice(0,-1).split("(");if(t==="drop-shadow")return e;const[i]=n.match(up)||[];if(!i)return e;const s=n.replace(i,"");let l=cM.has(t)?1:0;return i!==n&&(l*=100),t+"("+l+s+")"}const fM=/\b([a-z-]*)\(.*?\)/gu,dh={...jo,getAnimatableNone:e=>{const t=e.match(fM);return t?t.map(dM).join(" "):e}},Hy={...gs,transform:Math.round},hM={rotate:To,rotateX:To,rotateY:To,rotateZ:To,scale:uu,scaleX:uu,scaleY:uu,scaleZ:uu,skew:To,skewX:To,skewY:To,distance:Ve,translateX:Ve,translateY:Ve,translateZ:Ve,x:Ve,y:Ve,z:Ve,perspective:Ve,transformPerspective:Ve,opacity:Ra,originX:My,originY:My,originZ:Ve},yp={borderWidth:Ve,borderTopWidth:Ve,borderRightWidth:Ve,borderBottomWidth:Ve,borderLeftWidth:Ve,borderRadius:Ve,radius:Ve,borderTopLeftRadius:Ve,borderTopRightRadius:Ve,borderBottomRightRadius:Ve,borderBottomLeftRadius:Ve,width:Ve,maxWidth:Ve,height:Ve,maxHeight:Ve,top:Ve,right:Ve,bottom:Ve,left:Ve,padding:Ve,paddingTop:Ve,paddingRight:Ve,paddingBottom:Ve,paddingLeft:Ve,margin:Ve,marginTop:Ve,marginRight:Ve,marginBottom:Ve,marginLeft:Ve,backgroundPositionX:Ve,backgroundPositionY:Ve,...hM,zIndex:Hy,fillOpacity:Ra,strokeOpacity:Ra,numOctaves:Hy},pM={...yp,color:Ut,backgroundColor:Ut,outlineColor:Ut,fill:Ut,stroke:Ut,borderColor:Ut,borderTopColor:Ut,borderRightColor:Ut,borderBottomColor:Ut,borderLeftColor:Ut,filter:dh,WebkitFilter:dh},x1=e=>pM[e];function S1(e,t){let n=x1(e);return n!==dh&&(n=jo),n.getAnimatableNone?n.getAnimatableNone(t):void 0}const mM=new Set(["auto","none","0"]);function gM(e,t,n){let i=0,s;for(;i<e.length&&!s;){const l=e[i];typeof l=="string"&&!mM.has(l)&&Da(l).values.length&&(s=e[i]),i++}if(s&&n)for(const l of t)e[l]=S1(n,s)}class vM extends gp{constructor(t,n,i,s,l){super(t,n,i,s,l,!0)}readKeyframes(){const{unresolvedKeyframes:t,element:n,name:i}=this;if(!n||!n.current)return;super.readKeyframes();for(let f=0;f<t.length;f++){let p=t[f];if(typeof p=="string"&&(p=p.trim(),lp(p))){const m=g1(p,n.current);m!==void 0&&(t[f]=m),f===t.length-1&&(this.finalKeyframe=p)}}if(this.resolveNoneKeyframes(),!v1.has(i)||t.length!==2)return;const[s,l]=t,u=Zy(s),d=Zy(l);if(u!==d)if($y(u)&&$y(d))for(let f=0;f<t.length;f++){const p=t[f];typeof p=="string"&&(t[f]=parseFloat(p))}else ui[i]&&(this.needsMeasurement=!0)}resolveNoneKeyframes(){const{unresolvedKeyframes:t,name:n}=this,i=[];for(let s=0;s<t.length;s++)(t[s]===null||uM(t[s]))&&i.push(s);i.length&&gM(t,i,n)}measureInitialState(){const{element:t,unresolvedKeyframes:n,name:i}=this;if(!t||!t.current)return;i==="height"&&(this.suspendedScrollY=window.pageYOffset),this.measuredOrigin=ui[i](t.measureViewportBox(),window.getComputedStyle(t.current)),n[0]=this.measuredOrigin;const s=n[n.length-1];s!==void 0&&t.getValue(i,s).jump(s,!1)}measureEndState(){var d;const{element:t,name:n,unresolvedKeyframes:i}=this;if(!t||!t.current)return;const s=t.getValue(n);s&&s.jump(this.measuredOrigin,!1);const l=i.length-1,u=i[l];i[l]=ui[n](t.measureViewportBox(),window.getComputedStyle(t.current)),u!==null&&this.finalKeyframe===void 0&&(this.finalKeyframe=u),(d=this.removedTransforms)!=null&&d.length&&this.removedTransforms.forEach(([f,p])=>{t.getValue(f).set(p)}),this.resolveNoneKeyframes()}}function yM(e,t,n){if(e instanceof EventTarget)return[e];if(typeof e=="string"){let i=document;const s=(n==null?void 0:n[e])??i.querySelectorAll(e);return s?Array.from(s):[]}return Array.from(e)}const b1=(e,t)=>t&&typeof e=="number"?t.transform(e):e;function wM(e){return Fx(e)&&"offsetHeight"in e}const Ky=30,xM=e=>!isNaN(parseFloat(e));class SM{constructor(t,n={}){this.canTrackVelocity=null,this.events={},this.updateAndNotify=i=>{var l;const s=Ln.now();if(this.updatedAt!==s&&this.setPrevFrameValue(),this.prev=this.current,this.setCurrent(i),this.current!==this.prev&&((l=this.events.change)==null||l.notify(this.current),this.dependents))for(const u of this.dependents)u.dirty()},this.hasAnimated=!1,this.setCurrent(t),this.owner=n.owner}setCurrent(t){this.current=t,this.updatedAt=Ln.now(),this.canTrackVelocity===null&&t!==void 0&&(this.canTrackVelocity=xM(this.current))}setPrevFrameValue(t=this.current){this.prevFrameValue=t,this.prevUpdatedAt=this.updatedAt}onChange(t){return this.on("change",t)}on(t,n){this.events[t]||(this.events[t]=new op);const i=this.events[t].add(n);return t==="change"?()=>{i(),xt.read(()=>{this.events.change.getSize()||this.stop()})}:i}clearListeners(){for(const t in this.events)this.events[t].clear()}attach(t,n){this.passiveEffect=t,this.stopPassiveEffect=n}set(t){this.passiveEffect?this.passiveEffect(t,this.updateAndNotify):this.updateAndNotify(t)}setWithVelocity(t,n,i){this.set(n),this.prev=void 0,this.prevFrameValue=t,this.prevUpdatedAt=this.updatedAt-i}jump(t,n=!0){this.updateAndNotify(t),this.prev=t,this.prevUpdatedAt=this.prevFrameValue=void 0,n&&this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}dirty(){var t;(t=this.events.change)==null||t.notify(this.current)}addDependent(t){this.dependents||(this.dependents=new Set),this.dependents.add(t)}removeDependent(t){this.dependents&&this.dependents.delete(t)}get(){return this.current}getPrevious(){return this.prev}getVelocity(){const t=Ln.now();if(!this.canTrackVelocity||this.prevFrameValue===void 0||t-this.updatedAt>Ky)return 0;const n=Math.min(this.updatedAt-this.prevUpdatedAt,Ky);return $x(parseFloat(this.current)-parseFloat(this.prevFrameValue),n)}start(t){return this.stop(),new Promise(n=>{this.hasAnimated=!0,this.animation=t(n),this.events.animationStart&&this.events.animationStart.notify()}).then(()=>{this.events.animationComplete&&this.events.animationComplete.notify(),this.clearAnimation()})}stop(){this.animation&&(this.animation.stop(),this.events.animationCancel&&this.events.animationCancel.notify()),this.clearAnimation()}isAnimating(){return!!this.animation}clearAnimation(){delete this.animation}destroy(){var t,n;(t=this.dependents)==null||t.clear(),(n=this.events.destroy)==null||n.notify(),this.clearListeners(),this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}}function ds(e,t){return new SM(e,t)}const{schedule:wp}=Jx(queueMicrotask,!1),vr={x:!1,y:!1};function k1(){return vr.x||vr.y}function bM(e){return e==="x"||e==="y"?vr[e]?null:(vr[e]=!0,()=>{vr[e]=!1}):vr.x||vr.y?null:(vr.x=vr.y=!0,()=>{vr.x=vr.y=!1})}function E1(e,t){const n=yM(e),i=new AbortController,s={passive:!0,...t,signal:i.signal};return[n,s,()=>i.abort()]}function Gy(e){return!(e.pointerType==="touch"||k1())}function kM(e,t,n={}){const[i,s,l]=E1(e,n),u=d=>{if(!Gy(d))return;const{target:f}=d,p=t(f,d);if(typeof p!="function"||!f)return;const m=g=>{Gy(g)&&(p(g),f.removeEventListener("pointerleave",m))};f.addEventListener("pointerleave",m,s)};return i.forEach(d=>{d.addEventListener("pointerenter",u,s)}),l}const _1=(e,t)=>t?e===t?!0:_1(e,t.parentElement):!1,xp=e=>e.pointerType==="mouse"?typeof e.button!="number"||e.button<=0:e.isPrimary!==!1,EM=new Set(["BUTTON","INPUT","SELECT","TEXTAREA","A"]);function _M(e){return EM.has(e.tagName)||e.tabIndex!==-1}const wu=new WeakSet;function Yy(e){return t=>{t.key==="Enter"&&e(t)}}function hf(e,t){e.dispatchEvent(new PointerEvent("pointer"+t,{isPrimary:!0,bubbles:!0}))}const CM=(e,t)=>{const n=e.currentTarget;if(!n)return;const i=Yy(()=>{if(wu.has(n))return;hf(n,"down");const s=Yy(()=>{hf(n,"up")}),l=()=>hf(n,"cancel");n.addEventListener("keyup",s,t),n.addEventListener("blur",l,t)});n.addEventListener("keydown",i,t),n.addEventListener("blur",()=>n.removeEventListener("keydown",i),t)};function Xy(e){return xp(e)&&!k1()}function PM(e,t,n={}){const[i,s,l]=E1(e,n),u=d=>{const f=d.currentTarget;if(!Xy(d))return;wu.add(f);const p=t(f,d),m=(b,_)=>{window.removeEventListener("pointerup",g),window.removeEventListener("pointercancel",y),wu.has(f)&&wu.delete(f),Xy(b)&&typeof p=="function"&&p(b,{success:_})},g=b=>{m(b,f===window||f===document||n.useGlobalTarget||_1(f,b.target))},y=b=>{m(b,!1)};window.addEventListener("pointerup",g,s),window.addEventListener("pointercancel",y,s)};return i.forEach(d=>{(n.useGlobalTarget?window:d).addEventListener("pointerdown",u,s),wM(d)&&(d.addEventListener("focus",p=>CM(p,s)),!_M(d)&&!d.hasAttribute("tabindex")&&(d.tabIndex=0))}),l}function C1(e){return Fx(e)&&"ownerSVGElement"in e}function TM(e){return C1(e)&&e.tagName==="svg"}const gn=e=>!!(e&&e.getVelocity),RM=[...w1,Ut,jo],DM=e=>RM.find(y1(e)),P1=S.createContext({transformPagePoint:e=>e,isStatic:!1,reducedMotion:"never"});function NM(e=!0){const t=S.useContext(qh);if(t===null)return[!0,null];const{isPresent:n,onExitComplete:i,register:s}=t,l=S.useId();S.useEffect(()=>{if(e)return s(l)},[e]);const u=S.useCallback(()=>e&&i&&i(l),[l,i,e]);return!n&&i?[!1,u]:[!0]}const T1=S.createContext({strict:!1}),Qy={animation:["animate","variants","whileHover","whileTap","exit","whileInView","whileFocus","whileDrag"],exit:["exit"],drag:["drag","dragControls"],focus:["whileFocus"],hover:["whileHover","onHoverStart","onHoverEnd"],tap:["whileTap","onTap","onTapStart","onTapCancel"],pan:["onPan","onPanStart","onPanSessionStart","onPanEnd"],inView:["whileInView","onViewportEnter","onViewportLeave"],layout:["layout","layoutId"]},fs={};for(const e in Qy)fs[e]={isEnabled:t=>Qy[e].some(n=>!!t[n])};function AM(e){for(const t in e)fs[t]={...fs[t],...e[t]}}const MM=new Set(["animate","exit","variants","initial","style","values","variants","transition","transformTemplate","custom","inherit","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","_dragX","_dragY","onHoverStart","onHoverEnd","onViewportEnter","onViewportLeave","globalTapTarget","ignoreStrict","viewport"]);function Uu(e){return e.startsWith("while")||e.startsWith("drag")&&e!=="draggable"||e.startsWith("layout")||e.startsWith("onTap")||e.startsWith("onPan")||e.startsWith("onLayout")||MM.has(e)}let R1=e=>!Uu(e);function jM(e){typeof e=="function"&&(R1=t=>t.startsWith("on")?!Uu(t):e(t))}try{jM(require("@emotion/is-prop-valid").default)}catch{}function LM(e,t,n){const i={};for(const s in e)s==="values"&&typeof e.values=="object"||(R1(s)||n===!0&&Uu(s)||!t&&!Uu(s)||e.draggable&&s.startsWith("onDrag"))&&(i[s]=e[s]);return i}const lc=S.createContext({});function uc(e){return e!==null&&typeof e=="object"&&typeof e.start=="function"}function Na(e){return typeof e=="string"||Array.isArray(e)}const Sp=["animate","whileInView","whileFocus","whileHover","whileTap","whileDrag","exit"],bp=["initial",...Sp];function cc(e){return uc(e.animate)||bp.some(t=>Na(e[t]))}function D1(e){return!!(cc(e)||e.variants)}function OM(e,t){if(cc(e)){const{initial:n,animate:i}=e;return{initial:n===!1||Na(n)?n:void 0,animate:Na(i)?i:void 0}}return e.inherit!==!1?t:{}}function zM(e){const{initial:t,animate:n}=OM(e,S.useContext(lc));return S.useMemo(()=>({initial:t,animate:n}),[Jy(t),Jy(n)])}function Jy(e){return Array.isArray(e)?e.join(" "):e}const Aa={};function IM(e){for(const t in e)Aa[t]=e[t],ap(t)&&(Aa[t].isCSSVariable=!0)}function N1(e,{layout:t,layoutId:n}){return ys.has(e)||e.startsWith("origin")||(t||n!==void 0)&&(!!Aa[e]||e==="opacity")}const FM={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},VM=vs.length;function $M(e,t,n){let i="",s=!0;for(let l=0;l<VM;l++){const u=vs[l],d=e[u];if(d===void 0)continue;let f=!0;if(typeof d=="number"?f=d===(u.startsWith("scale")?1:0):f=parseFloat(d)===0,!f||n){const p=b1(d,yp[u]);if(!f){s=!1;const m=FM[u]||u;i+=`${m}(${p}) `}n&&(t[u]=p)}}return i=i.trim(),n?i=n(t,s?"":i):s&&(i="none"),i}function kp(e,t,n){const{style:i,vars:s,transformOrigin:l}=e;let u=!1,d=!1;for(const f in t){const p=t[f];if(ys.has(f)){u=!0;continue}else if(ap(f)){s[f]=p;continue}else{const m=b1(p,yp[f]);f.startsWith("origin")?(d=!0,l[f]=m):i[f]=m}}if(t.transform||(u||n?i.transform=$M(t,e.transform,n):i.transform&&(i.transform="none")),d){const{originX:f="50%",originY:p="50%",originZ:m=0}=l;i.transformOrigin=`${f} ${p} ${m}`}}const Ep=()=>({style:{},transform:{},transformOrigin:{},vars:{}});function A1(e,t,n){for(const i in t)!gn(t[i])&&!N1(i,n)&&(e[i]=t[i])}function UM({transformTemplate:e},t){return S.useMemo(()=>{const n=Ep();return kp(n,t,e),Object.assign({},n.vars,n.style)},[t])}function BM(e,t){const n=e.style||{},i={};return A1(i,n,e),Object.assign(i,UM(e,t)),i}function WM(e,t){const n={},i=BM(e,t);return e.drag&&e.dragListener!==!1&&(n.draggable=!1,i.userSelect=i.WebkitUserSelect=i.WebkitTouchCallout="none",i.touchAction=e.drag===!0?"none":`pan-${e.drag==="x"?"y":"x"}`),e.tabIndex===void 0&&(e.onTap||e.onTapStart||e.whileTap)&&(n.tabIndex=0),n.style=i,n}const ZM={offset:"stroke-dashoffset",array:"stroke-dasharray"},HM={offset:"strokeDashoffset",array:"strokeDasharray"};function KM(e,t,n=1,i=0,s=!0){e.pathLength=1;const l=s?ZM:HM;e[l.offset]=Ve.transform(-i);const u=Ve.transform(t),d=Ve.transform(n);e[l.array]=`${u} ${d}`}function M1(e,{attrX:t,attrY:n,attrScale:i,pathLength:s,pathSpacing:l=1,pathOffset:u=0,...d},f,p,m){if(kp(e,d,p),f){e.style.viewBox&&(e.attrs.viewBox=e.style.viewBox);return}e.attrs=e.style,e.style={};const{attrs:g,style:y}=e;g.transform&&(y.transform=g.transform,delete g.transform),(y.transform||g.transformOrigin)&&(y.transformOrigin=g.transformOrigin??"50% 50%",delete g.transformOrigin),y.transform&&(y.transformBox=(m==null?void 0:m.transformBox)??"fill-box",delete g.transformBox),t!==void 0&&(g.x=t),n!==void 0&&(g.y=n),i!==void 0&&(g.scale=i),s!==void 0&&KM(g,s,l,u,!1)}const j1=()=>({...Ep(),attrs:{}}),L1=e=>typeof e=="string"&&e.toLowerCase()==="svg";function GM(e,t,n,i){const s=S.useMemo(()=>{const l=j1();return M1(l,t,L1(i),e.transformTemplate,e.style),{...l.attrs,style:{...l.style}}},[t]);if(e.style){const l={};A1(l,e.style,e),s.style={...l,...s.style}}return s}const YM=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","switch","symbol","svg","text","tspan","use","view"];function _p(e){return typeof e!="string"||e.includes("-")?!1:!!(YM.indexOf(e)>-1||/[A-Z]/u.test(e))}function XM(e,t,n,{latestValues:i},s,l=!1){const d=(_p(e)?GM:WM)(t,i,s,e),f=LM(t,typeof e=="string",l),p=e!==S.Fragment?{...f,...d,ref:n}:{},{children:m}=t,g=S.useMemo(()=>gn(m)?m.get():m,[m]);return S.createElement(e,{...p,children:g})}function qy(e){const t=[{},{}];return e==null||e.values.forEach((n,i)=>{t[0][i]=n.get(),t[1][i]=n.getVelocity()}),t}function Cp(e,t,n,i){if(typeof t=="function"){const[s,l]=qy(i);t=t(n!==void 0?n:e.custom,s,l)}if(typeof t=="string"&&(t=e.variants&&e.variants[t]),typeof t=="function"){const[s,l]=qy(i);t=t(n!==void 0?n:e.custom,s,l)}return t}function xu(e){return gn(e)?e.get():e}function QM({scrapeMotionValuesFromProps:e,createRenderState:t},n,i,s){return{latestValues:JM(n,i,s,e),renderState:t()}}function JM(e,t,n,i){const s={},l=i(e,{});for(const y in l)s[y]=xu(l[y]);let{initial:u,animate:d}=e;const f=cc(e),p=D1(e);t&&p&&!f&&e.inherit!==!1&&(u===void 0&&(u=t.initial),d===void 0&&(d=t.animate));let m=n?n.initial===!1:!1;m=m||u===!1;const g=m?d:u;if(g&&typeof g!="boolean"&&!uc(g)){const y=Array.isArray(g)?g:[g];for(let b=0;b<y.length;b++){const _=Cp(e,y[b]);if(_){const{transitionEnd:k,transition:C,...N}=_;for(const M in N){let O=N[M];if(Array.isArray(O)){const B=m?O.length-1:0;O=O[B]}O!==null&&(s[M]=O)}for(const M in k)s[M]=k[M]}}}return s}const O1=e=>(t,n)=>{const i=S.useContext(lc),s=S.useContext(qh),l=()=>QM(e,t,i,s);return n?l():A2(l)};function Pp(e,t,n){var l;const{style:i}=e,s={};for(const u in i)(gn(i[u])||t.style&&gn(t.style[u])||N1(u,e)||((l=n==null?void 0:n.getValue(u))==null?void 0:l.liveStyle)!==void 0)&&(s[u]=i[u]);return s}const qM=O1({scrapeMotionValuesFromProps:Pp,createRenderState:Ep});function z1(e,t,n){const i=Pp(e,t,n);for(const s in e)if(gn(e[s])||gn(t[s])){const l=vs.indexOf(s)!==-1?"attr"+s.charAt(0).toUpperCase()+s.substring(1):s;i[l]=e[s]}return i}const ej=O1({scrapeMotionValuesFromProps:z1,createRenderState:j1}),tj=Symbol.for("motionComponentSymbol");function qi(e){return e&&typeof e=="object"&&Object.prototype.hasOwnProperty.call(e,"current")}function nj(e,t,n){return S.useCallback(i=>{i&&e.onMount&&e.onMount(i),t&&(i?t.mount(i):t.unmount()),n&&(typeof n=="function"?n(i):qi(n)&&(n.current=i))},[t])}const Tp=e=>e.replace(/([a-z])([A-Z])/gu,"$1-$2").toLowerCase(),rj="framerAppearId",I1="data-"+Tp(rj),F1=S.createContext({});function oj(e,t,n,i,s){var k,C;const{visualElement:l}=S.useContext(lc),u=S.useContext(T1),d=S.useContext(qh),f=S.useContext(P1).reducedMotion,p=S.useRef(null);i=i||u.renderer,!p.current&&i&&(p.current=i(e,{visualState:t,parent:l,props:n,presenceContext:d,blockInitialAnimation:d?d.initial===!1:!1,reducedMotionConfig:f}));const m=p.current,g=S.useContext(F1);m&&!m.projection&&s&&(m.type==="html"||m.type==="svg")&&ij(p.current,n,s,g);const y=S.useRef(!1);S.useInsertionEffect(()=>{m&&y.current&&m.update(n,d)});const b=n[I1],_=S.useRef(!!b&&!((k=window.MotionHandoffIsComplete)!=null&&k.call(window,b))&&((C=window.MotionHasOptimisedAnimation)==null?void 0:C.call(window,b)));return M2(()=>{m&&(y.current=!0,window.MotionIsMounted=!0,m.updateFeatures(),m.scheduleRenderMicrotask(),_.current&&m.animationState&&m.animationState.animateChanges())}),S.useEffect(()=>{m&&(!_.current&&m.animationState&&m.animationState.animateChanges(),_.current&&(queueMicrotask(()=>{var N;(N=window.MotionHandoffMarkAsComplete)==null||N.call(window,b)}),_.current=!1),m.enteringChildren=void 0)}),m}function ij(e,t,n,i){const{layoutId:s,layout:l,drag:u,dragConstraints:d,layoutScroll:f,layoutRoot:p,layoutCrossfade:m}=t;e.projection=new n(e.latestValues,t["data-framer-portal-id"]?void 0:V1(e.parent)),e.projection.setOptions({layoutId:s,layout:l,alwaysMeasureLayout:!!u||d&&qi(d),visualElement:e,animationType:typeof l=="string"?l:"both",initialPromotionConfig:i,crossfade:m,layoutScroll:f,layoutRoot:p})}function V1(e){if(e)return e.options.allowProjection!==!1?e.projection:V1(e.parent)}function pf(e,{forwardMotionProps:t=!1}={},n,i){n&&AM(n);const s=_p(e)?ej:qM;function l(d,f){let p;const m={...S.useContext(P1),...d,layoutId:sj(d)},{isStatic:g}=m,y=zM(d),b=s(d,g);if(!g&&Jh){aj();const _=lj(m);p=_.MeasureLayout,y.visualElement=oj(e,b,m,i,_.ProjectionNode)}return x.jsxs(lc.Provider,{value:y,children:[p&&y.visualElement?x.jsx(p,{visualElement:y.visualElement,...m}):null,XM(e,d,nj(b,y.visualElement,f),b,g,t)]})}l.displayName=`motion.${typeof e=="string"?e:`create(${e.displayName??e.name??""})`}`;const u=S.forwardRef(l);return u[tj]=e,u}function sj({layoutId:e}){const t=S.useContext(zx).id;return t&&e!==void 0?t+"-"+e:e}function aj(e,t){S.useContext(T1).strict}function lj(e){const{drag:t,layout:n}=fs;if(!t&&!n)return{};const i={...t,...n};return{MeasureLayout:t!=null&&t.isEnabled(e)||n!=null&&n.isEnabled(e)?i.MeasureLayout:void 0,ProjectionNode:i.ProjectionNode}}function uj(e,t){if(typeof Proxy>"u")return pf;const n=new Map,i=(l,u)=>pf(l,u,e,t),s=(l,u)=>i(l,u);return new Proxy(s,{get:(l,u)=>u==="create"?i:(n.has(u)||n.set(u,pf(u,void 0,e,t)),n.get(u))})}function $1({top:e,left:t,right:n,bottom:i}){return{x:{min:t,max:n},y:{min:e,max:i}}}function cj({x:e,y:t}){return{top:t.min,right:e.max,bottom:t.max,left:e.min}}function dj(e,t){if(!t)return e;const n=t({x:e.left,y:e.top}),i=t({x:e.right,y:e.bottom});return{top:n.y,left:n.x,bottom:i.y,right:i.x}}function mf(e){return e===void 0||e===1}function fh({scale:e,scaleX:t,scaleY:n}){return!mf(e)||!mf(t)||!mf(n)}function ni(e){return fh(e)||U1(e)||e.z||e.rotate||e.rotateX||e.rotateY||e.skewX||e.skewY}function U1(e){return e0(e.x)||e0(e.y)}function e0(e){return e&&e!=="0%"}function Bu(e,t,n){const i=e-n,s=t*i;return n+s}function t0(e,t,n,i,s){return s!==void 0&&(e=Bu(e,s,i)),Bu(e,n,i)+t}function hh(e,t=0,n=1,i,s){e.min=t0(e.min,t,n,i,s),e.max=t0(e.max,t,n,i,s)}function B1(e,{x:t,y:n}){hh(e.x,t.translate,t.scale,t.originPoint),hh(e.y,n.translate,n.scale,n.originPoint)}const n0=.999999999999,r0=1.0000000000001;function fj(e,t,n,i=!1){const s=n.length;if(!s)return;t.x=t.y=1;let l,u;for(let d=0;d<s;d++){l=n[d],u=l.projectionDelta;const{visualElement:f}=l.options;f&&f.props.style&&f.props.style.display==="contents"||(i&&l.options.layoutScroll&&l.scroll&&l!==l.root&&ts(e,{x:-l.scroll.offset.x,y:-l.scroll.offset.y}),u&&(t.x*=u.x.scale,t.y*=u.y.scale,B1(e,u)),i&&ni(l.latestValues)&&ts(e,l.latestValues))}t.x<r0&&t.x>n0&&(t.x=1),t.y<r0&&t.y>n0&&(t.y=1)}function es(e,t){e.min=e.min+t,e.max=e.max+t}function o0(e,t,n,i,s=.5){const l=_t(e.min,e.max,s);hh(e,t,n,l,i)}function ts(e,t){o0(e.x,t.x,t.scaleX,t.scale,t.originX),o0(e.y,t.y,t.scaleY,t.scale,t.originY)}function W1(e,t){return $1(dj(e.getBoundingClientRect(),t))}function hj(e,t,n){const i=W1(e,n),{scroll:s}=t;return s&&(es(i.x,s.offset.x),es(i.y,s.offset.y)),i}const i0=()=>({translate:0,scale:1,origin:0,originPoint:0}),ns=()=>({x:i0(),y:i0()}),s0=()=>({min:0,max:0}),Lt=()=>({x:s0(),y:s0()}),ph={current:null},Z1={current:!1};function pj(){if(Z1.current=!0,!!Jh)if(window.matchMedia){const e=window.matchMedia("(prefers-reduced-motion)"),t=()=>ph.current=e.matches;e.addEventListener("change",t),t()}else ph.current=!1}const mj=new WeakMap;function gj(e,t,n){for(const i in t){const s=t[i],l=n[i];if(gn(s))e.addValue(i,s);else if(gn(l))e.addValue(i,ds(s,{owner:e}));else if(l!==s)if(e.hasValue(i)){const u=e.getValue(i);u.liveStyle===!0?u.jump(s):u.hasAnimated||u.set(s)}else{const u=e.getStaticValue(i);e.addValue(i,ds(u!==void 0?u:s,{owner:e}))}}for(const i in n)t[i]===void 0&&e.removeValue(i);return t}const a0=["AnimationStart","AnimationComplete","Update","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"];class vj{scrapeMotionValuesFromProps(t,n,i){return{}}constructor({parent:t,props:n,presenceContext:i,reducedMotionConfig:s,blockInitialAnimation:l,visualState:u},d={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.KeyframeResolver=gp,this.features={},this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection))},this.renderScheduledAt=0,this.scheduleRender=()=>{const y=Ln.now();this.renderScheduledAt<y&&(this.renderScheduledAt=y,xt.render(this.render,!1,!0))};const{latestValues:f,renderState:p}=u;this.latestValues=f,this.baseTarget={...f},this.initialValues=n.initial?{...f}:{},this.renderState=p,this.parent=t,this.props=n,this.presenceContext=i,this.depth=t?t.depth+1:0,this.reducedMotionConfig=s,this.options=d,this.blockInitialAnimation=!!l,this.isControllingVariants=cc(n),this.isVariantNode=D1(n),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=!!(t&&t.current);const{willChange:m,...g}=this.scrapeMotionValuesFromProps(n,{},this);for(const y in g){const b=g[y];f[y]!==void 0&&gn(b)&&b.set(f[y])}}mount(t){var n;this.current=t,mj.set(t,this),this.projection&&!this.projection.instance&&this.projection.mount(t),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=this.parent.addVariantChild(this)),this.values.forEach((i,s)=>this.bindToMotionValue(s,i)),Z1.current||pj(),this.shouldReduceMotion=this.reducedMotionConfig==="never"?!1:this.reducedMotionConfig==="always"?!0:ph.current,(n=this.parent)==null||n.addChild(this),this.update(this.props,this.presenceContext)}unmount(){var t;this.projection&&this.projection.unmount(),Mo(this.notifyUpdate),Mo(this.render),this.valueSubscriptions.forEach(n=>n()),this.valueSubscriptions.clear(),this.removeFromVariantTree&&this.removeFromVariantTree(),(t=this.parent)==null||t.removeChild(this);for(const n in this.events)this.events[n].clear();for(const n in this.features){const i=this.features[n];i&&(i.unmount(),i.isMounted=!1)}this.current=null}addChild(t){this.children.add(t),this.enteringChildren??(this.enteringChildren=new Set),this.enteringChildren.add(t)}removeChild(t){this.children.delete(t),this.enteringChildren&&this.enteringChildren.delete(t)}bindToMotionValue(t,n){this.valueSubscriptions.has(t)&&this.valueSubscriptions.get(t)();const i=ys.has(t);i&&this.onBindTransform&&this.onBindTransform();const s=n.on("change",u=>{this.latestValues[t]=u,this.props.onUpdate&&xt.preRender(this.notifyUpdate),i&&this.projection&&(this.projection.isTransformDirty=!0),this.scheduleRender()});let l;window.MotionCheckAppearSync&&(l=window.MotionCheckAppearSync(this,t,n)),this.valueSubscriptions.set(t,()=>{s(),l&&l(),n.owner&&n.stop()})}sortNodePosition(t){return!this.current||!this.sortInstanceNodePosition||this.type!==t.type?0:this.sortInstanceNodePosition(this.current,t.current)}updateFeatures(){let t="animation";for(t in fs){const n=fs[t];if(!n)continue;const{isEnabled:i,Feature:s}=n;if(!this.features[t]&&s&&i(this.props)&&(this.features[t]=new s(this)),this.features[t]){const l=this.features[t];l.isMounted?l.update():(l.mount(),l.isMounted=!0)}}}triggerBuild(){this.build(this.renderState,this.latestValues,this.props)}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):Lt()}getStaticValue(t){return this.latestValues[t]}setStaticValue(t,n){this.latestValues[t]=n}update(t,n){(t.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.prevProps=this.props,this.props=t,this.prevPresenceContext=this.presenceContext,this.presenceContext=n;for(let i=0;i<a0.length;i++){const s=a0[i];this.propEventSubscriptions[s]&&(this.propEventSubscriptions[s](),delete this.propEventSubscriptions[s]);const l="on"+s,u=t[l];u&&(this.propEventSubscriptions[s]=this.on(s,u))}this.prevMotionValues=gj(this,this.scrapeMotionValuesFromProps(t,this.prevProps,this),this.prevMotionValues),this.handleChildMotionValue&&this.handleChildMotionValue()}getProps(){return this.props}getVariant(t){return this.props.variants?this.props.variants[t]:void 0}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){return this.isVariantNode?this:this.parent?this.parent.getClosestVariantNode():void 0}addVariantChild(t){const n=this.getClosestVariantNode();if(n)return n.variantChildren&&n.variantChildren.add(t),()=>n.variantChildren.delete(t)}addValue(t,n){const i=this.values.get(t);n!==i&&(i&&this.removeValue(t),this.bindToMotionValue(t,n),this.values.set(t,n),this.latestValues[t]=n.get())}removeValue(t){this.values.delete(t);const n=this.valueSubscriptions.get(t);n&&(n(),this.valueSubscriptions.delete(t)),delete this.latestValues[t],this.removeValueFromRenderState(t,this.renderState)}hasValue(t){return this.values.has(t)}getValue(t,n){if(this.props.values&&this.props.values[t])return this.props.values[t];let i=this.values.get(t);return i===void 0&&n!==void 0&&(i=ds(n===null?void 0:n,{owner:this}),this.addValue(t,i)),i}readValue(t,n){let i=this.latestValues[t]!==void 0||!this.current?this.latestValues[t]:this.getBaseTargetFromProps(this.props,t)??this.readValueFromInstance(this.current,t,this.options);return i!=null&&(typeof i=="string"&&(Ix(i)||Vx(i))?i=parseFloat(i):!DM(i)&&jo.test(n)&&(i=S1(t,n)),this.setBaseTarget(t,gn(i)?i.get():i)),gn(i)?i.get():i}setBaseTarget(t,n){this.baseTarget[t]=n}getBaseTarget(t){var l;const{initial:n}=this.props;let i;if(typeof n=="string"||typeof n=="object"){const u=Cp(this.props,n,(l=this.presenceContext)==null?void 0:l.custom);u&&(i=u[t])}if(n&&i!==void 0)return i;const s=this.getBaseTargetFromProps(this.props,t);return s!==void 0&&!gn(s)?s:this.initialValues[t]!==void 0&&i===void 0?void 0:this.baseTarget[t]}on(t,n){return this.events[t]||(this.events[t]=new op),this.events[t].add(n)}notify(t,...n){this.events[t]&&this.events[t].notify(...n)}scheduleRenderMicrotask(){wp.render(this.render)}}class H1 extends vj{constructor(){super(...arguments),this.KeyframeResolver=vM}sortInstanceNodePosition(t,n){return t.compareDocumentPosition(n)&2?1:-1}getBaseTargetFromProps(t,n){return t.style?t.style[n]:void 0}removeValueFromRenderState(t,{vars:n,style:i}){delete n[t],delete i[t]}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:t}=this.props;gn(t)&&(this.childSubscription=t.on("change",n=>{this.current&&(this.current.textContent=`${n}`)}))}}function K1(e,{style:t,vars:n},i,s){const l=e.style;let u;for(u in t)l[u]=t[u];s==null||s.applyProjectionStyles(l,i);for(u in n)l.setProperty(u,n[u])}function yj(e){return window.getComputedStyle(e)}class wj extends H1{constructor(){super(...arguments),this.type="html",this.renderInstance=K1}readValueFromInstance(t,n){var i;if(ys.has(n))return(i=this.projection)!=null&&i.isProjecting?ih(n):OA(t,n);{const s=yj(t),l=(ap(n)?s.getPropertyValue(n):s[n])||0;return typeof l=="string"?l.trim():l}}measureInstanceViewportBox(t,{transformPagePoint:n}){return W1(t,n)}build(t,n,i){kp(t,n,i.transformTemplate)}scrapeMotionValuesFromProps(t,n,i){return Pp(t,n,i)}}const G1=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength","startOffset","textLength","lengthAdjust"]);function xj(e,t,n,i){K1(e,t,void 0,i);for(const s in t.attrs)e.setAttribute(G1.has(s)?s:Tp(s),t.attrs[s])}class Sj extends H1{constructor(){super(...arguments),this.type="svg",this.isSVGTag=!1,this.measureInstanceViewportBox=Lt}getBaseTargetFromProps(t,n){return t[n]}readValueFromInstance(t,n){if(ys.has(n)){const i=x1(n);return i&&i.default||0}return n=G1.has(n)?n:Tp(n),t.getAttribute(n)}scrapeMotionValuesFromProps(t,n,i){return z1(t,n,i)}build(t,n,i){M1(t,n,this.isSVGTag,i.transformTemplate,i.style)}renderInstance(t,n,i,s){xj(t,n,i,s)}mount(t){this.isSVGTag=L1(t.tagName),super.mount(t)}}const bj=(e,t)=>_p(e)?new Sj(t):new wj(t,{allowProjection:e!==S.Fragment});function os(e,t,n){const i=e.getProps();return Cp(i,t,n!==void 0?n:i.custom,e)}const mh=e=>Array.isArray(e);function kj(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,ds(n))}function Ej(e){return mh(e)?e[e.length-1]||0:e}function _j(e,t){const n=os(e,t);let{transitionEnd:i={},transition:s={},...l}=n||{};l={...l,...i};for(const u in l){const d=Ej(l[u]);kj(e,u,d)}}function Cj(e){return!!(gn(e)&&e.add)}function gh(e,t){const n=e.getValue("willChange");if(Cj(n))return n.add(t);if(!n&&to.WillChange){const i=new to.WillChange("auto");e.addValue("willChange",i),i.add(t)}}function Y1(e){return e.props[I1]}const Pj=e=>e!==null;function Tj(e,{repeat:t,repeatType:n="loop"},i){const s=e.filter(Pj),l=t&&n!=="loop"&&t%2===1?0:s.length-1;return s[l]}const Rj={type:"spring",stiffness:500,damping:25,restSpeed:10},Dj=e=>({type:"spring",stiffness:550,damping:e===0?2*Math.sqrt(550):30,restSpeed:10}),Nj={type:"keyframes",duration:.8},Aj={type:"keyframes",ease:[.25,.1,.35,1],duration:.3},Mj=(e,{keyframes:t})=>t.length>2?Nj:ys.has(e)?e.startsWith("scale")?Dj(t[1]):Rj:Aj;function jj({when:e,delay:t,delayChildren:n,staggerChildren:i,staggerDirection:s,repeat:l,repeatType:u,repeatDelay:d,from:f,elapsed:p,...m}){return!!Object.keys(m).length}const Rp=(e,t,n,i={},s,l)=>u=>{const d=vp(i,e)||{},f=d.delay||i.delay||0;let{elapsed:p=0}=i;p=p-Dr(f);const m={keyframes:Array.isArray(n)?n:[null,n],ease:"easeOut",velocity:t.getVelocity(),...d,delay:-p,onUpdate:y=>{t.set(y),d.onUpdate&&d.onUpdate(y)},onComplete:()=>{u(),d.onComplete&&d.onComplete()},name:e,motionValue:t,element:l?void 0:s};jj(d)||Object.assign(m,Mj(e,m)),m.duration&&(m.duration=Dr(m.duration)),m.repeatDelay&&(m.repeatDelay=Dr(m.repeatDelay)),m.from!==void 0&&(m.keyframes[0]=m.from);let g=!1;if((m.type===!1||m.duration===0&&!m.repeatDelay)&&(ch(m),m.delay===0&&(g=!0)),(to.instantAnimations||to.skipAnimations)&&(g=!0,ch(m),m.delay=0),m.allowFlatten=!d.type&&!d.ease,g&&!l&&t.get()!==void 0){const y=Tj(m.keyframes,d);if(y!==void 0){xt.update(()=>{m.onUpdate(y),m.onComplete()});return}}return d.isSync?new mp(m):new iM(m)};function Lj({protectedKeys:e,needsAnimating:t},n){const i=e.hasOwnProperty(n)&&t[n]!==!0;return t[n]=!1,i}function X1(e,t,{delay:n=0,transitionOverride:i,type:s}={}){let{transition:l=e.getDefaultTransition(),transitionEnd:u,...d}=t;i&&(l=i);const f=[],p=s&&e.animationState&&e.animationState.getState()[s];for(const m in d){const g=e.getValue(m,e.latestValues[m]??null),y=d[m];if(y===void 0||p&&Lj(p,m))continue;const b={delay:n,...vp(l||{},m)},_=g.get();if(_!==void 0&&!g.isAnimating&&!Array.isArray(y)&&y===_&&!b.velocity)continue;let k=!1;if(window.MotionHandoffAnimation){const N=Y1(e);if(N){const M=window.MotionHandoffAnimation(N,m,xt);M!==null&&(b.startTime=M,k=!0)}}gh(e,m),g.start(Rp(m,g,y,e.shouldReduceMotion&&v1.has(m)?{type:!1}:b,e,k));const C=g.animation;C&&f.push(C)}return u&&Promise.all(f).then(()=>{xt.update(()=>{u&&_j(e,u)})}),f}function Q1(e,t,n,i=0,s=1){const l=Array.from(e).sort((p,m)=>p.sortNodePosition(m)).indexOf(t),u=e.size,d=(u-1)*i;return typeof n=="function"?n(l,u):s===1?l*i:d-l*i}function vh(e,t,n={}){var f;const i=os(e,t,n.type==="exit"?(f=e.presenceContext)==null?void 0:f.custom:void 0);let{transition:s=e.getDefaultTransition()||{}}=i||{};n.transitionOverride&&(s=n.transitionOverride);const l=i?()=>Promise.all(X1(e,i,n)):()=>Promise.resolve(),u=e.variantChildren&&e.variantChildren.size?(p=0)=>{const{delayChildren:m=0,staggerChildren:g,staggerDirection:y}=s;return Oj(e,t,p,m,g,y,n)}:()=>Promise.resolve(),{when:d}=s;if(d){const[p,m]=d==="beforeChildren"?[l,u]:[u,l];return p().then(()=>m())}else return Promise.all([l(),u(n.delay)])}function Oj(e,t,n=0,i=0,s=0,l=1,u){const d=[];for(const f of e.variantChildren)f.notify("AnimationStart",t),d.push(vh(f,t,{...u,delay:n+(typeof i=="function"?0:i)+Q1(e.variantChildren,f,i,s,l)}).then(()=>f.notify("AnimationComplete",t)));return Promise.all(d)}function zj(e,t,n={}){e.notify("AnimationStart",t);let i;if(Array.isArray(t)){const s=t.map(l=>vh(e,l,n));i=Promise.all(s)}else if(typeof t=="string")i=vh(e,t,n);else{const s=typeof t=="function"?os(e,t,n.custom):t;i=Promise.all(X1(e,s,n))}return i.then(()=>{e.notify("AnimationComplete",t)})}function J1(e,t){if(!Array.isArray(t))return!1;const n=t.length;if(n!==e.length)return!1;for(let i=0;i<n;i++)if(t[i]!==e[i])return!1;return!0}const Ij=bp.length;function q1(e){if(!e)return;if(!e.isControllingVariants){const n=e.parent?q1(e.parent)||{}:{};return e.props.initial!==void 0&&(n.initial=e.props.initial),n}const t={};for(let n=0;n<Ij;n++){const i=bp[n],s=e.props[i];(Na(s)||s===!1)&&(t[i]=s)}return t}const Fj=[...Sp].reverse(),Vj=Sp.length;function $j(e){return t=>Promise.all(t.map(({animation:n,options:i})=>zj(e,n,i)))}function Uj(e){let t=$j(e),n=l0(),i=!0;const s=f=>(p,m)=>{var y;const g=os(e,m,f==="exit"?(y=e.presenceContext)==null?void 0:y.custom:void 0);if(g){const{transition:b,transitionEnd:_,...k}=g;p={...p,...k,..._}}return p};function l(f){t=f(e)}function u(f){const{props:p}=e,m=q1(e.parent)||{},g=[],y=new Set;let b={},_=1/0;for(let C=0;C<Vj;C++){const N=Fj[C],M=n[N],O=p[N]!==void 0?p[N]:m[N],B=Na(O),Z=N===f?M.isActive:null;Z===!1&&(_=C);let re=O===m[N]&&O!==p[N]&&B;if(re&&i&&e.manuallyAnimateOnMount&&(re=!1),M.protectedKeys={...b},!M.isActive&&Z===null||!O&&!M.prevProp||uc(O)||typeof O=="boolean")continue;const R=Bj(M.prevProp,O);let I=R||N===f&&M.isActive&&!re&&B||C>_&&B,ae=!1;const le=Array.isArray(O)?O:[O];let Ie=le.reduce(s(N),{});Z===!1&&(Ie={});const{prevResolvedValues:he={}}=M,ge={...he,...Ie},Ne=ue=>{I=!0,y.has(ue)&&(ae=!0,y.delete(ue)),M.needsAnimating[ue]=!0;const z=e.getValue(ue);z&&(z.liveStyle=!1)};for(const ue in ge){const z=Ie[ue],fe=he[ue];if(b.hasOwnProperty(ue))continue;let ee=!1;mh(z)&&mh(fe)?ee=!J1(z,fe):ee=z!==fe,ee?z!=null?Ne(ue):y.add(ue):z!==void 0&&y.has(ue)?Ne(ue):M.protectedKeys[ue]=!0}M.prevProp=O,M.prevResolvedValues=Ie,M.isActive&&(b={...b,...Ie}),i&&e.blockInitialAnimation&&(I=!1);const Le=re&&R;I&&(!Le||ae)&&g.push(...le.map(ue=>{const z={type:N};if(typeof ue=="string"&&i&&!Le&&e.manuallyAnimateOnMount&&e.parent){const{parent:fe}=e,ee=os(fe,ue);if(fe.enteringChildren&&ee){const{delayChildren:j}=ee.transition||{};z.delay=Q1(fe.enteringChildren,e,j)}}return{animation:ue,options:z}}))}if(y.size){const C={};if(typeof p.initial!="boolean"){const N=os(e,Array.isArray(p.initial)?p.initial[0]:p.initial);N&&N.transition&&(C.transition=N.transition)}y.forEach(N=>{const M=e.getBaseTarget(N),O=e.getValue(N);O&&(O.liveStyle=!0),C[N]=M??null}),g.push({animation:C})}let k=!!g.length;return i&&(p.initial===!1||p.initial===p.animate)&&!e.manuallyAnimateOnMount&&(k=!1),i=!1,k?t(g):Promise.resolve()}function d(f,p){var g;if(n[f].isActive===p)return Promise.resolve();(g=e.variantChildren)==null||g.forEach(y=>{var b;return(b=y.animationState)==null?void 0:b.setActive(f,p)}),n[f].isActive=p;const m=u(f);for(const y in n)n[y].protectedKeys={};return m}return{animateChanges:u,setActive:d,setAnimateFunction:l,getState:()=>n,reset:()=>{n=l0()}}}function Bj(e,t){return typeof t=="string"?t!==e:Array.isArray(t)?!J1(t,e):!1}function ti(e=!1){return{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}function l0(){return{animate:ti(!0),whileInView:ti(),whileHover:ti(),whileTap:ti(),whileDrag:ti(),whileFocus:ti(),exit:ti()}}class Io{constructor(t){this.isMounted=!1,this.node=t}update(){}}class Wj extends Io{constructor(t){super(t),t.animationState||(t.animationState=Uj(t))}updateAnimationControlsSubscription(){const{animate:t}=this.node.getProps();uc(t)&&(this.unmountControls=t.subscribe(this.node))}mount(){this.updateAnimationControlsSubscription()}update(){const{animate:t}=this.node.getProps(),{animate:n}=this.node.prevProps||{};t!==n&&this.updateAnimationControlsSubscription()}unmount(){var t;this.node.animationState.reset(),(t=this.unmountControls)==null||t.call(this)}}let Zj=0;class Hj extends Io{constructor(){super(...arguments),this.id=Zj++}update(){if(!this.node.presenceContext)return;const{isPresent:t,onExitComplete:n}=this.node.presenceContext,{isPresent:i}=this.node.prevPresenceContext||{};if(!this.node.animationState||t===i)return;const s=this.node.animationState.setActive("exit",!t);n&&!t&&s.then(()=>{n(this.id)})}mount(){const{register:t,onExitComplete:n}=this.node.presenceContext||{};n&&n(this.id),t&&(this.unmount=t(this.id))}unmount(){}}const Kj={animation:{Feature:Wj},exit:{Feature:Hj}};function Ma(e,t,n,i={passive:!0}){return e.addEventListener(t,n,i),()=>e.removeEventListener(t,n)}function Wa(e){return{point:{x:e.pageX,y:e.pageY}}}const Gj=e=>t=>xp(t)&&e(t,Wa(t));function va(e,t,n,i){return Ma(e,t,Gj(n),i)}const eS=1e-4,Yj=1-eS,Xj=1+eS,tS=.01,Qj=0-tS,Jj=0+tS;function bn(e){return e.max-e.min}function qj(e,t,n){return Math.abs(e-t)<=n}function u0(e,t,n,i=.5){e.origin=i,e.originPoint=_t(t.min,t.max,e.origin),e.scale=bn(n)/bn(t),e.translate=_t(n.min,n.max,e.origin)-e.originPoint,(e.scale>=Yj&&e.scale<=Xj||isNaN(e.scale))&&(e.scale=1),(e.translate>=Qj&&e.translate<=Jj||isNaN(e.translate))&&(e.translate=0)}function ya(e,t,n,i){u0(e.x,t.x,n.x,i?i.originX:void 0),u0(e.y,t.y,n.y,i?i.originY:void 0)}function c0(e,t,n){e.min=n.min+t.min,e.max=e.min+bn(t)}function eL(e,t,n){c0(e.x,t.x,n.x),c0(e.y,t.y,n.y)}function d0(e,t,n){e.min=t.min-n.min,e.max=e.min+bn(t)}function wa(e,t,n){d0(e.x,t.x,n.x),d0(e.y,t.y,n.y)}function or(e){return[e("x"),e("y")]}const nS=({current:e})=>e?e.ownerDocument.defaultView:null,f0=(e,t)=>Math.abs(e-t);function tL(e,t){const n=f0(e.x,t.x),i=f0(e.y,t.y);return Math.sqrt(n**2+i**2)}class rS{constructor(t,n,{transformPagePoint:i,contextWindow:s=window,dragSnapToOrigin:l=!1,distanceThreshold:u=3}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.contextWindow=window,this.updatePoint=()=>{if(!(this.lastMoveEvent&&this.lastMoveEventInfo))return;const y=vf(this.lastMoveEventInfo,this.history),b=this.startEvent!==null,_=tL(y.offset,{x:0,y:0})>=this.distanceThreshold;if(!b&&!_)return;const{point:k}=y,{timestamp:C}=dn;this.history.push({...k,timestamp:C});const{onStart:N,onMove:M}=this.handlers;b||(N&&N(this.lastMoveEvent,y),this.startEvent=this.lastMoveEvent),M&&M(this.lastMoveEvent,y)},this.handlePointerMove=(y,b)=>{this.lastMoveEvent=y,this.lastMoveEventInfo=gf(b,this.transformPagePoint),xt.update(this.updatePoint,!0)},this.handlePointerUp=(y,b)=>{this.end();const{onEnd:_,onSessionEnd:k,resumeAnimation:C}=this.handlers;if(this.dragSnapToOrigin&&C&&C(),!(this.lastMoveEvent&&this.lastMoveEventInfo))return;const N=vf(y.type==="pointercancel"?this.lastMoveEventInfo:gf(b,this.transformPagePoint),this.history);this.startEvent&&_&&_(y,N),k&&k(y,N)},!xp(t))return;this.dragSnapToOrigin=l,this.handlers=n,this.transformPagePoint=i,this.distanceThreshold=u,this.contextWindow=s||window;const d=Wa(t),f=gf(d,this.transformPagePoint),{point:p}=f,{timestamp:m}=dn;this.history=[{...p,timestamp:m}];const{onSessionStart:g}=n;g&&g(t,vf(f,this.history)),this.removeListeners=$a(va(this.contextWindow,"pointermove",this.handlePointerMove),va(this.contextWindow,"pointerup",this.handlePointerUp),va(this.contextWindow,"pointercancel",this.handlePointerUp))}updateHandlers(t){this.handlers=t}end(){this.removeListeners&&this.removeListeners(),Mo(this.updatePoint)}}function gf(e,t){return t?{point:t(e.point)}:e}function h0(e,t){return{x:e.x-t.x,y:e.y-t.y}}function vf({point:e},t){return{point:e,delta:h0(e,oS(t)),offset:h0(e,nL(t)),velocity:rL(t,.1)}}function nL(e){return e[0]}function oS(e){return e[e.length-1]}function rL(e,t){if(e.length<2)return{x:0,y:0};let n=e.length-1,i=null;const s=oS(e);for(;n>=0&&(i=e[n],!(s.timestamp-i.timestamp>Dr(t)));)n--;if(!i)return{x:0,y:0};const l=sr(s.timestamp-i.timestamp);if(l===0)return{x:0,y:0};const u={x:(s.x-i.x)/l,y:(s.y-i.y)/l};return u.x===1/0&&(u.x=0),u.y===1/0&&(u.y=0),u}function oL(e,{min:t,max:n},i){return t!==void 0&&e<t?e=i?_t(t,e,i.min):Math.max(e,t):n!==void 0&&e>n&&(e=i?_t(n,e,i.max):Math.min(e,n)),e}function p0(e,t,n){return{min:t!==void 0?e.min+t:void 0,max:n!==void 0?e.max+n-(e.max-e.min):void 0}}function iL(e,{top:t,left:n,bottom:i,right:s}){return{x:p0(e.x,n,s),y:p0(e.y,t,i)}}function m0(e,t){let n=t.min-e.min,i=t.max-e.max;return t.max-t.min<e.max-e.min&&([n,i]=[i,n]),{min:n,max:i}}function sL(e,t){return{x:m0(e.x,t.x),y:m0(e.y,t.y)}}function aL(e,t){let n=.5;const i=bn(e),s=bn(t);return s>i?n=Ta(t.min,t.max-i,e.min):i>s&&(n=Ta(e.min,e.max-s,t.min)),eo(0,1,n)}function lL(e,t){const n={};return t.min!==void 0&&(n.min=t.min-e.min),t.max!==void 0&&(n.max=t.max-e.min),n}const yh=.35;function uL(e=yh){return e===!1?e=0:e===!0&&(e=yh),{x:g0(e,"left","right"),y:g0(e,"top","bottom")}}function g0(e,t,n){return{min:v0(e,t),max:v0(e,n)}}function v0(e,t){return typeof e=="number"?e:e[t]||0}const cL=new WeakMap;class dL{constructor(t){this.openDragLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic=Lt(),this.latestPointerEvent=null,this.latestPanInfo=null,this.visualElement=t}start(t,{snapToCursor:n=!1,distanceThreshold:i}={}){const{presenceContext:s}=this.visualElement;if(s&&s.isPresent===!1)return;const l=g=>{const{dragSnapToOrigin:y}=this.getProps();y?this.pauseAnimation():this.stopAnimation(),n&&this.snapToCursor(Wa(g).point)},u=(g,y)=>{const{drag:b,dragPropagation:_,onDragStart:k}=this.getProps();if(b&&!_&&(this.openDragLock&&this.openDragLock(),this.openDragLock=bM(b),!this.openDragLock))return;this.latestPointerEvent=g,this.latestPanInfo=y,this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),or(N=>{let M=this.getAxisMotionValue(N).get()||0;if(Nr.test(M)){const{projection:O}=this.visualElement;if(O&&O.layout){const B=O.layout.layoutBox[N];B&&(M=bn(B)*(parseFloat(M)/100))}}this.originPoint[N]=M}),k&&xt.postRender(()=>k(g,y)),gh(this.visualElement,"transform");const{animationState:C}=this.visualElement;C&&C.setActive("whileDrag",!0)},d=(g,y)=>{this.latestPointerEvent=g,this.latestPanInfo=y;const{dragPropagation:b,dragDirectionLock:_,onDirectionLock:k,onDrag:C}=this.getProps();if(!b&&!this.openDragLock)return;const{offset:N}=y;if(_&&this.currentDirection===null){this.currentDirection=fL(N),this.currentDirection!==null&&k&&k(this.currentDirection);return}this.updateAxis("x",y.point,N),this.updateAxis("y",y.point,N),this.visualElement.render(),C&&C(g,y)},f=(g,y)=>{this.latestPointerEvent=g,this.latestPanInfo=y,this.stop(g,y),this.latestPointerEvent=null,this.latestPanInfo=null},p=()=>or(g=>{var y;return this.getAnimationState(g)==="paused"&&((y=this.getAxisMotionValue(g).animation)==null?void 0:y.play())}),{dragSnapToOrigin:m}=this.getProps();this.panSession=new rS(t,{onSessionStart:l,onStart:u,onMove:d,onSessionEnd:f,resumeAnimation:p},{transformPagePoint:this.visualElement.getTransformPagePoint(),dragSnapToOrigin:m,distanceThreshold:i,contextWindow:nS(this.visualElement)})}stop(t,n){const i=t||this.latestPointerEvent,s=n||this.latestPanInfo,l=this.isDragging;if(this.cancel(),!l||!s||!i)return;const{velocity:u}=s;this.startAnimation(u);const{onDragEnd:d}=this.getProps();d&&xt.postRender(()=>d(i,s))}cancel(){this.isDragging=!1;const{projection:t,animationState:n}=this.visualElement;t&&(t.isAnimationBlocked=!1),this.panSession&&this.panSession.end(),this.panSession=void 0;const{dragPropagation:i}=this.getProps();!i&&this.openDragLock&&(this.openDragLock(),this.openDragLock=null),n&&n.setActive("whileDrag",!1)}updateAxis(t,n,i){const{drag:s}=this.getProps();if(!i||!cu(t,s,this.currentDirection))return;const l=this.getAxisMotionValue(t);let u=this.originPoint[t]+i[t];this.constraints&&this.constraints[t]&&(u=oL(u,this.constraints[t],this.elastic[t])),l.set(u)}resolveConstraints(){var l;const{dragConstraints:t,dragElastic:n}=this.getProps(),i=this.visualElement.projection&&!this.visualElement.projection.layout?this.visualElement.projection.measure(!1):(l=this.visualElement.projection)==null?void 0:l.layout,s=this.constraints;t&&qi(t)?this.constraints||(this.constraints=this.resolveRefConstraints()):t&&i?this.constraints=iL(i.layoutBox,t):this.constraints=!1,this.elastic=uL(n),s!==this.constraints&&i&&this.constraints&&!this.hasMutatedConstraints&&or(u=>{this.constraints!==!1&&this.getAxisMotionValue(u)&&(this.constraints[u]=lL(i.layoutBox[u],this.constraints[u]))})}resolveRefConstraints(){const{dragConstraints:t,onMeasureDragConstraints:n}=this.getProps();if(!t||!qi(t))return!1;const i=t.current,{projection:s}=this.visualElement;if(!s||!s.layout)return!1;const l=hj(i,s.root,this.visualElement.getTransformPagePoint());let u=sL(s.layout.layoutBox,l);if(n){const d=n(cj(u));this.hasMutatedConstraints=!!d,d&&(u=$1(d))}return u}startAnimation(t){const{drag:n,dragMomentum:i,dragElastic:s,dragTransition:l,dragSnapToOrigin:u,onDragTransitionEnd:d}=this.getProps(),f=this.constraints||{},p=or(m=>{if(!cu(m,n,this.currentDirection))return;let g=f&&f[m]||{};u&&(g={min:0,max:0});const y=s?200:1e6,b=s?40:1e7,_={type:"inertia",velocity:i?t[m]:0,bounceStiffness:y,bounceDamping:b,timeConstant:750,restDelta:1,restSpeed:10,...l,...g};return this.startAxisValueAnimation(m,_)});return Promise.all(p).then(d)}startAxisValueAnimation(t,n){const i=this.getAxisMotionValue(t);return gh(this.visualElement,t),i.start(Rp(t,i,0,n,this.visualElement,!1))}stopAnimation(){or(t=>this.getAxisMotionValue(t).stop())}pauseAnimation(){or(t=>{var n;return(n=this.getAxisMotionValue(t).animation)==null?void 0:n.pause()})}getAnimationState(t){var n;return(n=this.getAxisMotionValue(t).animation)==null?void 0:n.state}getAxisMotionValue(t){const n=`_drag${t.toUpperCase()}`,i=this.visualElement.getProps(),s=i[n];return s||this.visualElement.getValue(t,(i.initial?i.initial[t]:void 0)||0)}snapToCursor(t){or(n=>{const{drag:i}=this.getProps();if(!cu(n,i,this.currentDirection))return;const{projection:s}=this.visualElement,l=this.getAxisMotionValue(n);if(s&&s.layout){const{min:u,max:d}=s.layout.layoutBox[n];l.set(t[n]-_t(u,d,.5))}})}scalePositionWithinConstraints(){if(!this.visualElement.current)return;const{drag:t,dragConstraints:n}=this.getProps(),{projection:i}=this.visualElement;if(!qi(n)||!i||!this.constraints)return;this.stopAnimation();const s={x:0,y:0};or(u=>{const d=this.getAxisMotionValue(u);if(d&&this.constraints!==!1){const f=d.get();s[u]=aL({min:f,max:f},this.constraints[u])}});const{transformTemplate:l}=this.visualElement.getProps();this.visualElement.current.style.transform=l?l({},""):"none",i.root&&i.root.updateScroll(),i.updateLayout(),this.resolveConstraints(),or(u=>{if(!cu(u,t,null))return;const d=this.getAxisMotionValue(u),{min:f,max:p}=this.constraints[u];d.set(_t(f,p,s[u]))})}addListeners(){if(!this.visualElement.current)return;cL.set(this.visualElement,this);const t=this.visualElement.current,n=va(t,"pointerdown",f=>{const{drag:p,dragListener:m=!0}=this.getProps();p&&m&&this.start(f)}),i=()=>{const{dragConstraints:f}=this.getProps();qi(f)&&f.current&&(this.constraints=this.resolveRefConstraints())},{projection:s}=this.visualElement,l=s.addEventListener("measure",i);s&&!s.layout&&(s.root&&s.root.updateScroll(),s.updateLayout()),xt.read(i);const u=Ma(window,"resize",()=>this.scalePositionWithinConstraints()),d=s.addEventListener("didUpdate",(({delta:f,hasLayoutChanged:p})=>{this.isDragging&&p&&(or(m=>{const g=this.getAxisMotionValue(m);g&&(this.originPoint[m]+=f[m].translate,g.set(g.get()+f[m].translate))}),this.visualElement.render())}));return()=>{u(),n(),l(),d&&d()}}getProps(){const t=this.visualElement.getProps(),{drag:n=!1,dragDirectionLock:i=!1,dragPropagation:s=!1,dragConstraints:l=!1,dragElastic:u=yh,dragMomentum:d=!0}=t;return{...t,drag:n,dragDirectionLock:i,dragPropagation:s,dragConstraints:l,dragElastic:u,dragMomentum:d}}}function cu(e,t,n){return(t===!0||t===e)&&(n===null||n===e)}function fL(e,t=10){let n=null;return Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x"),n}class hL extends Io{constructor(t){super(t),this.removeGroupControls=ar,this.removeListeners=ar,this.controls=new dL(t)}mount(){const{dragControls:t}=this.node.getProps();t&&(this.removeGroupControls=t.subscribe(this.controls)),this.removeListeners=this.controls.addListeners()||ar}unmount(){this.removeGroupControls(),this.removeListeners()}}const y0=e=>(t,n)=>{e&&xt.postRender(()=>e(t,n))};class pL extends Io{constructor(){super(...arguments),this.removePointerDownListener=ar}onPointerDown(t){this.session=new rS(t,this.createPanHandlers(),{transformPagePoint:this.node.getTransformPagePoint(),contextWindow:nS(this.node)})}createPanHandlers(){const{onPanSessionStart:t,onPanStart:n,onPan:i,onPanEnd:s}=this.node.getProps();return{onSessionStart:y0(t),onStart:y0(n),onMove:i,onEnd:(l,u)=>{delete this.session,s&&xt.postRender(()=>s(l,u))}}}mount(){this.removePointerDownListener=va(this.node.current,"pointerdown",t=>this.onPointerDown(t))}update(){this.session&&this.session.updateHandlers(this.createPanHandlers())}unmount(){this.removePointerDownListener(),this.session&&this.session.end()}}const Su={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function w0(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}const ia={correct:(e,t)=>{if(!t.target)return e;if(typeof e=="string")if(Ve.test(e))e=parseFloat(e);else return e;const n=w0(e,t.target.x),i=w0(e,t.target.y);return`${n}% ${i}%`}},mL={correct:(e,{treeScale:t,projectionDelta:n})=>{const i=e,s=jo.parse(e);if(s.length>5)return i;const l=jo.createTransformer(e),u=typeof s[0]!="number"?1:0,d=n.x.scale*t.x,f=n.y.scale*t.y;s[0+u]/=d,s[1+u]/=f;const p=_t(d,f,.5);return typeof s[2+u]=="number"&&(s[2+u]/=p),typeof s[3+u]=="number"&&(s[3+u]/=p),l(s)}};let yf=!1;class gL extends S.Component{componentDidMount(){const{visualElement:t,layoutGroup:n,switchLayoutGroup:i,layoutId:s}=this.props,{projection:l}=t;IM(vL),l&&(n.group&&n.group.add(l),i&&i.register&&s&&i.register(l),yf&&l.root.didUpdate(),l.addEventListener("animationComplete",()=>{this.safeToRemove()}),l.setOptions({...l.options,onExitComplete:()=>this.safeToRemove()})),Su.hasEverUpdated=!0}getSnapshotBeforeUpdate(t){const{layoutDependency:n,visualElement:i,drag:s,isPresent:l}=this.props,{projection:u}=i;return u&&(u.isPresent=l,yf=!0,s||t.layoutDependency!==n||n===void 0||t.isPresent!==l?u.willUpdate():this.safeToRemove(),t.isPresent!==l&&(l?u.promote():u.relegate()||xt.postRender(()=>{const d=u.getStack();(!d||!d.members.length)&&this.safeToRemove()}))),null}componentDidUpdate(){const{projection:t}=this.props.visualElement;t&&(t.root.didUpdate(),wp.postRender(()=>{!t.currentAnimation&&t.isLead()&&this.safeToRemove()}))}componentWillUnmount(){const{visualElement:t,layoutGroup:n,switchLayoutGroup:i}=this.props,{projection:s}=t;yf=!0,s&&(s.scheduleCheckAfterUnmount(),n&&n.group&&n.group.remove(s),i&&i.deregister&&i.deregister(s))}safeToRemove(){const{safeToRemove:t}=this.props;t&&t()}render(){return null}}function iS(e){const[t,n]=NM(),i=S.useContext(zx);return x.jsx(gL,{...e,layoutGroup:i,switchLayoutGroup:S.useContext(F1),isPresent:t,safeToRemove:n})}const vL={borderRadius:{...ia,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:ia,borderTopRightRadius:ia,borderBottomLeftRadius:ia,borderBottomRightRadius:ia,boxShadow:mL};function yL(e,t,n){const i=gn(e)?e:ds(e);return i.start(Rp("",i,t,n)),i.animation}const wL=(e,t)=>e.depth-t.depth;class xL{constructor(){this.children=[],this.isDirty=!1}add(t){ep(this.children,t),this.isDirty=!0}remove(t){tp(this.children,t),this.isDirty=!0}forEach(t){this.isDirty&&this.children.sort(wL),this.isDirty=!1,this.children.forEach(t)}}function SL(e,t){const n=Ln.now(),i=({timestamp:s})=>{const l=s-n;l>=t&&(Mo(i),e(l-t))};return xt.setup(i,!0),()=>Mo(i)}const sS=["TopLeft","TopRight","BottomLeft","BottomRight"],bL=sS.length,x0=e=>typeof e=="string"?parseFloat(e):e,S0=e=>typeof e=="number"||Ve.test(e);function kL(e,t,n,i,s,l){s?(e.opacity=_t(0,n.opacity??1,EL(i)),e.opacityExit=_t(t.opacity??1,0,_L(i))):l&&(e.opacity=_t(t.opacity??1,n.opacity??1,i));for(let u=0;u<bL;u++){const d=`border${sS[u]}Radius`;let f=b0(t,d),p=b0(n,d);if(f===void 0&&p===void 0)continue;f||(f=0),p||(p=0),f===0||p===0||S0(f)===S0(p)?(e[d]=Math.max(_t(x0(f),x0(p),i),0),(Nr.test(p)||Nr.test(f))&&(e[d]+="%")):e[d]=p}(t.rotate||n.rotate)&&(e.rotate=_t(t.rotate||0,n.rotate||0,i))}function b0(e,t){return e[t]!==void 0?e[t]:e.borderRadius}const EL=aS(0,.5,Gx),_L=aS(.5,.95,ar);function aS(e,t,n){return i=>i<e?0:i>t?1:n(Ta(e,t,i))}function k0(e,t){e.min=t.min,e.max=t.max}function rr(e,t){k0(e.x,t.x),k0(e.y,t.y)}function E0(e,t){e.translate=t.translate,e.scale=t.scale,e.originPoint=t.originPoint,e.origin=t.origin}function _0(e,t,n,i,s){return e-=t,e=Bu(e,1/n,i),s!==void 0&&(e=Bu(e,1/s,i)),e}function CL(e,t=0,n=1,i=.5,s,l=e,u=e){if(Nr.test(t)&&(t=parseFloat(t),t=_t(u.min,u.max,t/100)-u.min),typeof t!="number")return;let d=_t(l.min,l.max,i);e===l&&(d-=t),e.min=_0(e.min,t,n,d,s),e.max=_0(e.max,t,n,d,s)}function C0(e,t,[n,i,s],l,u){CL(e,t[n],t[i],t[s],t.scale,l,u)}const PL=["x","scaleX","originX"],TL=["y","scaleY","originY"];function P0(e,t,n,i){C0(e.x,t,PL,n?n.x:void 0,i?i.x:void 0),C0(e.y,t,TL,n?n.y:void 0,i?i.y:void 0)}function T0(e){return e.translate===0&&e.scale===1}function lS(e){return T0(e.x)&&T0(e.y)}function R0(e,t){return e.min===t.min&&e.max===t.max}function RL(e,t){return R0(e.x,t.x)&&R0(e.y,t.y)}function D0(e,t){return Math.round(e.min)===Math.round(t.min)&&Math.round(e.max)===Math.round(t.max)}function uS(e,t){return D0(e.x,t.x)&&D0(e.y,t.y)}function N0(e){return bn(e.x)/bn(e.y)}function A0(e,t){return e.translate===t.translate&&e.scale===t.scale&&e.originPoint===t.originPoint}class DL{constructor(){this.members=[]}add(t){ep(this.members,t),t.scheduleRender()}remove(t){if(tp(this.members,t),t===this.prevLead&&(this.prevLead=void 0),t===this.lead){const n=this.members[this.members.length-1];n&&this.promote(n)}}relegate(t){const n=this.members.findIndex(s=>t===s);if(n===0)return!1;let i;for(let s=n;s>=0;s--){const l=this.members[s];if(l.isPresent!==!1){i=l;break}}return i?(this.promote(i),!0):!1}promote(t,n){const i=this.lead;if(t!==i&&(this.prevLead=i,this.lead=t,t.show(),i)){i.instance&&i.scheduleRender(),t.scheduleRender(),t.resumeFrom=i,n&&(t.resumeFrom.preserveOpacity=!0),i.snapshot&&(t.snapshot=i.snapshot,t.snapshot.latestValues=i.animationValues||i.latestValues),t.root&&t.root.isUpdating&&(t.isLayoutDirty=!0);const{crossfade:s}=t.options;s===!1&&i.hide()}}exitAnimationComplete(){this.members.forEach(t=>{const{options:n,resumingFrom:i}=t;n.onExitComplete&&n.onExitComplete(),i&&i.options.onExitComplete&&i.options.onExitComplete()})}scheduleRender(){this.members.forEach(t=>{t.instance&&t.scheduleRender(!1)})}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function NL(e,t,n){let i="";const s=e.x.translate/t.x,l=e.y.translate/t.y,u=(n==null?void 0:n.z)||0;if((s||l||u)&&(i=`translate3d(${s}px, ${l}px, ${u}px) `),(t.x!==1||t.y!==1)&&(i+=`scale(${1/t.x}, ${1/t.y}) `),n){const{transformPerspective:p,rotate:m,rotateX:g,rotateY:y,skewX:b,skewY:_}=n;p&&(i=`perspective(${p}px) ${i}`),m&&(i+=`rotate(${m}deg) `),g&&(i+=`rotateX(${g}deg) `),y&&(i+=`rotateY(${y}deg) `),b&&(i+=`skewX(${b}deg) `),_&&(i+=`skewY(${_}deg) `)}const d=e.x.scale*t.x,f=e.y.scale*t.y;return(d!==1||f!==1)&&(i+=`scale(${d}, ${f})`),i||"none"}const wf=["","X","Y","Z"],AL=1e3;let ML=0;function xf(e,t,n,i){const{latestValues:s}=t;s[e]&&(n[e]=s[e],t.setStaticValue(e,0),i&&(i[e]=0))}function cS(e){if(e.hasCheckedOptimisedAppear=!0,e.root===e)return;const{visualElement:t}=e.options;if(!t)return;const n=Y1(t);if(window.MotionHasOptimisedAnimation(n,"transform")){const{layout:s,layoutId:l}=e.options;window.MotionCancelOptimisedAnimation(n,"transform",xt,!(s||l))}const{parent:i}=e;i&&!i.hasCheckedOptimisedAppear&&cS(i)}function dS({attachResizeListener:e,defaultParent:t,measureScroll:n,checkIsScrollRoot:i,resetTransform:s}){return class{constructor(u={},d=t==null?void 0:t()){this.id=ML++,this.animationId=0,this.animationCommitId=0,this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.isProjectionDirty=!1,this.isSharedProjectionDirty=!1,this.isTransformDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.hasCheckedOptimisedAppear=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.hasTreeAnimated=!1,this.updateScheduled=!1,this.scheduleUpdate=()=>this.update(),this.projectionUpdateScheduled=!1,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{this.projectionUpdateScheduled=!1,this.nodes.forEach(OL),this.nodes.forEach(VL),this.nodes.forEach($L),this.nodes.forEach(zL)},this.resolvedRelativeTargetAt=0,this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.latestValues=u,this.root=d?d.root||d:this,this.path=d?[...d.path,d]:[],this.parent=d,this.depth=d?d.depth+1:0;for(let f=0;f<this.path.length;f++)this.path[f].shouldResetTransform=!0;this.root===this&&(this.nodes=new xL)}addEventListener(u,d){return this.eventHandlers.has(u)||this.eventHandlers.set(u,new op),this.eventHandlers.get(u).add(d)}notifyListeners(u,...d){const f=this.eventHandlers.get(u);f&&f.notify(...d)}hasListeners(u){return this.eventHandlers.has(u)}mount(u){if(this.instance)return;this.isSVG=C1(u)&&!TM(u),this.instance=u;const{layoutId:d,layout:f,visualElement:p}=this.options;if(p&&!p.current&&p.mount(u),this.root.nodes.add(this),this.parent&&this.parent.children.add(this),this.root.hasTreeAnimated&&(f||d)&&(this.isLayoutDirty=!0),e){let m,g=0;const y=()=>this.root.updateBlockedByResize=!1;xt.read(()=>{g=window.innerWidth}),e(u,()=>{const b=window.innerWidth;b!==g&&(g=b,this.root.updateBlockedByResize=!0,m&&m(),m=SL(y,250),Su.hasAnimatedSinceResize&&(Su.hasAnimatedSinceResize=!1,this.nodes.forEach(L0)))})}d&&this.root.registerSharedNode(d,this),this.options.animate!==!1&&p&&(d||f)&&this.addEventListener("didUpdate",({delta:m,hasLayoutChanged:g,hasRelativeLayoutChanged:y,layout:b})=>{if(this.isTreeAnimationBlocked()){this.target=void 0,this.relativeTarget=void 0;return}const _=this.options.transition||p.getDefaultTransition()||HL,{onLayoutAnimationStart:k,onLayoutAnimationComplete:C}=p.getProps(),N=!this.targetLayout||!uS(this.targetLayout,b),M=!g&&y;if(this.options.layoutRoot||this.resumeFrom||M||g&&(N||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0);const O={...vp(_,"layout"),onPlay:k,onComplete:C};(p.shouldReduceMotion||this.options.layoutRoot)&&(O.delay=0,O.type=!1),this.startAnimation(O),this.setAnimationOrigin(m,M)}else g||L0(this),this.isLead()&&this.options.onExitComplete&&this.options.onExitComplete();this.targetLayout=b})}unmount(){this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this);const u=this.getStack();u&&u.remove(this),this.parent&&this.parent.children.delete(this),this.instance=void 0,this.eventHandlers.clear(),Mo(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){return this.isAnimationBlocked||this.parent&&this.parent.isTreeAnimationBlocked()||!1}startUpdate(){this.isUpdateBlocked()||(this.isUpdating=!0,this.nodes&&this.nodes.forEach(UL),this.animationId++)}getTransformTemplate(){const{visualElement:u}=this.options;return u&&u.getProps().transformTemplate}willUpdate(u=!0){if(this.root.hasTreeAnimated=!0,this.root.isUpdateBlocked()){this.options.onExitComplete&&this.options.onExitComplete();return}if(window.MotionCancelOptimisedAnimation&&!this.hasCheckedOptimisedAppear&&cS(this),!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let m=0;m<this.path.length;m++){const g=this.path[m];g.shouldResetTransform=!0,g.updateScroll("snapshot"),g.options.layoutRoot&&g.willUpdate(!1)}const{layoutId:d,layout:f}=this.options;if(d===void 0&&!f)return;const p=this.getTransformTemplate();this.prevTransformTemplateValue=p?p(this.latestValues,""):void 0,this.updateSnapshot(),u&&this.notifyListeners("willUpdate")}update(){if(this.updateScheduled=!1,this.isUpdateBlocked()){this.unblockUpdate(),this.clearAllSnapshots(),this.nodes.forEach(M0);return}if(this.animationId<=this.animationCommitId){this.nodes.forEach(j0);return}this.animationCommitId=this.animationId,this.isUpdating?(this.isUpdating=!1,this.nodes.forEach(FL),this.nodes.forEach(jL),this.nodes.forEach(LL)):this.nodes.forEach(j0),this.clearAllSnapshots();const d=Ln.now();dn.delta=eo(0,1e3/60,d-dn.timestamp),dn.timestamp=d,dn.isProcessing=!0,lf.update.process(dn),lf.preRender.process(dn),lf.render.process(dn),dn.isProcessing=!1}didUpdate(){this.updateScheduled||(this.updateScheduled=!0,wp.read(this.scheduleUpdate))}clearAllSnapshots(){this.nodes.forEach(IL),this.sharedNodes.forEach(BL)}scheduleUpdateProjection(){this.projectionUpdateScheduled||(this.projectionUpdateScheduled=!0,xt.preRender(this.updateProjection,!1,!0))}scheduleCheckAfterUnmount(){xt.postRender(()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()})}updateSnapshot(){this.snapshot||!this.instance||(this.snapshot=this.measure(),this.snapshot&&!bn(this.snapshot.measuredBox.x)&&!bn(this.snapshot.measuredBox.y)&&(this.snapshot=void 0))}updateLayout(){if(!this.instance||(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead())&&!this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let f=0;f<this.path.length;f++)this.path[f].updateScroll();const u=this.layout;this.layout=this.measure(!1),this.layoutCorrected=Lt(),this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.layoutBox);const{visualElement:d}=this.options;d&&d.notify("LayoutMeasure",this.layout.layoutBox,u?u.layoutBox:void 0)}updateScroll(u="measure"){let d=!!(this.options.layoutScroll&&this.instance);if(this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===u&&(d=!1),d&&this.instance){const f=i(this.instance);this.scroll={animationId:this.root.animationId,phase:u,isRoot:f,offset:n(this.instance),wasRoot:this.scroll?this.scroll.isRoot:f}}}resetTransform(){if(!s)return;const u=this.isLayoutDirty||this.shouldResetTransform||this.options.alwaysMeasureLayout,d=this.projectionDelta&&!lS(this.projectionDelta),f=this.getTransformTemplate(),p=f?f(this.latestValues,""):void 0,m=p!==this.prevTransformTemplateValue;u&&this.instance&&(d||ni(this.latestValues)||m)&&(s(this.instance,p),this.shouldResetTransform=!1,this.scheduleRender())}measure(u=!0){const d=this.measurePageBox();let f=this.removeElementScroll(d);return u&&(f=this.removeTransform(f)),KL(f),{animationId:this.root.animationId,measuredBox:d,layoutBox:f,latestValues:{},source:this.id}}measurePageBox(){var p;const{visualElement:u}=this.options;if(!u)return Lt();const d=u.measureViewportBox();if(!(((p=this.scroll)==null?void 0:p.wasRoot)||this.path.some(GL))){const{scroll:m}=this.root;m&&(es(d.x,m.offset.x),es(d.y,m.offset.y))}return d}removeElementScroll(u){var f;const d=Lt();if(rr(d,u),(f=this.scroll)!=null&&f.wasRoot)return d;for(let p=0;p<this.path.length;p++){const m=this.path[p],{scroll:g,options:y}=m;m!==this.root&&g&&y.layoutScroll&&(g.wasRoot&&rr(d,u),es(d.x,g.offset.x),es(d.y,g.offset.y))}return d}applyTransform(u,d=!1){const f=Lt();rr(f,u);for(let p=0;p<this.path.length;p++){const m=this.path[p];!d&&m.options.layoutScroll&&m.scroll&&m!==m.root&&ts(f,{x:-m.scroll.offset.x,y:-m.scroll.offset.y}),ni(m.latestValues)&&ts(f,m.latestValues)}return ni(this.latestValues)&&ts(f,this.latestValues),f}removeTransform(u){const d=Lt();rr(d,u);for(let f=0;f<this.path.length;f++){const p=this.path[f];if(!p.instance||!ni(p.latestValues))continue;fh(p.latestValues)&&p.updateSnapshot();const m=Lt(),g=p.measurePageBox();rr(m,g),P0(d,p.latestValues,p.snapshot?p.snapshot.layoutBox:void 0,m)}return ni(this.latestValues)&&P0(d,this.latestValues),d}setTargetDelta(u){this.targetDelta=u,this.root.scheduleUpdateProjection(),this.isProjectionDirty=!0}setOptions(u){this.options={...this.options,...u,crossfade:u.crossfade!==void 0?u.crossfade:!0}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}forceRelativeParentToResolveTarget(){this.relativeParent&&this.relativeParent.resolvedRelativeTargetAt!==dn.timestamp&&this.relativeParent.resolveTargetDelta(!0)}resolveTargetDelta(u=!1){var y;const d=this.getLead();this.isProjectionDirty||(this.isProjectionDirty=d.isProjectionDirty),this.isTransformDirty||(this.isTransformDirty=d.isTransformDirty),this.isSharedProjectionDirty||(this.isSharedProjectionDirty=d.isSharedProjectionDirty);const f=!!this.resumingFrom||this!==d;if(!(u||f&&this.isSharedProjectionDirty||this.isProjectionDirty||(y=this.parent)!=null&&y.isProjectionDirty||this.attemptToResolveRelativeTarget||this.root.updateBlockedByResize))return;const{layout:m,layoutId:g}=this.options;if(!(!this.layout||!(m||g))){if(this.resolvedRelativeTargetAt=dn.timestamp,!this.targetDelta&&!this.relativeTarget){const b=this.getClosestProjectingParent();b&&b.layout&&this.animationProgress!==1?(this.relativeParent=b,this.forceRelativeParentToResolveTarget(),this.relativeTarget=Lt(),this.relativeTargetOrigin=Lt(),wa(this.relativeTargetOrigin,this.layout.layoutBox,b.layout.layoutBox),rr(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}if(!(!this.relativeTarget&&!this.targetDelta)&&(this.target||(this.target=Lt(),this.targetWithTransforms=Lt()),this.relativeTarget&&this.relativeTargetOrigin&&this.relativeParent&&this.relativeParent.target?(this.forceRelativeParentToResolveTarget(),eL(this.target,this.relativeTarget,this.relativeParent.target)):this.targetDelta?(this.resumingFrom?this.target=this.applyTransform(this.layout.layoutBox):rr(this.target,this.layout.layoutBox),B1(this.target,this.targetDelta)):rr(this.target,this.layout.layoutBox),this.attemptToResolveRelativeTarget)){this.attemptToResolveRelativeTarget=!1;const b=this.getClosestProjectingParent();b&&!!b.resumingFrom==!!this.resumingFrom&&!b.options.layoutScroll&&b.target&&this.animationProgress!==1?(this.relativeParent=b,this.forceRelativeParentToResolveTarget(),this.relativeTarget=Lt(),this.relativeTargetOrigin=Lt(),wa(this.relativeTargetOrigin,this.target,b.target),rr(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}}}getClosestProjectingParent(){if(!(!this.parent||fh(this.parent.latestValues)||U1(this.parent.latestValues)))return this.parent.isProjecting()?this.parent:this.parent.getClosestProjectingParent()}isProjecting(){return!!((this.relativeTarget||this.targetDelta||this.options.layoutRoot)&&this.layout)}calcProjection(){var _;const u=this.getLead(),d=!!this.resumingFrom||this!==u;let f=!0;if((this.isProjectionDirty||(_=this.parent)!=null&&_.isProjectionDirty)&&(f=!1),d&&(this.isSharedProjectionDirty||this.isTransformDirty)&&(f=!1),this.resolvedRelativeTargetAt===dn.timestamp&&(f=!1),f)return;const{layout:p,layoutId:m}=this.options;if(this.isTreeAnimating=!!(this.parent&&this.parent.isTreeAnimating||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!(p||m))return;rr(this.layoutCorrected,this.layout.layoutBox);const g=this.treeScale.x,y=this.treeScale.y;fj(this.layoutCorrected,this.treeScale,this.path,d),u.layout&&!u.target&&(this.treeScale.x!==1||this.treeScale.y!==1)&&(u.target=u.layout.layoutBox,u.targetWithTransforms=Lt());const{target:b}=u;if(!b){this.prevProjectionDelta&&(this.createProjectionDeltas(),this.scheduleRender());return}!this.projectionDelta||!this.prevProjectionDelta?this.createProjectionDeltas():(E0(this.prevProjectionDelta.x,this.projectionDelta.x),E0(this.prevProjectionDelta.y,this.projectionDelta.y)),ya(this.projectionDelta,this.layoutCorrected,b,this.latestValues),(this.treeScale.x!==g||this.treeScale.y!==y||!A0(this.projectionDelta.x,this.prevProjectionDelta.x)||!A0(this.projectionDelta.y,this.prevProjectionDelta.y))&&(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",b))}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(u=!0){var d;if((d=this.options.visualElement)==null||d.scheduleRender(),u){const f=this.getStack();f&&f.scheduleRender()}this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}createProjectionDeltas(){this.prevProjectionDelta=ns(),this.projectionDelta=ns(),this.projectionDeltaWithTransform=ns()}setAnimationOrigin(u,d=!1){const f=this.snapshot,p=f?f.latestValues:{},m={...this.latestValues},g=ns();(!this.relativeParent||!this.relativeParent.options.layoutRoot)&&(this.relativeTarget=this.relativeTargetOrigin=void 0),this.attemptToResolveRelativeTarget=!d;const y=Lt(),b=f?f.source:void 0,_=this.layout?this.layout.source:void 0,k=b!==_,C=this.getStack(),N=!C||C.members.length<=1,M=!!(k&&!N&&this.options.crossfade===!0&&!this.path.some(ZL));this.animationProgress=0;let O;this.mixTargetDelta=B=>{const Z=B/1e3;O0(g.x,u.x,Z),O0(g.y,u.y,Z),this.setTargetDelta(g),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&this.relativeParent&&this.relativeParent.layout&&(wa(y,this.layout.layoutBox,this.relativeParent.layout.layoutBox),WL(this.relativeTarget,this.relativeTargetOrigin,y,Z),O&&RL(this.relativeTarget,O)&&(this.isProjectionDirty=!1),O||(O=Lt()),rr(O,this.relativeTarget)),k&&(this.animationValues=m,kL(m,p,this.latestValues,Z,M,N)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=Z},this.mixTargetDelta(this.options.layoutRoot?1e3:0)}startAnimation(u){var d,f,p;this.notifyListeners("animationStart"),(d=this.currentAnimation)==null||d.stop(),(p=(f=this.resumingFrom)==null?void 0:f.currentAnimation)==null||p.stop(),this.pendingAnimation&&(Mo(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=xt.update(()=>{Su.hasAnimatedSinceResize=!0,this.motionValue||(this.motionValue=ds(0)),this.currentAnimation=yL(this.motionValue,[0,1e3],{...u,velocity:0,isSync:!0,onUpdate:m=>{this.mixTargetDelta(m),u.onUpdate&&u.onUpdate(m)},onStop:()=>{},onComplete:()=>{u.onComplete&&u.onComplete(),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0})}completeAnimation(){this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0);const u=this.getStack();u&&u.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){this.currentAnimation&&(this.mixTargetDelta&&this.mixTargetDelta(AL),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const u=this.getLead();let{targetWithTransforms:d,target:f,layout:p,latestValues:m}=u;if(!(!d||!f||!p)){if(this!==u&&this.layout&&p&&fS(this.options.animationType,this.layout.layoutBox,p.layoutBox)){f=this.target||Lt();const g=bn(this.layout.layoutBox.x);f.x.min=u.target.x.min,f.x.max=f.x.min+g;const y=bn(this.layout.layoutBox.y);f.y.min=u.target.y.min,f.y.max=f.y.min+y}rr(d,f),ts(d,m),ya(this.projectionDeltaWithTransform,this.layoutCorrected,d,m)}}registerSharedNode(u,d){this.sharedNodes.has(u)||this.sharedNodes.set(u,new DL),this.sharedNodes.get(u).add(d);const p=d.options.initialPromotionConfig;d.promote({transition:p?p.transition:void 0,preserveFollowOpacity:p&&p.shouldPreserveFollowOpacity?p.shouldPreserveFollowOpacity(d):void 0})}isLead(){const u=this.getStack();return u?u.lead===this:!0}getLead(){var d;const{layoutId:u}=this.options;return u?((d=this.getStack())==null?void 0:d.lead)||this:this}getPrevLead(){var d;const{layoutId:u}=this.options;return u?(d=this.getStack())==null?void 0:d.prevLead:void 0}getStack(){const{layoutId:u}=this.options;if(u)return this.root.sharedNodes.get(u)}promote({needsReset:u,transition:d,preserveFollowOpacity:f}={}){const p=this.getStack();p&&p.promote(this,f),u&&(this.projectionDelta=void 0,this.needsReset=!0),d&&this.setOptions({transition:d})}relegate(){const u=this.getStack();return u?u.relegate(this):!1}resetSkewAndRotation(){const{visualElement:u}=this.options;if(!u)return;let d=!1;const{latestValues:f}=u;if((f.z||f.rotate||f.rotateX||f.rotateY||f.rotateZ||f.skewX||f.skewY)&&(d=!0),!d)return;const p={};f.z&&xf("z",u,p,this.animationValues);for(let m=0;m<wf.length;m++)xf(`rotate${wf[m]}`,u,p,this.animationValues),xf(`skew${wf[m]}`,u,p,this.animationValues);u.render();for(const m in p)u.setStaticValue(m,p[m]),this.animationValues&&(this.animationValues[m]=p[m]);u.scheduleRender()}applyProjectionStyles(u,d){if(!this.instance||this.isSVG)return;if(!this.isVisible){u.visibility="hidden";return}const f=this.getTransformTemplate();if(this.needsReset){this.needsReset=!1,u.visibility="",u.opacity="",u.pointerEvents=xu(d==null?void 0:d.pointerEvents)||"",u.transform=f?f(this.latestValues,""):"none";return}const p=this.getLead();if(!this.projectionDelta||!this.layout||!p.target){this.options.layoutId&&(u.opacity=this.latestValues.opacity!==void 0?this.latestValues.opacity:1,u.pointerEvents=xu(d==null?void 0:d.pointerEvents)||""),this.hasProjected&&!ni(this.latestValues)&&(u.transform=f?f({},""):"none",this.hasProjected=!1);return}u.visibility="";const m=p.animationValues||p.latestValues;this.applyTransformsToTarget();let g=NL(this.projectionDeltaWithTransform,this.treeScale,m);f&&(g=f(m,g)),u.transform=g;const{x:y,y:b}=this.projectionDelta;u.transformOrigin=`${y.origin*100}% ${b.origin*100}% 0`,p.animationValues?u.opacity=p===this?m.opacity??this.latestValues.opacity??1:this.preserveOpacity?this.latestValues.opacity:m.opacityExit:u.opacity=p===this?m.opacity!==void 0?m.opacity:"":m.opacityExit!==void 0?m.opacityExit:0;for(const _ in Aa){if(m[_]===void 0)continue;const{correct:k,applyTo:C,isCSSVariable:N}=Aa[_],M=g==="none"?m[_]:k(m[_],p);if(C){const O=C.length;for(let B=0;B<O;B++)u[C[B]]=M}else N?this.options.visualElement.renderState.vars[_]=M:u[_]=M}this.options.layoutId&&(u.pointerEvents=p===this?xu(d==null?void 0:d.pointerEvents)||"":"none")}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach(u=>{var d;return(d=u.currentAnimation)==null?void 0:d.stop()}),this.root.nodes.forEach(M0),this.root.sharedNodes.clear()}}}function jL(e){e.updateLayout()}function LL(e){var n;const t=((n=e.resumeFrom)==null?void 0:n.snapshot)||e.snapshot;if(e.isLead()&&e.layout&&t&&e.hasListeners("didUpdate")){const{layoutBox:i,measuredBox:s}=e.layout,{animationType:l}=e.options,u=t.source!==e.layout.source;l==="size"?or(g=>{const y=u?t.measuredBox[g]:t.layoutBox[g],b=bn(y);y.min=i[g].min,y.max=y.min+b}):fS(l,t.layoutBox,i)&&or(g=>{const y=u?t.measuredBox[g]:t.layoutBox[g],b=bn(i[g]);y.max=y.min+b,e.relativeTarget&&!e.currentAnimation&&(e.isProjectionDirty=!0,e.relativeTarget[g].max=e.relativeTarget[g].min+b)});const d=ns();ya(d,i,t.layoutBox);const f=ns();u?ya(f,e.applyTransform(s,!0),t.measuredBox):ya(f,i,t.layoutBox);const p=!lS(d);let m=!1;if(!e.resumeFrom){const g=e.getClosestProjectingParent();if(g&&!g.resumeFrom){const{snapshot:y,layout:b}=g;if(y&&b){const _=Lt();wa(_,t.layoutBox,y.layoutBox);const k=Lt();wa(k,i,b.layoutBox),uS(_,k)||(m=!0),g.options.layoutRoot&&(e.relativeTarget=k,e.relativeTargetOrigin=_,e.relativeParent=g)}}}e.notifyListeners("didUpdate",{layout:i,snapshot:t,delta:f,layoutDelta:d,hasLayoutChanged:p,hasRelativeLayoutChanged:m})}else if(e.isLead()){const{onExitComplete:i}=e.options;i&&i()}e.options.transition=void 0}function OL(e){e.parent&&(e.isProjecting()||(e.isProjectionDirty=e.parent.isProjectionDirty),e.isSharedProjectionDirty||(e.isSharedProjectionDirty=!!(e.isProjectionDirty||e.parent.isProjectionDirty||e.parent.isSharedProjectionDirty)),e.isTransformDirty||(e.isTransformDirty=e.parent.isTransformDirty))}function zL(e){e.isProjectionDirty=e.isSharedProjectionDirty=e.isTransformDirty=!1}function IL(e){e.clearSnapshot()}function M0(e){e.clearMeasurements()}function j0(e){e.isLayoutDirty=!1}function FL(e){const{visualElement:t}=e.options;t&&t.getProps().onBeforeLayoutMeasure&&t.notify("BeforeLayoutMeasure"),e.resetTransform()}function L0(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0,e.isProjectionDirty=!0}function VL(e){e.resolveTargetDelta()}function $L(e){e.calcProjection()}function UL(e){e.resetSkewAndRotation()}function BL(e){e.removeLeadSnapshot()}function O0(e,t,n){e.translate=_t(t.translate,0,n),e.scale=_t(t.scale,1,n),e.origin=t.origin,e.originPoint=t.originPoint}function z0(e,t,n,i){e.min=_t(t.min,n.min,i),e.max=_t(t.max,n.max,i)}function WL(e,t,n,i){z0(e.x,t.x,n.x,i),z0(e.y,t.y,n.y,i)}function ZL(e){return e.animationValues&&e.animationValues.opacityExit!==void 0}const HL={duration:.45,ease:[.4,0,.1,1]},I0=e=>typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().includes(e),F0=I0("applewebkit/")&&!I0("chrome/")?Math.round:ar;function V0(e){e.min=F0(e.min),e.max=F0(e.max)}function KL(e){V0(e.x),V0(e.y)}function fS(e,t,n){return e==="position"||e==="preserve-aspect"&&!qj(N0(t),N0(n),.2)}function GL(e){var t;return e!==e.root&&((t=e.scroll)==null?void 0:t.wasRoot)}const YL=dS({attachResizeListener:(e,t)=>Ma(e,"resize",t),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),Sf={current:void 0},hS=dS({measureScroll:e=>({x:e.scrollLeft,y:e.scrollTop}),defaultParent:()=>{if(!Sf.current){const e=new YL({});e.mount(window),e.setOptions({layoutScroll:!0}),Sf.current=e}return Sf.current},resetTransform:(e,t)=>{e.style.transform=t!==void 0?t:"none"},checkIsScrollRoot:e=>window.getComputedStyle(e).position==="fixed"}),XL={pan:{Feature:pL},drag:{Feature:hL,ProjectionNode:hS,MeasureLayout:iS}};function $0(e,t,n){const{props:i}=e;e.animationState&&i.whileHover&&e.animationState.setActive("whileHover",n==="Start");const s="onHover"+n,l=i[s];l&&xt.postRender(()=>l(t,Wa(t)))}class QL extends Io{mount(){const{current:t}=this.node;t&&(this.unmount=kM(t,(n,i)=>($0(this.node,i,"Start"),s=>$0(this.node,s,"End"))))}unmount(){}}class JL extends Io{constructor(){super(...arguments),this.isActive=!1}onFocus(){let t=!1;try{t=this.node.current.matches(":focus-visible")}catch{t=!0}!t||!this.node.animationState||(this.node.animationState.setActive("whileFocus",!0),this.isActive=!0)}onBlur(){!this.isActive||!this.node.animationState||(this.node.animationState.setActive("whileFocus",!1),this.isActive=!1)}mount(){this.unmount=$a(Ma(this.node.current,"focus",()=>this.onFocus()),Ma(this.node.current,"blur",()=>this.onBlur()))}unmount(){}}function U0(e,t,n){const{props:i}=e;if(e.current instanceof HTMLButtonElement&&e.current.disabled)return;e.animationState&&i.whileTap&&e.animationState.setActive("whileTap",n==="Start");const s="onTap"+(n==="End"?"":n),l=i[s];l&&xt.postRender(()=>l(t,Wa(t)))}class qL extends Io{mount(){const{current:t}=this.node;t&&(this.unmount=PM(t,(n,i)=>(U0(this.node,i,"Start"),(s,{success:l})=>U0(this.node,s,l?"End":"Cancel")),{useGlobalTarget:this.node.props.globalTapTarget}))}unmount(){}}const wh=new WeakMap,bf=new WeakMap,eO=e=>{const t=wh.get(e.target);t&&t(e)},tO=e=>{e.forEach(eO)};function nO({root:e,...t}){const n=e||document;bf.has(n)||bf.set(n,{});const i=bf.get(n),s=JSON.stringify(t);return i[s]||(i[s]=new IntersectionObserver(tO,{root:e,...t})),i[s]}function rO(e,t,n){const i=nO(t);return wh.set(e,n),i.observe(e),()=>{wh.delete(e),i.unobserve(e)}}const oO={some:0,all:1};class iO extends Io{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1}startObserver(){this.unmount();const{viewport:t={}}=this.node.getProps(),{root:n,margin:i,amount:s="some",once:l}=t,u={root:n?n.current:void 0,rootMargin:i,threshold:typeof s=="number"?s:oO[s]},d=f=>{const{isIntersecting:p}=f;if(this.isInView===p||(this.isInView=p,l&&!p&&this.hasEnteredView))return;p&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",p);const{onViewportEnter:m,onViewportLeave:g}=this.node.getProps(),y=p?m:g;y&&y(f)};return rO(this.node.current,u,d)}mount(){this.startObserver()}update(){if(typeof IntersectionObserver>"u")return;const{props:t,prevProps:n}=this.node;["amount","margin","root"].some(sO(t,n))&&this.startObserver()}unmount(){}}function sO({viewport:e={}},{viewport:t={}}={}){return n=>e[n]!==t[n]}const aO={inView:{Feature:iO},tap:{Feature:qL},focus:{Feature:JL},hover:{Feature:QL}},lO={layout:{ProjectionNode:hS,MeasureLayout:iS}},uO={...Kj,...aO,...XL,...lO},nn=uj(uO,bj);var cO="AspectRatio",pS=S.forwardRef((e,t)=>{const{ratio:n=1/1,style:i,...s}=e;return x.jsx("div",{style:{position:"relative",width:"100%",paddingBottom:`${100/n}%`},"data-radix-aspect-ratio-wrapper":"",children:x.jsx(Sr.div,{...s,ref:t,style:{...i,position:"absolute",top:0,right:0,bottom:0,left:0}})})});pS.displayName=cO;var dO=pS;const mS=dO,B0={hidden:{opacity:0},visible:{opacity:1,transition:{staggerChildren:.1}}},sa={hidden:{y:20,opacity:0},visible:{y:0,opacity:1,transition:{duration:.5}}};function fO(){return x.jsxs("div",{className:"bg-background text-foreground",children:[x.jsx("section",{className:"py-24 md:py-32 lg:py-40",children:x.jsx("div",{className:"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8",children:x.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center",children:[x.jsxs(nn.div,{initial:{opacity:0,x:-50},animate:{opacity:1,x:0},transition:{duration:.7},className:"space-y-6 text-center lg:text-left",children:[x.jsxs("h1",{className:"text-4xl sm:text-5xl md:text-6xl font-bold font-display tracking-tight",children:["Hi, I'm ",x.jsx("span",{className:"text-indigo-600",children:jn.name})]}),x.jsx("p",{className:"text-lg text-muted-foreground max-w-xl mx-auto lg:mx-0",children:jn.about}),x.jsxs("div",{className:"flex flex-col sm:flex-row gap-4 justify-center lg:justify-start",children:[x.jsx(Mn,{asChild:!0,size:"lg",className:"bg-indigo-600 hover:bg-indigo-700 text-white",children:x.jsxs(_a,{to:"/contact",children:["Contact Me ",x.jsx(Fv,{className:"ml-2 h-5 w-5"})]})}),x.jsxs(Mn,{variant:"outline",size:"lg",onClick:()=>Jf.info("CV is not available yet."),children:["Download CV ",x.jsx(cC,{className:"ml-2 h-5 w-5"})]})]})]}),x.jsx(nn.div,{initial:{opacity:0,scale:.8},animate:{opacity:1,scale:1},transition:{duration:.7,delay:.2},className:"flex justify-center",children:x.jsxs("div",{className:"relative",children:[x.jsx("div",{className:"absolute -inset-2 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-full blur-xl opacity-50 animate-pulse"}),x.jsx("img",{src:jn.photoUrl,alt:jn.name,className:"relative w-64 h-64 md:w-80 md:h-80 rounded-full object-cover border-4 border-background shadow-lg"})]})})]})})}),x.jsx("section",{className:"py-16 md:py-24 bg-gray-50 dark:bg-gray-900/50",children:x.jsxs("div",{className:"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8",children:[x.jsxs(nn.div,{initial:"hidden",whileInView:"visible",viewport:{once:!0,amount:.3},variants:sa,className:"text-center",children:[x.jsx("h2",{className:"text-3xl font-bold tracking-tight sm:text-4xl",children:"My Skills"}),x.jsx("p",{className:"mt-4 text-lg text-muted-foreground",children:"Technologies I'm proficient with."})]}),x.jsx(nn.div,{initial:"hidden",whileInView:"visible",viewport:{once:!0,amount:.2},variants:B0,className:"mt-12 flex flex-wrap justify-center gap-4",children:_P.map(e=>x.jsx(nn.div,{variants:sa,children:x.jsx(Wf,{variant:"outline",className:"text-lg px-6 py-3 transition-all hover:bg-accent",children:e.name})},e.name))})]})}),x.jsx("section",{className:"py-16 md:py-24",children:x.jsxs("div",{className:"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8",children:[x.jsxs(nn.div,{initial:"hidden",whileInView:"visible",viewport:{once:!0,amount:.3},variants:sa,className:"text-center",children:[x.jsx("h2",{className:"text-3xl font-bold tracking-tight sm:text-4xl",children:"Featured Projects"}),x.jsx("p",{className:"mt-4 text-lg text-muted-foreground",children:"A selection of my recent work."})]}),x.jsx(nn.div,{initial:"hidden",whileInView:"visible",viewport:{once:!0,amount:.1},variants:B0,className:"mt-12 grid gap-8 md:grid-cols-2 lg:grid-cols-3",children:ex.slice(0,3).map(e=>x.jsx(nn.div,{variants:sa,children:x.jsxs(Ao,{className:"h-full flex flex-col overflow-hidden transition-all duration-300 hover:shadow-xl hover:-translate-y-1",children:[x.jsx(mS,{ratio:16/9,children:x.jsx("img",{src:e.imageUrl,alt:e.title,className:"object-cover w-full h-full"})}),x.jsxs("div",{className:"p-6 flex flex-col flex-grow",children:[x.jsx(us,{children:e.title}),x.jsx(Qu,{className:"mt-2 flex-grow",children:e.description}),x.jsxs("div",{className:"mt-4",children:[x.jsx("h4",{className:"font-semibold mb-2 text-sm text-foreground",children:"Skills Used:"}),x.jsx("div",{className:"flex flex-wrap gap-2",children:e.skillsUsed.map(t=>x.jsx(Wf,{variant:"secondary",children:t},t))})]}),x.jsx(Mn,{asChild:!0,className:"mt-6 w-full bg-indigo-600 hover:bg-indigo-700 text-white",children:x.jsxs("a",{href:e.websiteLink,target:"_blank",rel:"noopener noreferrer",children:["Visit Website ",x.jsx(Ow,{className:"ml-2 h-4 w-4"})]})})]})]})},e.title))}),x.jsx("div",{className:"mt-12 text-center",children:x.jsx(Mn,{asChild:!0,variant:"outline",children:x.jsxs(_a,{to:"/projects",children:["View All Projects ",x.jsx(Fv,{className:"ml-2 h-4 w-4"})]})})})]})}),x.jsx("section",{className:"py-16 md:py-24 bg-gray-50 dark:bg-gray-900/50",children:x.jsxs("div",{className:"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8",children:[x.jsxs("div",{className:"max-w-2xl mx-auto text-center",children:[x.jsx("h2",{className:"text-3xl font-bold tracking-tight sm:text-4xl",children:"Contact Me"}),x.jsx("p",{className:"mt-4 text-lg text-muted-foreground",children:"Interested in working together? Let's talk."})]}),x.jsx(nn.div,{initial:"hidden",whileInView:"visible",viewport:{once:!0,amount:.2},variants:sa,className:"mt-12 max-w-xl mx-auto",children:x.jsx(Ao,{children:x.jsx(cs,{className:"p-6",children:x.jsx(Ox,{})})})})]})})]})}const hO={hidden:{opacity:0},visible:{opacity:1,transition:{staggerChildren:.1}}},pO={hidden:{y:20,opacity:0},visible:{y:0,opacity:1,transition:{duration:.5}}};function mO(){return x.jsx("div",{className:"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8",children:x.jsxs("div",{className:"py-16 md:py-24 lg:py-32",children:[x.jsxs(nn.div,{initial:{opacity:0,y:-20},animate:{opacity:1,y:0},transition:{duration:.5},className:"text-center mb-12",children:[x.jsx("h1",{className:"text-4xl font-bold tracking-tight text-foreground sm:text-5xl lg:text-6xl",children:"My Projects"}),x.jsx("p",{className:"mt-4 max-w-2xl mx-auto text-lg text-muted-foreground",children:"Here's a collection of my work, showcasing my skills in web development."})]}),x.jsx(nn.div,{variants:hO,initial:"hidden",animate:"visible",className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8",children:ex.map(e=>x.jsx(nn.div,{variants:pO,children:x.jsxs(Ao,{className:"h-full flex flex-col overflow-hidden transition-all duration-300 hover:shadow-xl hover:-translate-y-1",children:[x.jsx(mS,{ratio:16/9,children:x.jsx("img",{src:e.imageUrl,alt:e.title,className:"object-cover w-full h-full"})}),x.jsxs("div",{className:"p-6 flex flex-col flex-grow",children:[x.jsx(us,{children:e.title}),x.jsx(Qu,{className:"mt-2 flex-grow",children:e.description}),x.jsxs("div",{className:"mt-4",children:[x.jsx("h4",{className:"font-semibold mb-2 text-sm text-foreground",children:"Skills Used:"}),x.jsx("div",{className:"flex flex-wrap gap-2",children:e.skillsUsed.map(t=>x.jsx(Wf,{variant:"secondary",children:t},t))})]}),x.jsx(Mn,{asChild:!0,className:"mt-6 w-full bg-indigo-600 hover:bg-indigo-700 text-white",children:x.jsxs("a",{href:e.websiteLink,target:"_blank",rel:"noopener noreferrer",children:["Visit Website ",x.jsx(Ow,{className:"ml-2 h-4 w-4"})]})})]})]})},e.title))})]})})}const W0=({item:e,isLast:t})=>x.jsxs(nn.div,{className:"flex gap-6",initial:{opacity:0,y:20},whileInView:{opacity:1,y:0},viewport:{once:!0},transition:{duration:.5},children:[x.jsxs("div",{className:"flex flex-col items-center",children:[x.jsx("div",{className:"flex-shrink-0 w-12 h-12 rounded-full bg-primary text-primary-foreground flex items-center justify-center",children:x.jsx(e.icon,{className:"w-6 h-6"})}),!t&&x.jsx("div",{className:"w-px h-full bg-border flex-grow mt-2"})]}),x.jsxs("div",{className:"pb-12",children:[x.jsx("p",{className:"text-sm font-medium text-indigo-600",children:e.year||e.period}),x.jsx("h3",{className:"text-lg font-semibold text-foreground mt-1",children:e.degree||e.role}),x.jsx("p",{className:"text-muted-foreground text-sm",children:e.institution||e.company}),e.description&&x.jsx("p",{className:"mt-2 text-muted-foreground",children:e.description})]})]});function gO(){return x.jsx("div",{className:"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8",children:x.jsx("div",{className:"py-16 md:py-24 lg:py-32",children:x.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-3 gap-12 lg:gap-16",children:[x.jsxs("div",{className:"lg:col-span-1 space-y-8",children:[x.jsx(nn.div,{initial:{opacity:0,x:-50},animate:{opacity:1,x:0},transition:{duration:.5},children:x.jsxs(Ao,{children:[x.jsx(Au,{children:x.jsx(us,{children:"About Me"})}),x.jsx(cs,{className:"space-y-4",children:x.jsx("p",{className:"text-muted-foreground",children:jn.about})})]})}),x.jsx(nn.div,{initial:{opacity:0,x:-50},animate:{opacity:1,x:0},transition:{duration:.5,delay:.2},children:x.jsxs(Ao,{children:[x.jsx(Au,{children:x.jsx(us,{children:"Contact Information"})}),x.jsxs(cs,{className:"space-y-4",children:[tx.map(e=>x.jsxs("div",{className:"flex items-center gap-3",children:[x.jsx(e.icon,{className:"w-5 h-5 text-muted-foreground"}),x.jsx("a",{href:e.href,className:"text-foreground hover:text-indigo-600 transition-colors",children:e.value})]},e.label)),x.jsx("div",{className:"flex gap-2 pt-2",children:jn.socials.map(e=>x.jsx(Mn,{variant:"outline",size:"icon",asChild:!0,children:x.jsxs("a",{href:e.url,target:"_blank",rel:"noopener noreferrer",children:[x.jsx(e.icon,{className:"h-5 w-5"}),x.jsx("span",{className:"sr-only",children:e.name})]})},e.name))})]})]})})]}),x.jsxs("div",{className:"lg:col-span-2 space-y-16",children:[x.jsxs("div",{children:[x.jsx("h2",{className:"text-3xl font-bold tracking-tight text-foreground sm:text-4xl mb-8",children:"Education"}),x.jsx("div",{children:Yv.map((e,t)=>x.jsx(W0,{item:e,isLast:t===Yv.length-1},t))})]}),x.jsxs("div",{children:[x.jsx("h2",{className:"text-3xl font-bold tracking-tight text-foreground sm:text-4xl mb-8",children:"Experience"}),x.jsx("div",{children:Xv.map((e,t)=>x.jsx(W0,{item:e,isLast:t===Xv.length-1},t))})]})]})]})})})}function vO(){return x.jsx("div",{className:"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8",children:x.jsxs("div",{className:"py-16 md:py-24 lg:py-32",children:[x.jsxs(nn.div,{initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:.5},className:"text-center mb-12",children:[x.jsx("h1",{className:"text-4xl font-bold tracking-tight text-foreground sm:text-5xl lg:text-6xl",children:"Get in Touch"}),x.jsx("p",{className:"mt-4 max-w-2xl mx-auto text-lg text-muted-foreground",children:"Have a project in mind or just want to say hello? I'd love to hear from you."})]}),x.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-3 gap-12",children:[x.jsx(nn.div,{initial:{opacity:0,x:-50},animate:{opacity:1,x:0},transition:{duration:.5,delay:.2},className:"lg:col-span-1 space-y-6",children:tx.map(e=>x.jsxs("div",{className:"flex items-start gap-4",children:[x.jsx("div",{className:"flex-shrink-0 w-12 h-12 rounded-lg bg-accent text-accent-foreground flex items-center justify-center",children:x.jsx(e.icon,{className:"w-6 h-6"})}),x.jsxs("div",{children:[x.jsx("h3",{className:"text-lg font-semibold text-foreground",children:e.label}),x.jsx("a",{href:e.href,className:"text-muted-foreground hover:text-indigo-600 transition-colors",children:e.value})]})]},e.label))}),x.jsx(nn.div,{initial:{opacity:0,x:50},animate:{opacity:1,x:0},transition:{duration:.5,delay:.4},className:"lg:col-span-2",children:x.jsxs(Ao,{children:[x.jsxs(Au,{children:[x.jsx(us,{children:"Send me a message"}),x.jsx(Qu,{children:"Fill out the form below and I'll get back to you as soon as possible."})]}),x.jsx(cs,{children:x.jsx(Ox,{})})]})})]})]})})}function No(e,t,{checkForDefaultPrevented:n=!0}={}){return function(s){if(e==null||e(s),n===!1||!s.defaultPrevented)return t==null?void 0:t(s)}}function yO(e,t){const n=S.createContext(t),i=l=>{const{children:u,...d}=l,f=S.useMemo(()=>d,Object.values(d));return x.jsx(n.Provider,{value:f,children:u})};i.displayName=e+"Provider";function s(l){const u=S.useContext(n);if(u)return u;if(t!==void 0)return t;throw new Error(`\`${l}\` must be used within \`${e}\``)}return[i,s]}function wO(e,t=[]){let n=[];function i(l,u){const d=S.createContext(u),f=n.length;n=[...n,u];const p=g=>{var N;const{scope:y,children:b,..._}=g,k=((N=y==null?void 0:y[e])==null?void 0:N[f])||d,C=S.useMemo(()=>_,Object.values(_));return x.jsx(k.Provider,{value:C,children:b})};p.displayName=l+"Provider";function m(g,y){var k;const b=((k=y==null?void 0:y[e])==null?void 0:k[f])||d,_=S.useContext(b);if(_)return _;if(u!==void 0)return u;throw new Error(`\`${g}\` must be used within \`${l}\``)}return[p,m]}const s=()=>{const l=n.map(u=>S.createContext(u));return function(d){const f=(d==null?void 0:d[e])||l;return S.useMemo(()=>({[`__scope${e}`]:{...d,[e]:f}}),[d,f])}};return s.scopeName=e,[i,xO(s,...t)]}function xO(...e){const t=e[0];if(e.length===1)return t;const n=()=>{const i=e.map(s=>({useScope:s(),scopeName:s.scopeName}));return function(l){const u=i.reduce((d,{useScope:f,scopeName:p})=>{const g=f(l)[`__scope${p}`];return{...d,...g}},{});return S.useMemo(()=>({[`__scope${t.scopeName}`]:u}),[u])}};return n.scopeName=t.scopeName,n}var ja=globalThis!=null&&globalThis.document?S.useLayoutEffect:()=>{},SO=Ch[" useId ".trim().toString()]||(()=>{}),bO=0;function kf(e){const[t,n]=S.useState(SO());return ja(()=>{n(i=>i??String(bO++))},[e]),e||(t?`radix-${t}`:"")}var kO=Ch[" useInsertionEffect ".trim().toString()]||ja;function EO({prop:e,defaultProp:t,onChange:n=()=>{},caller:i}){const[s,l,u]=_O({defaultProp:t,onChange:n}),d=e!==void 0,f=d?e:s;{const m=S.useRef(e!==void 0);S.useEffect(()=>{const g=m.current;g!==d&&console.warn(`${i} is changing from ${g?"controlled":"uncontrolled"} to ${d?"controlled":"uncontrolled"}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`),m.current=d},[d,i])}const p=S.useCallback(m=>{var g;if(d){const y=CO(m)?m(e):m;y!==e&&((g=u.current)==null||g.call(u,y))}else l(m)},[d,e,l,u]);return[f,p]}function _O({defaultProp:e,onChange:t}){const[n,i]=S.useState(e),s=S.useRef(n),l=S.useRef(t);return kO(()=>{l.current=t},[t]),S.useEffect(()=>{var u;s.current!==n&&((u=l.current)==null||u.call(l,n),s.current=n)},[n,s]),[n,i,l]}function CO(e){return typeof e=="function"}function La(e){const t=S.useRef(e);return S.useEffect(()=>{t.current=e}),S.useMemo(()=>(...n)=>{var i;return(i=t.current)==null?void 0:i.call(t,...n)},[])}function PO(e,t=globalThis==null?void 0:globalThis.document){const n=La(e);S.useEffect(()=>{const i=s=>{s.key==="Escape"&&n(s)};return t.addEventListener("keydown",i,{capture:!0}),()=>t.removeEventListener("keydown",i,{capture:!0})},[n,t])}var TO="DismissableLayer",xh="dismissableLayer.update",RO="dismissableLayer.pointerDownOutside",DO="dismissableLayer.focusOutside",Z0,gS=S.createContext({layers:new Set,layersWithOutsidePointerEventsDisabled:new Set,branches:new Set}),vS=S.forwardRef((e,t)=>{const{disableOutsidePointerEvents:n=!1,onEscapeKeyDown:i,onPointerDownOutside:s,onFocusOutside:l,onInteractOutside:u,onDismiss:d,...f}=e,p=S.useContext(gS),[m,g]=S.useState(null),y=(m==null?void 0:m.ownerDocument)??(globalThis==null?void 0:globalThis.document),[,b]=S.useState({}),_=yi(t,R=>g(R)),k=Array.from(p.layers),[C]=[...p.layersWithOutsidePointerEventsDisabled].slice(-1),N=k.indexOf(C),M=m?k.indexOf(m):-1,O=p.layersWithOutsidePointerEventsDisabled.size>0,B=M>=N,Z=MO(R=>{const I=R.target,ae=[...p.branches].some(le=>le.contains(I));!B||ae||(s==null||s(R),u==null||u(R),R.defaultPrevented||d==null||d())},y),re=jO(R=>{const I=R.target;[...p.branches].some(le=>le.contains(I))||(l==null||l(R),u==null||u(R),R.defaultPrevented||d==null||d())},y);return PO(R=>{M===p.layers.size-1&&(i==null||i(R),!R.defaultPrevented&&d&&(R.preventDefault(),d()))},y),S.useEffect(()=>{if(m)return n&&(p.layersWithOutsidePointerEventsDisabled.size===0&&(Z0=y.body.style.pointerEvents,y.body.style.pointerEvents="none"),p.layersWithOutsidePointerEventsDisabled.add(m)),p.layers.add(m),H0(),()=>{n&&p.layersWithOutsidePointerEventsDisabled.size===1&&(y.body.style.pointerEvents=Z0)}},[m,y,n,p]),S.useEffect(()=>()=>{m&&(p.layers.delete(m),p.layersWithOutsidePointerEventsDisabled.delete(m),H0())},[m,p]),S.useEffect(()=>{const R=()=>b({});return document.addEventListener(xh,R),()=>document.removeEventListener(xh,R)},[]),x.jsx(Sr.div,{...f,ref:_,style:{pointerEvents:O?B?"auto":"none":void 0,...e.style},onFocusCapture:No(e.onFocusCapture,re.onFocusCapture),onBlurCapture:No(e.onBlurCapture,re.onBlurCapture),onPointerDownCapture:No(e.onPointerDownCapture,Z.onPointerDownCapture)})});vS.displayName=TO;var NO="DismissableLayerBranch",AO=S.forwardRef((e,t)=>{const n=S.useContext(gS),i=S.useRef(null),s=yi(t,i);return S.useEffect(()=>{const l=i.current;if(l)return n.branches.add(l),()=>{n.branches.delete(l)}},[n.branches]),x.jsx(Sr.div,{...e,ref:s})});AO.displayName=NO;function MO(e,t=globalThis==null?void 0:globalThis.document){const n=La(e),i=S.useRef(!1),s=S.useRef(()=>{});return S.useEffect(()=>{const l=d=>{if(d.target&&!i.current){let f=function(){yS(RO,n,p,{discrete:!0})};const p={originalEvent:d};d.pointerType==="touch"?(t.removeEventListener("click",s.current),s.current=f,t.addEventListener("click",s.current,{once:!0})):f()}else t.removeEventListener("click",s.current);i.current=!1},u=window.setTimeout(()=>{t.addEventListener("pointerdown",l)},0);return()=>{window.clearTimeout(u),t.removeEventListener("pointerdown",l),t.removeEventListener("click",s.current)}},[t,n]),{onPointerDownCapture:()=>i.current=!0}}function jO(e,t=globalThis==null?void 0:globalThis.document){const n=La(e),i=S.useRef(!1);return S.useEffect(()=>{const s=l=>{l.target&&!i.current&&yS(DO,n,{originalEvent:l},{discrete:!1})};return t.addEventListener("focusin",s),()=>t.removeEventListener("focusin",s)},[t,n]),{onFocusCapture:()=>i.current=!0,onBlurCapture:()=>i.current=!1}}function H0(){const e=new CustomEvent(xh);document.dispatchEvent(e)}function yS(e,t,n,{discrete:i}){const s=n.originalEvent.target,l=new CustomEvent(e,{bubbles:!1,cancelable:!0,detail:n});t&&s.addEventListener(e,t,{once:!0}),i?qN(s,l):s.dispatchEvent(l)}var Ef="focusScope.autoFocusOnMount",_f="focusScope.autoFocusOnUnmount",K0={bubbles:!1,cancelable:!0},LO="FocusScope",wS=S.forwardRef((e,t)=>{const{loop:n=!1,trapped:i=!1,onMountAutoFocus:s,onUnmountAutoFocus:l,...u}=e,[d,f]=S.useState(null),p=La(s),m=La(l),g=S.useRef(null),y=yi(t,k=>f(k)),b=S.useRef({paused:!1,pause(){this.paused=!0},resume(){this.paused=!1}}).current;S.useEffect(()=>{if(i){let k=function(O){if(b.paused||!d)return;const B=O.target;d.contains(B)?g.current=B:Ro(g.current,{select:!0})},C=function(O){if(b.paused||!d)return;const B=O.relatedTarget;B!==null&&(d.contains(B)||Ro(g.current,{select:!0}))},N=function(O){if(document.activeElement===document.body)for(const Z of O)Z.removedNodes.length>0&&Ro(d)};document.addEventListener("focusin",k),document.addEventListener("focusout",C);const M=new MutationObserver(N);return d&&M.observe(d,{childList:!0,subtree:!0}),()=>{document.removeEventListener("focusin",k),document.removeEventListener("focusout",C),M.disconnect()}}},[i,d,b.paused]),S.useEffect(()=>{if(d){Y0.add(b);const k=document.activeElement;if(!d.contains(k)){const N=new CustomEvent(Ef,K0);d.addEventListener(Ef,p),d.dispatchEvent(N),N.defaultPrevented||(OO($O(xS(d)),{select:!0}),document.activeElement===k&&Ro(d))}return()=>{d.removeEventListener(Ef,p),setTimeout(()=>{const N=new CustomEvent(_f,K0);d.addEventListener(_f,m),d.dispatchEvent(N),N.defaultPrevented||Ro(k??document.body,{select:!0}),d.removeEventListener(_f,m),Y0.remove(b)},0)}}},[d,p,m,b]);const _=S.useCallback(k=>{if(!n&&!i||b.paused)return;const C=k.key==="Tab"&&!k.altKey&&!k.ctrlKey&&!k.metaKey,N=document.activeElement;if(C&&N){const M=k.currentTarget,[O,B]=zO(M);O&&B?!k.shiftKey&&N===B?(k.preventDefault(),n&&Ro(O,{select:!0})):k.shiftKey&&N===O&&(k.preventDefault(),n&&Ro(B,{select:!0})):N===M&&k.preventDefault()}},[n,i,b.paused]);return x.jsx(Sr.div,{tabIndex:-1,...u,ref:y,onKeyDown:_})});wS.displayName=LO;function OO(e,{select:t=!1}={}){const n=document.activeElement;for(const i of e)if(Ro(i,{select:t}),document.activeElement!==n)return}function zO(e){const t=xS(e),n=G0(t,e),i=G0(t.reverse(),e);return[n,i]}function xS(e){const t=[],n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,{acceptNode:i=>{const s=i.tagName==="INPUT"&&i.type==="hidden";return i.disabled||i.hidden||s?NodeFilter.FILTER_SKIP:i.tabIndex>=0?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;n.nextNode();)t.push(n.currentNode);return t}function G0(e,t){for(const n of e)if(!IO(n,{upTo:t}))return n}function IO(e,{upTo:t}){if(getComputedStyle(e).visibility==="hidden")return!0;for(;e;){if(t!==void 0&&e===t)return!1;if(getComputedStyle(e).display==="none")return!0;e=e.parentElement}return!1}function FO(e){return e instanceof HTMLInputElement&&"select"in e}function Ro(e,{select:t=!1}={}){if(e&&e.focus){const n=document.activeElement;e.focus({preventScroll:!0}),e!==n&&FO(e)&&t&&e.select()}}var Y0=VO();function VO(){let e=[];return{add(t){const n=e[0];t!==n&&(n==null||n.pause()),e=X0(e,t),e.unshift(t)},remove(t){var n;e=X0(e,t),(n=e[0])==null||n.resume()}}}function X0(e,t){const n=[...e],i=n.indexOf(t);return i!==-1&&n.splice(i,1),n}function $O(e){return e.filter(t=>t.tagName!=="A")}var UO="Portal",SS=S.forwardRef((e,t)=>{var d;const{container:n,...i}=e,[s,l]=S.useState(!1);ja(()=>l(!0),[]);const u=n||s&&((d=globalThis==null?void 0:globalThis.document)==null?void 0:d.body);return u?Th.createPortal(x.jsx(Sr.div,{...i,ref:t}),u):null});SS.displayName=UO;function BO(e,t){return S.useReducer((n,i)=>t[n][i]??n,e)}var dc=e=>{const{present:t,children:n}=e,i=WO(t),s=typeof n=="function"?n({present:i.isPresent}):S.Children.only(n),l=yi(i.ref,ZO(s));return typeof n=="function"||i.isPresent?S.cloneElement(s,{ref:l}):null};dc.displayName="Presence";function WO(e){const[t,n]=S.useState(),i=S.useRef(null),s=S.useRef(e),l=S.useRef("none"),u=e?"mounted":"unmounted",[d,f]=BO(u,{mounted:{UNMOUNT:"unmounted",ANIMATION_OUT:"unmountSuspended"},unmountSuspended:{MOUNT:"mounted",ANIMATION_END:"unmounted"},unmounted:{MOUNT:"mounted"}});return S.useEffect(()=>{const p=du(i.current);l.current=d==="mounted"?p:"none"},[d]),ja(()=>{const p=i.current,m=s.current;if(m!==e){const y=l.current,b=du(p);e?f("MOUNT"):b==="none"||(p==null?void 0:p.display)==="none"?f("UNMOUNT"):f(m&&y!==b?"ANIMATION_OUT":"UNMOUNT"),s.current=e}},[e,f]),ja(()=>{if(t){let p;const m=t.ownerDocument.defaultView??window,g=b=>{const k=du(i.current).includes(CSS.escape(b.animationName));if(b.target===t&&k&&(f("ANIMATION_END"),!s.current)){const C=t.style.animationFillMode;t.style.animationFillMode="forwards",p=m.setTimeout(()=>{t.style.animationFillMode==="forwards"&&(t.style.animationFillMode=C)})}},y=b=>{b.target===t&&(l.current=du(i.current))};return t.addEventListener("animationstart",y),t.addEventListener("animationcancel",g),t.addEventListener("animationend",g),()=>{m.clearTimeout(p),t.removeEventListener("animationstart",y),t.removeEventListener("animationcancel",g),t.removeEventListener("animationend",g)}}else f("ANIMATION_END")},[t,f]),{isPresent:["mounted","unmountSuspended"].includes(d),ref:S.useCallback(p=>{i.current=p?getComputedStyle(p):null,n(p)},[])}}function du(e){return(e==null?void 0:e.animationName)||"none"}function ZO(e){var i,s;let t=(i=Object.getOwnPropertyDescriptor(e.props,"ref"))==null?void 0:i.get,n=t&&"isReactWarning"in t&&t.isReactWarning;return n?e.ref:(t=(s=Object.getOwnPropertyDescriptor(e,"ref"))==null?void 0:s.get,n=t&&"isReactWarning"in t&&t.isReactWarning,n?e.props.ref:e.props.ref||e.ref)}var Cf=0;function HO(){S.useEffect(()=>{const e=document.querySelectorAll("[data-radix-focus-guard]");return document.body.insertAdjacentElement("afterbegin",e[0]??Q0()),document.body.insertAdjacentElement("beforeend",e[1]??Q0()),Cf++,()=>{Cf===1&&document.querySelectorAll("[data-radix-focus-guard]").forEach(t=>t.remove()),Cf--}},[])}function Q0(){const e=document.createElement("span");return e.setAttribute("data-radix-focus-guard",""),e.tabIndex=0,e.style.outline="none",e.style.opacity="0",e.style.position="fixed",e.style.pointerEvents="none",e}var Rr=function(){return Rr=Object.assign||function(t){for(var n,i=1,s=arguments.length;i<s;i++){n=arguments[i];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(t[l]=n[l])}return t},Rr.apply(this,arguments)};function bS(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var s=0,i=Object.getOwnPropertySymbols(e);s<i.length;s++)t.indexOf(i[s])<0&&Object.prototype.propertyIsEnumerable.call(e,i[s])&&(n[i[s]]=e[i[s]]);return n}function KO(e,t,n){if(n||arguments.length===2)for(var i=0,s=t.length,l;i<s;i++)(l||!(i in t))&&(l||(l=Array.prototype.slice.call(t,0,i)),l[i]=t[i]);return e.concat(l||Array.prototype.slice.call(t))}var bu="right-scroll-bar-position",ku="width-before-scroll-bar",GO="with-scroll-bars-hidden",YO="--removed-body-scroll-bar-size";function Pf(e,t){return typeof e=="function"?e(t):e&&(e.current=t),e}function XO(e,t){var n=S.useState(function(){return{value:e,callback:t,facade:{get current(){return n.value},set current(i){var s=n.value;s!==i&&(n.value=i,n.callback(i,s))}}}})[0];return n.callback=t,n.facade}var QO=typeof window<"u"?S.useLayoutEffect:S.useEffect,J0=new WeakMap;function JO(e,t){var n=XO(null,function(i){return e.forEach(function(s){return Pf(s,i)})});return QO(function(){var i=J0.get(n);if(i){var s=new Set(i),l=new Set(e),u=n.current;s.forEach(function(d){l.has(d)||Pf(d,null)}),l.forEach(function(d){s.has(d)||Pf(d,u)})}J0.set(n,e)},[e]),n}function qO(e){return e}function ez(e,t){t===void 0&&(t=qO);var n=[],i=!1,s={read:function(){if(i)throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");return n.length?n[n.length-1]:e},useMedium:function(l){var u=t(l,i);return n.push(u),function(){n=n.filter(function(d){return d!==u})}},assignSyncMedium:function(l){for(i=!0;n.length;){var u=n;n=[],u.forEach(l)}n={push:function(d){return l(d)},filter:function(){return n}}},assignMedium:function(l){i=!0;var u=[];if(n.length){var d=n;n=[],d.forEach(l),u=n}var f=function(){var m=u;u=[],m.forEach(l)},p=function(){return Promise.resolve().then(f)};p(),n={push:function(m){u.push(m),p()},filter:function(m){return u=u.filter(m),n}}}};return s}function tz(e){e===void 0&&(e={});var t=ez(null);return t.options=Rr({async:!0,ssr:!1},e),t}var kS=function(e){var t=e.sideCar,n=bS(e,["sideCar"]);if(!t)throw new Error("Sidecar: please provide `sideCar` property to import the right car");var i=t.read();if(!i)throw new Error("Sidecar medium not found");return S.createElement(i,Rr({},n))};kS.isSideCarExport=!0;function nz(e,t){return e.useMedium(t),kS}var ES=tz(),Tf=function(){},fc=S.forwardRef(function(e,t){var n=S.useRef(null),i=S.useState({onScrollCapture:Tf,onWheelCapture:Tf,onTouchMoveCapture:Tf}),s=i[0],l=i[1],u=e.forwardProps,d=e.children,f=e.className,p=e.removeScrollBar,m=e.enabled,g=e.shards,y=e.sideCar,b=e.noRelative,_=e.noIsolation,k=e.inert,C=e.allowPinchZoom,N=e.as,M=N===void 0?"div":N,O=e.gapMode,B=bS(e,["forwardProps","children","className","removeScrollBar","enabled","shards","sideCar","noRelative","noIsolation","inert","allowPinchZoom","as","gapMode"]),Z=y,re=JO([n,t]),R=Rr(Rr({},B),s);return S.createElement(S.Fragment,null,m&&S.createElement(Z,{sideCar:ES,removeScrollBar:p,shards:g,noRelative:b,noIsolation:_,inert:k,setCallbacks:l,allowPinchZoom:!!C,lockRef:n,gapMode:O}),u?S.cloneElement(S.Children.only(d),Rr(Rr({},R),{ref:re})):S.createElement(M,Rr({},R,{className:f,ref:re}),d))});fc.defaultProps={enabled:!0,removeScrollBar:!0,inert:!1};fc.classNames={fullWidth:ku,zeroRight:bu};var rz=function(){if(typeof __webpack_nonce__<"u")return __webpack_nonce__};function oz(){if(!document)return null;var e=document.createElement("style");e.type="text/css";var t=rz();return t&&e.setAttribute("nonce",t),e}function iz(e,t){e.styleSheet?e.styleSheet.cssText=t:e.appendChild(document.createTextNode(t))}function sz(e){var t=document.head||document.getElementsByTagName("head")[0];t.appendChild(e)}var az=function(){var e=0,t=null;return{add:function(n){e==0&&(t=oz())&&(iz(t,n),sz(t)),e++},remove:function(){e--,!e&&t&&(t.parentNode&&t.parentNode.removeChild(t),t=null)}}},lz=function(){var e=az();return function(t,n){S.useEffect(function(){return e.add(t),function(){e.remove()}},[t&&n])}},_S=function(){var e=lz(),t=function(n){var i=n.styles,s=n.dynamic;return e(i,s),null};return t},uz={left:0,top:0,right:0,gap:0},Rf=function(e){return parseInt(e||"",10)||0},cz=function(e){var t=window.getComputedStyle(document.body),n=t[e==="padding"?"paddingLeft":"marginLeft"],i=t[e==="padding"?"paddingTop":"marginTop"],s=t[e==="padding"?"paddingRight":"marginRight"];return[Rf(n),Rf(i),Rf(s)]},dz=function(e){if(e===void 0&&(e="margin"),typeof window>"u")return uz;var t=cz(e),n=document.documentElement.clientWidth,i=window.innerWidth;return{left:t[0],top:t[1],right:t[2],gap:Math.max(0,i-n+t[2]-t[0])}},fz=_S(),is="data-scroll-locked",hz=function(e,t,n,i){var s=e.left,l=e.top,u=e.right,d=e.gap;return n===void 0&&(n="margin"),`
  .`.concat(GO,` {
   overflow: hidden `).concat(i,`;
   padding-right: `).concat(d,"px ").concat(i,`;
  }
  body[`).concat(is,`] {
    overflow: hidden `).concat(i,`;
    overscroll-behavior: contain;
    `).concat([t&&"position: relative ".concat(i,";"),n==="margin"&&`
    padding-left: `.concat(s,`px;
    padding-top: `).concat(l,`px;
    padding-right: `).concat(u,`px;
    margin-left:0;
    margin-top:0;
    margin-right: `).concat(d,"px ").concat(i,`;
    `),n==="padding"&&"padding-right: ".concat(d,"px ").concat(i,";")].filter(Boolean).join(""),`
  }
  
  .`).concat(bu,` {
    right: `).concat(d,"px ").concat(i,`;
  }
  
  .`).concat(ku,` {
    margin-right: `).concat(d,"px ").concat(i,`;
  }
  
  .`).concat(bu," .").concat(bu,` {
    right: 0 `).concat(i,`;
  }
  
  .`).concat(ku," .").concat(ku,` {
    margin-right: 0 `).concat(i,`;
  }
  
  body[`).concat(is,`] {
    `).concat(YO,": ").concat(d,`px;
  }
`)},q0=function(){var e=parseInt(document.body.getAttribute(is)||"0",10);return isFinite(e)?e:0},pz=function(){S.useEffect(function(){return document.body.setAttribute(is,(q0()+1).toString()),function(){var e=q0()-1;e<=0?document.body.removeAttribute(is):document.body.setAttribute(is,e.toString())}},[])},mz=function(e){var t=e.noRelative,n=e.noImportant,i=e.gapMode,s=i===void 0?"margin":i;pz();var l=S.useMemo(function(){return dz(s)},[s]);return S.createElement(fz,{styles:hz(l,!t,s,n?"":"!important")})},Sh=!1;if(typeof window<"u")try{var fu=Object.defineProperty({},"passive",{get:function(){return Sh=!0,!0}});window.addEventListener("test",fu,fu),window.removeEventListener("test",fu,fu)}catch{Sh=!1}var Ki=Sh?{passive:!1}:!1,gz=function(e){return e.tagName==="TEXTAREA"},CS=function(e,t){if(!(e instanceof Element))return!1;var n=window.getComputedStyle(e);return n[t]!=="hidden"&&!(n.overflowY===n.overflowX&&!gz(e)&&n[t]==="visible")},vz=function(e){return CS(e,"overflowY")},yz=function(e){return CS(e,"overflowX")},ew=function(e,t){var n=t.ownerDocument,i=t;do{typeof ShadowRoot<"u"&&i instanceof ShadowRoot&&(i=i.host);var s=PS(e,i);if(s){var l=TS(e,i),u=l[1],d=l[2];if(u>d)return!0}i=i.parentNode}while(i&&i!==n.body);return!1},wz=function(e){var t=e.scrollTop,n=e.scrollHeight,i=e.clientHeight;return[t,n,i]},xz=function(e){var t=e.scrollLeft,n=e.scrollWidth,i=e.clientWidth;return[t,n,i]},PS=function(e,t){return e==="v"?vz(t):yz(t)},TS=function(e,t){return e==="v"?wz(t):xz(t)},Sz=function(e,t){return e==="h"&&t==="rtl"?-1:1},bz=function(e,t,n,i,s){var l=Sz(e,window.getComputedStyle(t).direction),u=l*i,d=n.target,f=t.contains(d),p=!1,m=u>0,g=0,y=0;do{if(!d)break;var b=TS(e,d),_=b[0],k=b[1],C=b[2],N=k-C-l*_;(_||N)&&PS(e,d)&&(g+=N,y+=_);var M=d.parentNode;d=M&&M.nodeType===Node.DOCUMENT_FRAGMENT_NODE?M.host:M}while(!f&&d!==document.body||f&&(t.contains(d)||t===d));return(m&&Math.abs(g)<1||!m&&Math.abs(y)<1)&&(p=!0),p},hu=function(e){return"changedTouches"in e?[e.changedTouches[0].clientX,e.changedTouches[0].clientY]:[0,0]},tw=function(e){return[e.deltaX,e.deltaY]},nw=function(e){return e&&"current"in e?e.current:e},kz=function(e,t){return e[0]===t[0]&&e[1]===t[1]},Ez=function(e){return`
  .block-interactivity-`.concat(e,` {pointer-events: none;}
  .allow-interactivity-`).concat(e,` {pointer-events: all;}
`)},_z=0,Gi=[];function Cz(e){var t=S.useRef([]),n=S.useRef([0,0]),i=S.useRef(),s=S.useState(_z++)[0],l=S.useState(_S)[0],u=S.useRef(e);S.useEffect(function(){u.current=e},[e]),S.useEffect(function(){if(e.inert){document.body.classList.add("block-interactivity-".concat(s));var k=KO([e.lockRef.current],(e.shards||[]).map(nw),!0).filter(Boolean);return k.forEach(function(C){return C.classList.add("allow-interactivity-".concat(s))}),function(){document.body.classList.remove("block-interactivity-".concat(s)),k.forEach(function(C){return C.classList.remove("allow-interactivity-".concat(s))})}}},[e.inert,e.lockRef.current,e.shards]);var d=S.useCallback(function(k,C){if("touches"in k&&k.touches.length===2||k.type==="wheel"&&k.ctrlKey)return!u.current.allowPinchZoom;var N=hu(k),M=n.current,O="deltaX"in k?k.deltaX:M[0]-N[0],B="deltaY"in k?k.deltaY:M[1]-N[1],Z,re=k.target,R=Math.abs(O)>Math.abs(B)?"h":"v";if("touches"in k&&R==="h"&&re.type==="range")return!1;var I=ew(R,re);if(!I)return!0;if(I?Z=R:(Z=R==="v"?"h":"v",I=ew(R,re)),!I)return!1;if(!i.current&&"changedTouches"in k&&(O||B)&&(i.current=Z),!Z)return!0;var ae=i.current||Z;return bz(ae,C,k,ae==="h"?O:B)},[]),f=S.useCallback(function(k){var C=k;if(!(!Gi.length||Gi[Gi.length-1]!==l)){var N="deltaY"in C?tw(C):hu(C),M=t.current.filter(function(Z){return Z.name===C.type&&(Z.target===C.target||C.target===Z.shadowParent)&&kz(Z.delta,N)})[0];if(M&&M.should){C.cancelable&&C.preventDefault();return}if(!M){var O=(u.current.shards||[]).map(nw).filter(Boolean).filter(function(Z){return Z.contains(C.target)}),B=O.length>0?d(C,O[0]):!u.current.noIsolation;B&&C.cancelable&&C.preventDefault()}}},[]),p=S.useCallback(function(k,C,N,M){var O={name:k,delta:C,target:N,should:M,shadowParent:Pz(N)};t.current.push(O),setTimeout(function(){t.current=t.current.filter(function(B){return B!==O})},1)},[]),m=S.useCallback(function(k){n.current=hu(k),i.current=void 0},[]),g=S.useCallback(function(k){p(k.type,tw(k),k.target,d(k,e.lockRef.current))},[]),y=S.useCallback(function(k){p(k.type,hu(k),k.target,d(k,e.lockRef.current))},[]);S.useEffect(function(){return Gi.push(l),e.setCallbacks({onScrollCapture:g,onWheelCapture:g,onTouchMoveCapture:y}),document.addEventListener("wheel",f,Ki),document.addEventListener("touchmove",f,Ki),document.addEventListener("touchstart",m,Ki),function(){Gi=Gi.filter(function(k){return k!==l}),document.removeEventListener("wheel",f,Ki),document.removeEventListener("touchmove",f,Ki),document.removeEventListener("touchstart",m,Ki)}},[]);var b=e.removeScrollBar,_=e.inert;return S.createElement(S.Fragment,null,_?S.createElement(l,{styles:Ez(s)}):null,b?S.createElement(mz,{noRelative:e.noRelative,gapMode:e.gapMode}):null)}function Pz(e){for(var t=null;e!==null;)e instanceof ShadowRoot&&(t=e.host,e=e.host),e=e.parentNode;return t}const Tz=nz(ES,Cz);var RS=S.forwardRef(function(e,t){return S.createElement(fc,Rr({},e,{ref:t,sideCar:Tz}))});RS.classNames=fc.classNames;var Rz=function(e){if(typeof document>"u")return null;var t=Array.isArray(e)?e[0]:e;return t.ownerDocument.body},Yi=new WeakMap,pu=new WeakMap,mu={},Df=0,DS=function(e){return e&&(e.host||DS(e.parentNode))},Dz=function(e,t){return t.map(function(n){if(e.contains(n))return n;var i=DS(n);return i&&e.contains(i)?i:(console.error("aria-hidden",n,"in not contained inside",e,". Doing nothing"),null)}).filter(function(n){return!!n})},Nz=function(e,t,n,i){var s=Dz(t,Array.isArray(e)?e:[e]);mu[n]||(mu[n]=new WeakMap);var l=mu[n],u=[],d=new Set,f=new Set(s),p=function(g){!g||d.has(g)||(d.add(g),p(g.parentNode))};s.forEach(p);var m=function(g){!g||f.has(g)||Array.prototype.forEach.call(g.children,function(y){if(d.has(y))m(y);else try{var b=y.getAttribute(i),_=b!==null&&b!=="false",k=(Yi.get(y)||0)+1,C=(l.get(y)||0)+1;Yi.set(y,k),l.set(y,C),u.push(y),k===1&&_&&pu.set(y,!0),C===1&&y.setAttribute(n,"true"),_||y.setAttribute(i,"true")}catch(N){console.error("aria-hidden: cannot operate on ",y,N)}})};return m(t),d.clear(),Df++,function(){u.forEach(function(g){var y=Yi.get(g)-1,b=l.get(g)-1;Yi.set(g,y),l.set(g,b),y||(pu.has(g)||g.removeAttribute(i),pu.delete(g)),b||g.removeAttribute(n)}),Df--,Df||(Yi=new WeakMap,Yi=new WeakMap,pu=new WeakMap,mu={})}},Az=function(e,t,n){n===void 0&&(n="data-aria-hidden");var i=Array.from(Array.isArray(e)?e:[e]),s=Rz(e);return s?(i.push.apply(i,Array.from(s.querySelectorAll("[aria-live], script"))),Nz(i,s,n,"aria-hidden")):function(){return null}},hc="Dialog",[NS]=wO(hc),[Mz,br]=NS(hc),AS=e=>{const{__scopeDialog:t,children:n,open:i,defaultOpen:s,onOpenChange:l,modal:u=!0}=e,d=S.useRef(null),f=S.useRef(null),[p,m]=EO({prop:i,defaultProp:s??!1,onChange:l,caller:hc});return x.jsx(Mz,{scope:t,triggerRef:d,contentRef:f,contentId:kf(),titleId:kf(),descriptionId:kf(),open:p,onOpenChange:m,onOpenToggle:S.useCallback(()=>m(g=>!g),[m]),modal:u,children:n})};AS.displayName=hc;var MS="DialogTrigger",jS=S.forwardRef((e,t)=>{const{__scopeDialog:n,...i}=e,s=br(MS,n),l=yi(t,s.triggerRef);return x.jsx(Sr.button,{type:"button","aria-haspopup":"dialog","aria-expanded":s.open,"aria-controls":s.contentId,"data-state":Ap(s.open),...i,ref:l,onClick:No(e.onClick,s.onOpenToggle)})});jS.displayName=MS;var Dp="DialogPortal",[jz,LS]=NS(Dp,{forceMount:void 0}),OS=e=>{const{__scopeDialog:t,forceMount:n,children:i,container:s}=e,l=br(Dp,t);return x.jsx(jz,{scope:t,forceMount:n,children:S.Children.map(i,u=>x.jsx(dc,{present:n||l.open,children:x.jsx(SS,{asChild:!0,container:s,children:u})}))})};OS.displayName=Dp;var Wu="DialogOverlay",zS=S.forwardRef((e,t)=>{const n=LS(Wu,e.__scopeDialog),{forceMount:i=n.forceMount,...s}=e,l=br(Wu,e.__scopeDialog);return l.modal?x.jsx(dc,{present:i||l.open,children:x.jsx(Oz,{...s,ref:t})}):null});zS.displayName=Wu;var Lz=Oh("DialogOverlay.RemoveScroll"),Oz=S.forwardRef((e,t)=>{const{__scopeDialog:n,...i}=e,s=br(Wu,n);return x.jsx(RS,{as:Lz,allowPinchZoom:!0,shards:[s.contentRef],children:x.jsx(Sr.div,{"data-state":Ap(s.open),...i,ref:t,style:{pointerEvents:"auto",...i.style}})})}),vi="DialogContent",IS=S.forwardRef((e,t)=>{const n=LS(vi,e.__scopeDialog),{forceMount:i=n.forceMount,...s}=e,l=br(vi,e.__scopeDialog);return x.jsx(dc,{present:i||l.open,children:l.modal?x.jsx(zz,{...s,ref:t}):x.jsx(Iz,{...s,ref:t})})});IS.displayName=vi;var zz=S.forwardRef((e,t)=>{const n=br(vi,e.__scopeDialog),i=S.useRef(null),s=yi(t,n.contentRef,i);return S.useEffect(()=>{const l=i.current;if(l)return Az(l)},[]),x.jsx(FS,{...e,ref:s,trapFocus:n.open,disableOutsidePointerEvents:!0,onCloseAutoFocus:No(e.onCloseAutoFocus,l=>{var u;l.preventDefault(),(u=n.triggerRef.current)==null||u.focus()}),onPointerDownOutside:No(e.onPointerDownOutside,l=>{const u=l.detail.originalEvent,d=u.button===0&&u.ctrlKey===!0;(u.button===2||d)&&l.preventDefault()}),onFocusOutside:No(e.onFocusOutside,l=>l.preventDefault())})}),Iz=S.forwardRef((e,t)=>{const n=br(vi,e.__scopeDialog),i=S.useRef(!1),s=S.useRef(!1);return x.jsx(FS,{...e,ref:t,trapFocus:!1,disableOutsidePointerEvents:!1,onCloseAutoFocus:l=>{var u,d;(u=e.onCloseAutoFocus)==null||u.call(e,l),l.defaultPrevented||(i.current||(d=n.triggerRef.current)==null||d.focus(),l.preventDefault()),i.current=!1,s.current=!1},onInteractOutside:l=>{var f,p;(f=e.onInteractOutside)==null||f.call(e,l),l.defaultPrevented||(i.current=!0,l.detail.originalEvent.type==="pointerdown"&&(s.current=!0));const u=l.target;((p=n.triggerRef.current)==null?void 0:p.contains(u))&&l.preventDefault(),l.detail.originalEvent.type==="focusin"&&s.current&&l.preventDefault()}})}),FS=S.forwardRef((e,t)=>{const{__scopeDialog:n,trapFocus:i,onOpenAutoFocus:s,onCloseAutoFocus:l,...u}=e,d=br(vi,n),f=S.useRef(null),p=yi(t,f);return HO(),x.jsxs(x.Fragment,{children:[x.jsx(wS,{asChild:!0,loop:!0,trapped:i,onMountAutoFocus:s,onUnmountAutoFocus:l,children:x.jsx(vS,{role:"dialog",id:d.contentId,"aria-describedby":d.descriptionId,"aria-labelledby":d.titleId,"data-state":Ap(d.open),...u,ref:p,onDismiss:()=>d.onOpenChange(!1)})}),x.jsxs(x.Fragment,{children:[x.jsx(Fz,{titleId:d.titleId}),x.jsx($z,{contentRef:f,descriptionId:d.descriptionId})]})]})}),Np="DialogTitle",VS=S.forwardRef((e,t)=>{const{__scopeDialog:n,...i}=e,s=br(Np,n);return x.jsx(Sr.h2,{id:s.titleId,...i,ref:t})});VS.displayName=Np;var $S="DialogDescription",US=S.forwardRef((e,t)=>{const{__scopeDialog:n,...i}=e,s=br($S,n);return x.jsx(Sr.p,{id:s.descriptionId,...i,ref:t})});US.displayName=$S;var BS="DialogClose",WS=S.forwardRef((e,t)=>{const{__scopeDialog:n,...i}=e,s=br(BS,n);return x.jsx(Sr.button,{type:"button",...i,ref:t,onClick:No(e.onClick,()=>s.onOpenChange(!1))})});WS.displayName=BS;function Ap(e){return e?"open":"closed"}var ZS="DialogTitleWarning",[dI,HS]=yO(ZS,{contentName:vi,titleName:Np,docsSlug:"dialog"}),Fz=({titleId:e})=>{const t=HS(ZS),n=`\`${t.contentName}\` requires a \`${t.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${t.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${t.docsSlug}`;return S.useEffect(()=>{e&&(document.getElementById(e)||console.error(n))},[n,e]),null},Vz="DialogDescriptionWarning",$z=({contentRef:e,descriptionId:t})=>{const i=`Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${HS(Vz).contentName}}.`;return S.useEffect(()=>{var l;const s=(l=e.current)==null?void 0:l.getAttribute("aria-describedby");t&&s&&(document.getElementById(t)||console.warn(i))},[i,e,t]),null},Uz=AS,Bz=jS,Wz=OS,KS=zS,GS=IS,YS=VS,XS=US,QS=WS;const Zz=Uz,Hz=Bz,Kz=QS,Gz=Wz,JS=S.forwardRef(({className:e,...t},n)=>x.jsx(KS,{className:Ot("fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",e),...t,ref:n}));JS.displayName=KS.displayName;const Yz=Xu("fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",{variants:{side:{top:"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",bottom:"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",left:"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",right:"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm"}},defaultVariants:{side:"right"}}),qS=S.forwardRef(({side:e="right",className:t,children:n,...i},s)=>x.jsxs(Gz,{children:[x.jsx(JS,{}),x.jsxs(GS,{ref:s,className:Ot(Yz({side:e}),t),...i,children:[x.jsxs(QS,{className:"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary",children:[x.jsx(Fw,{className:"h-4 w-4"}),x.jsx("span",{className:"sr-only",children:"Close"})]}),n]})]}));qS.displayName=GS.displayName;const Xz=S.forwardRef(({className:e,...t},n)=>x.jsx(YS,{ref:n,className:Ot("text-lg font-semibold text-foreground",e),...t}));Xz.displayName=YS.displayName;const Qz=S.forwardRef(({className:e,...t},n)=>x.jsx(XS,{ref:n,className:Ot("text-sm text-muted-foreground",e),...t}));Qz.displayName=XS.displayName;function Jz(){const[e,t]=S.useState(()=>{const i=localStorage.getItem("theme");return i?i==="dark":window.matchMedia("(prefers-color-scheme: dark)").matches});return S.useEffect(()=>{e?(document.documentElement.classList.add("dark"),localStorage.setItem("theme","dark")):(document.documentElement.classList.remove("dark"),localStorage.setItem("theme","light"))},[e]),{isDark:e,toggleTheme:()=>{t(!e)}}}function rw({className:e}){const{toggleTheme:t}=Jz();return x.jsxs(Mn,{onClick:t,variant:"ghost",size:"icon",className:e,"aria-label":"Toggle theme",children:[x.jsx(DC,{className:"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0"}),x.jsx(EC,{className:"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100"}),x.jsx("span",{className:"sr-only",children:"Toggle theme"})]})}function qz(){const[e,t]=S.useState(!1),n=()=>t(!1);return x.jsx("header",{className:"sticky top-0 z-50 w-full p-4",children:x.jsx("div",{className:"max-w-7xl mx-auto",children:x.jsxs("div",{className:"flex items-center justify-between h-16 px-4 sm:px-6 rounded-full bg-background/80 backdrop-blur-lg border shadow-sm",children:[x.jsx(_a,{to:"/",className:"flex items-center space-x-2",children:x.jsx("span",{className:"text-xl font-bold font-display text-foreground",children:jn.name})}),x.jsxs("nav",{className:"hidden md:flex items-center space-x-1",children:[Qv.map(i=>x.jsx(Ov,{to:i.href,className:({isActive:s})=>Ot("px-3 py-2 rounded-full text-sm font-medium transition-colors",s?"bg-primary text-primary-foreground":"text-muted-foreground hover:bg-accent hover:text-accent-foreground"),children:i.label},i.href)),x.jsx(rw,{})]}),x.jsx("div",{className:"md:hidden",children:x.jsxs(Zz,{open:e,onOpenChange:t,children:[x.jsx(Hz,{asChild:!0,children:x.jsxs(Mn,{variant:"ghost",size:"icon",children:[x.jsx(bC,{className:"h-6 w-6"}),x.jsx("span",{className:"sr-only",children:"Open menu"})]})}),x.jsx(qS,{side:"right",className:"w-full max-w-xs bg-background/95 backdrop-blur-lg p-0",children:x.jsxs("div",{className:"flex flex-col h-full",children:[x.jsxs("div",{className:"flex items-center justify-between p-4 border-b",children:[x.jsx(_a,{to:"/",className:"flex items-center space-x-2",onClick:n,children:x.jsx("span",{className:"text-xl font-bold font-display text-foreground",children:jn.name})}),x.jsx(Kz,{asChild:!0,children:x.jsxs(Mn,{variant:"ghost",size:"icon",children:[x.jsx(Fw,{className:"h-6 w-6"}),x.jsx("span",{className:"sr-only",children:"Close menu"})]})})]}),x.jsx("nav",{className:"flex-1 flex flex-col p-4 space-y-2",children:Qv.map(i=>x.jsx(Ov,{to:i.href,onClick:n,className:({isActive:s})=>Ot("px-4 py-3 rounded-lg text-base font-medium transition-colors",s?"bg-accent text-accent-foreground":"text-muted-foreground hover:bg-accent hover:text-accent-foreground"),children:x.jsxs("div",{className:"flex items-center gap-3",children:[x.jsx(i.icon,{className:"h-5 w-5"}),i.label]})},i.href))}),x.jsx("div",{className:"p-4 border-t",children:x.jsx(rw,{})})]})})]})})]})})})}function eI(){return x.jsx("footer",{className:"bg-gray-50 dark:bg-gray-900 border-t",children:x.jsxs("div",{className:"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8",children:[x.jsxs("div",{className:"flex flex-col md:flex-row justify-between items-center gap-6",children:[x.jsxs("div",{className:"text-center md:text-left",children:[x.jsx("p",{className:"text-lg font-semibold text-foreground",children:jn.name}),x.jsxs("p",{className:"text-sm text-muted-foreground",children:["© ",new Date().getFullYear()," All rights reserved."]})]}),x.jsx("div",{className:"flex items-center gap-2",children:jn.socials.map(e=>x.jsx(Mn,{variant:"ghost",size:"icon",asChild:!0,className:"text-muted-foreground hover:text-foreground transition-colors",children:x.jsx("a",{href:e.url,target:"_blank",rel:"noopener noreferrer","aria-label":e.name,children:x.jsx(e.icon,{className:"h-5 w-5"})})},e.name))})]}),x.jsx("div",{className:"text-center mt-6 text-sm text-muted-foreground",children:"Built with ❤️ at Cloudflare"})]})})}var tI=(e,t,n,i,s,l,u,d)=>{let f=document.documentElement,p=["light","dark"];function m(b){(Array.isArray(e)?e:[e]).forEach(_=>{let k=_==="class",C=k&&l?s.map(N=>l[N]||N):s;k?(f.classList.remove(...C),f.classList.add(l&&l[b]?l[b]:b)):f.setAttribute(_,b)}),g(b)}function g(b){d&&p.includes(b)&&(f.style.colorScheme=b)}function y(){return window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}if(i)m(i);else try{let b=localStorage.getItem(t)||n,_=u&&b==="system"?y():b;m(_)}catch{}},nI=S.createContext(void 0),rI={setTheme:e=>{},themes:[]},oI=()=>{var e;return(e=S.useContext(nI))!=null?e:rI};S.memo(({forcedTheme:e,storageKey:t,attribute:n,enableSystem:i,enableColorScheme:s,defaultTheme:l,value:u,themes:d,nonce:f,scriptProps:p})=>{let m=JSON.stringify([n,t,l,e,d,u,i,s]).slice(1,-1);return S.createElement("script",{...p,suppressHydrationWarning:!0,nonce:typeof window>"u"?f:"",dangerouslySetInnerHTML:{__html:`(${tI.toString()})(${m})`}})});const iI=({...e})=>{const{theme:t="system"}=oI();return x.jsx(D2,{theme:t,className:"toaster group",toastOptions:{classNames:{toast:"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",description:"group-[.toast]:text-muted-foreground",actionButton:"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",cancelButton:"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground"}},...e})};function sI({children:e}){return x.jsxs("div",{className:"min-h-screen flex flex-col bg-background text-foreground",children:[x.jsx(qz,{}),x.jsx("main",{className:"flex-grow",children:e}),x.jsx(eI,{}),x.jsx(iI,{richColors:!0,closeButton:!0,position:"top-right"})]})}const aI=()=>x.jsxs(sI,{children:[x.jsx(G_,{}),x.jsx(P_,{})]});sE();const lI=L_([{element:x.jsx(aI,{}),errorElement:x.jsx(EP,{}),children:[{path:"/",element:x.jsx(fO,{})},{path:"/projects",element:x.jsx(mO,{})},{path:"/about",element:x.jsx(gO,{})},{path:"/contact",element:x.jsx(vO,{})}]}]);fE.createRoot(document.getElementById("root")).render(x.jsx(S.StrictMode,{children:x.jsx(kP,{children:x.jsx(B_,{router:lI})})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
